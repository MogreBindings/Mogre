diff -r -u -w CMakeLists.txt CMakeLists.txt
--- CMakeLists.txt	2012-09-02 06:24:38.000000000 -0500
+++ CMakeLists.txt	2014-02-20 17:11:57.691510600 -0600
@@ -7,6 +7,8 @@
 # free to make use of it in any way you like.
 #-------------------------------------------------------------------
 
+include_directories("../../../Main/Ogre")
+
 ######################################################################
 # OGRE BUILD SYSTEM
 # Welcome to the CMake build system for OGRE.
diff -r -u -w OgreMain\CMakeLists.txt OgreMain\CMakeLists.txt
--- OgreMain\CMakeLists.txt	2012-09-02 06:24:38.000000000 -0500
+++ OgreMain\CMakeLists.txt	2014-02-20 17:11:57.693510700 -0600
@@ -18,6 +18,9 @@
 
 # define header and source files for the library
 set (HEADER_FILES
+  ../../../../Main/Ogre/CLRConfig.h
+  ../../../../Main/Ogre/CLRHandle.h
+  ../../../../Main/Ogre/CLRObject.h
   include/asm_math.h
   include/Ogre.h
   include/OgreAlignedAllocator.h
@@ -267,6 +270,8 @@
 )
 
 set (SOURCE_FILES
+  ../../../../Main/Ogre/CLRHandle.cpp
+  ../../../../Main/Ogre/CLRObject.cpp
   src/OgreAlignedAllocator.cpp
   src/OgreAnimable.cpp
   src/OgreAnimation.cpp
diff -r -u -w OgreMain\include\OgreAnimable.h OgreMain\include\OgreAnimable.h
--- OgreMain\include\OgreAnimable.h	2012-09-02 06:24:38.000000000 -0500
+++ OgreMain\include\OgreAnimable.h	2014-02-16 17:50:46.607868400 -0600
@@ -68,9 +68,11 @@
 		are often comprised of multiple properties it helps to be able to deal
 		with all values through a single class.
 	*/
-	class _OgreExport AnimableValue : public AnimableAlloc
+	class _OgreExport AnimableValue : public AnimableAlloc, public CLRObject
 	{
 	public:
+		DECLARE_INIT_CLROBJECT_METHOD_OVERRIDE(AnimableValue);
+
 		/// The type of the value being animated
 		enum ValueType
 		{
diff -r -u -w OgreMain\include\OgreAnimation.h OgreMain\include\OgreAnimation.h
--- OgreMain\include\OgreAnimation.h	2012-09-02 06:24:38.000000000 -0500
+++ OgreMain\include\OgreAnimation.h	2014-02-16 17:50:46.607868400 -0600
@@ -86,10 +86,12 @@
         You should not create these animations directly. They will be created via a parent
         object which owns the animation, e.g. Skeleton.
     */
-	class _OgreExport Animation : public AnimationAlloc
+	class _OgreExport Animation : public AnimationAlloc, public CLRObject
     {
 
     public:
+        DECLARE_INIT_CLROBJECT_METHOD_OVERRIDE(Animation);
+
         /** The types of animation interpolation available. */
         enum InterpolationMode
         {
diff -r -u -w OgreMain\include\OgreAnimationState.h OgreMain\include\OgreAnimationState.h
--- OgreMain\include\OgreAnimationState.h	2012-09-02 06:24:38.000000000 -0500
+++ OgreMain\include\OgreAnimationState.h	2014-02-16 17:50:46.608868500 -0600
@@ -49,9 +49,10 @@
         Other classes can hold instances of this class to store the state of any animations
         they are using.
     */
-	class _OgreExport AnimationState : public AnimationAlloc
+	class _OgreExport AnimationState : public AnimationAlloc, public CLRObject
     {
     public:
+      DECLARE_INIT_CLROBJECT_METHOD_OVERRIDE(AnimationState);
 
         /// Typedef for an array of float values used as a bone blend mask
         typedef vector<float>::type BoneBlendMask;
@@ -194,6 +195,8 @@
 	class _OgreExport AnimationStateSet : public AnimationAlloc
 	{
 	public:
+		DECLARE_CLRHANDLE;
+
 		/// Mutex, public for external locking if needed
 		OGRE_AUTO_MUTEX
 		/// Create a blank animation state set
diff -r -u -w OgreMain\include\OgreAnimationTrack.h OgreMain\include\OgreAnimationTrack.h
--- OgreMain\include\OgreAnimationTrack.h	2012-09-02 06:24:38.000000000 -0500
+++ OgreMain\include\OgreAnimationTrack.h	2014-02-16 17:50:46.608868500 -0600
@@ -48,6 +48,9 @@
     */
     class _OgreExport TimeIndex
     {
+    public:
+        DECLARE_CLRHANDLE;
+
     protected:
         /** The time position (in relation to the whole animation sequence)
         */
@@ -118,9 +121,10 @@
 		It is possible to change this behaviour using
 		setUseShortestRotationPath() method.
     */
-	class _OgreExport AnimationTrack : public AnimationAlloc
+	class _OgreExport AnimationTrack : public AnimationAlloc, public CLRObject
     {
     public:
+        DECLARE_INIT_CLROBJECT_METHOD_OVERRIDE(AnimationTrack);
 
 		/** Listener allowing you to override certain behaviour of a track, 
 			for example to drive animation procedurally.
@@ -264,6 +268,8 @@
 	class _OgreExport NumericAnimationTrack : public AnimationTrack
 	{
 	public:
+		DECLARE_INIT_CLROBJECT_METHOD_OVERRIDE(NumericAnimationTrack);
+
 		/// Constructor
 		NumericAnimationTrack(Animation* parent, unsigned short handle);
 		/// Constructor, associates with an AnimableValue
@@ -325,6 +331,8 @@
 	class _OgreExport NodeAnimationTrack : public AnimationTrack
 	{
 	public:
+		DECLARE_INIT_CLROBJECT_METHOD_OVERRIDE(NodeAnimationTrack);
+
 		/// Constructor
 		NodeAnimationTrack(Animation* parent, unsigned short handle);
 		/// Constructor, associates with a Node
@@ -479,6 +487,8 @@
 	class _OgreExport VertexAnimationTrack : public AnimationTrack
 	{
 	public:
+		DECLARE_INIT_CLROBJECT_METHOD_OVERRIDE(VertexAnimationTrack);
+
 		/** The target animation mode */
 		enum TargetMode
 		{
diff -r -u -w OgreMain\include\OgreArchive.h OgreMain\include\OgreArchive.h
--- OgreMain\include\OgreArchive.h	2012-09-02 06:24:38.000000000 -0500
+++ OgreMain\include\OgreArchive.h	2014-02-16 17:50:46.608868500 -0600
@@ -84,8 +84,11 @@
         to benefit from OGRE's automatic searching of multiple file locations 
         for the resources you are looking for.
     */
-	class _OgreExport Archive : public ArchiveAlloc
+	class _OgreExport Archive : public ArchiveAlloc, public CLRObject
     {
+    public:
+        DECLARE_INIT_CLROBJECT_METHOD_OVERRIDE(Archive);
+
     protected:
         /// Archive name
         String mName; 
diff -r -u -w OgreMain\include\OgreBillboard.h OgreMain\include\OgreBillboard.h
--- OgreMain\include\OgreBillboard.h	2012-09-02 06:24:38.000000000 -0500
+++ OgreMain\include\OgreBillboard.h	2014-02-16 17:50:46.608868500 -0600
@@ -65,6 +65,9 @@
 
 	class _OgreExport Billboard : public FXAlloc
     {
+    public:
+        DECLARE_CLRHANDLE;
+
         friend class BillboardSet;
         friend class BillboardParticleRenderer;
     protected:
diff -r -u -w OgreMain\include\OgreBillboardChain.h OgreMain\include\OgreBillboardChain.h
--- OgreMain\include\OgreBillboardChain.h	2012-09-02 06:24:38.000000000 -0500
+++ OgreMain\include\OgreBillboardChain.h	2014-02-16 17:50:46.608868500 -0600
@@ -77,6 +77,7 @@
 	{
 
 	public:
+		DECLARE_INIT_CLROBJECT_METHOD_OVERRIDE(BillboardChain);
 
 		/** Contains the data of an element of the BillboardChain.
 		*/
@@ -364,6 +365,9 @@
 	/** Factory object for creating BillboardChain instances */
 	class _OgreExport BillboardChainFactory : public MovableObjectFactory
 	{
+	public:
+		DECLARE_INIT_CLROBJECT_METHOD_OVERRIDE(BillboardChainFactory);
+
 	protected:
 		MovableObject* createInstanceImpl( const String& name, const NameValuePairList* params);
 	public:
diff -r -u -w OgreMain\include\OgreBillboardParticleRenderer.h OgreMain\include\OgreBillboardParticleRenderer.h
--- OgreMain\include\OgreBillboardParticleRenderer.h	2012-09-02 06:24:38.000000000 -0500
+++ OgreMain\include\OgreBillboardParticleRenderer.h	2014-02-16 17:50:46.609868500 -0600
@@ -50,6 +50,9 @@
     */
     class _OgreExport BillboardParticleRenderer : public ParticleSystemRenderer
     {
+    public:
+        DECLARE_INIT_CLROBJECT_METHOD_OVERRIDE(BillboardParticleRenderer);
+
     protected:
         /// The billboard set that's doing the rendering
         BillboardSet* mBillboardSet;
diff -r -u -w OgreMain\include\OgreBillboardSet.h OgreMain\include\OgreBillboardSet.h
--- OgreMain\include\OgreBillboardSet.h	2012-09-02 06:24:38.000000000 -0500
+++ OgreMain\include\OgreBillboardSet.h	2014-02-16 17:50:46.609868500 -0600
@@ -108,6 +108,9 @@
     */
     class _OgreExport BillboardSet : public MovableObject, public Renderable
     {
+    public:
+        DECLARE_INIT_CLROBJECT_METHOD_OVERRIDE(BillboardSet);
+
     protected:
         /** Private constructor (instances cannot be created directly).
         */
@@ -857,6 +860,9 @@
 	/** Factory object for creating BillboardSet instances */
 	class _OgreExport BillboardSetFactory : public MovableObjectFactory
 	{
+	public:
+		DECLARE_INIT_CLROBJECT_METHOD_OVERRIDE(BillboardSetFactory);
+
 	protected:
 		MovableObject* createInstanceImpl( const String& name, const NameValuePairList* params);
 	public:
diff -r -u -w OgreMain\include\OgreBone.h OgreMain\include\OgreBone.h
--- OgreMain\include\OgreBone.h	2012-09-02 06:24:38.000000000 -0500
+++ OgreMain\include\OgreBone.h	2014-02-16 17:50:46.609868500 -0600
@@ -51,6 +51,8 @@
     class _OgreExport Bone : public Node
     {
     public:
+        DECLARE_INIT_CLROBJECT_METHOD_OVERRIDE(Bone);
+
         /** Constructor, not to be used directly (use Bone::createChild or Skeleton::createBone) */
         Bone(unsigned short handle, Skeleton* creator);
         /** Constructor, not to be used directly (use Bone::createChild or Skeleton::createBone) */
diff -r -u -w OgreMain\include\OgreBorderPanelOverlayElement.h OgreMain\include\OgreBorderPanelOverlayElement.h
--- OgreMain\include\OgreBorderPanelOverlayElement.h	2012-09-02 06:24:38.000000000 -0500
+++ OgreMain\include\OgreBorderPanelOverlayElement.h	2014-02-16 17:50:46.609868500 -0600
@@ -56,6 +56,9 @@
     */
     class _OgreExport BorderPanelOverlayElement : public PanelOverlayElement
     {
+    public:
+        DECLARE_INIT_CLROBJECT_METHOD_OVERRIDE(BorderPanelOverlayElement);
+
         friend class BorderRenderable;
     public:
         /** Constructor */
@@ -317,8 +320,11 @@
         We need this because we have to render twice, once with the inner panel's repeating
         material (handled by superclass) and once for the border's separate material. 
     */
-    class _OgreExport BorderRenderable : public Renderable, public OverlayAlloc
+    class _OgreExport BorderRenderable : public Renderable, public OverlayAlloc, public CLRObject
     {
+    public:
+        DECLARE_INIT_CLROBJECT_METHOD_OVERRIDE(BorderRenderable);
+
     protected:
         BorderPanelOverlayElement* mParent;
     public:
diff -r -u -w OgreMain\include\OgreCamera.h OgreMain\include\OgreCamera.h
--- OgreMain\include\OgreCamera.h	2012-09-02 06:24:38.000000000 -0500
+++ OgreMain\include\OgreCamera.h	2014-02-16 17:50:46.610868600 -0600
@@ -85,6 +85,8 @@
     class _OgreExport Camera : public Frustum
     {
 	public:
+		DECLARE_INIT_CLROBJECT_METHOD_OVERRIDE(Camera);
+
 		/** Listener interface so you can be notified of Camera events. 
 		*/
 		class _OgreExport Listener 
diff -r -u -w OgreMain\include\OgreCodec.h OgreMain\include\OgreCodec.h
--- OgreMain\include\OgreCodec.h	2012-09-02 06:24:38.000000000 -0500
+++ OgreMain\include\OgreCodec.h	2014-02-16 17:50:46.610868600 -0600
@@ -52,8 +52,11 @@
             The codec concept is a pretty generic one - you can easily understand
             how it can be used for images, sounds, archives, even compressed data.
     */
-	class _OgreExport Codec : public CodecAlloc
+	class _OgreExport Codec : public CodecAlloc, public CLRObject
     {
+    public:
+        DECLARE_INIT_CLROBJECT_METHOD_OVERRIDE(Codec);
+
     protected:
         typedef map< String, Codec* >::type CodecList; 
         /** A map that contains all the registered codecs.
@@ -61,9 +64,11 @@
         static CodecList msMapCodecs;
 
     public:
-        class _OgrePrivate CodecData : public CodecAlloc
+        class _OgrePrivate CodecData : public CodecAlloc, public CLRObject
         {
         public:
+            DECLARE_INIT_CLROBJECT_METHOD_OVERRIDE(Codec_CodecData);
+
             virtual ~CodecData() {}
 
             /** Returns the type of the data.
diff -r -u -w OgreMain\include\OgreCommon.h OgreMain\include\OgreCommon.h
--- OgreMain\include\OgreCommon.h	2012-09-02 06:24:38.000000000 -0500
+++ OgreMain\include\OgreCommon.h	2014-02-16 17:50:46.610868600 -0600
@@ -406,7 +406,7 @@
 		{ 
 			// we have to assume that hash needs recalculating on non-const
 			dirtyHash();
-			return mList.const_iterator(n); 
+			return mList.at(n);
 		}
 		const_reference at(size_type n) const { return mList.at(n); }
 		HashedVector() : mListHash(0), mListHashDirty(false) {}
@@ -518,6 +518,17 @@
 				dirtyHash();
 		}
 
+		void assign(size_type n, const T& u)
+		{
+			mList.assign(n, u);
+		}
+
+		template <class InputIterator>
+		void assign(InputIterator first, InputIterator last)
+		{
+			mList.assign(first, last);
+		}
+
 		bool operator==(const HashedVector<T>& b)
 		{ return mListHash == b.mListHash; }
 
diff -r -u -w OgreMain\include\OgreCompositionPass.h OgreMain\include\OgreCompositionPass.h
--- OgreMain\include\OgreCompositionPass.h	2012-09-02 06:24:38.000000000 -0500
+++ OgreMain\include\OgreCompositionPass.h	2014-02-16 17:50:46.610868600 -0600
@@ -46,6 +46,8 @@
 	class _OgreExport CompositionPass : public CompositorInstAlloc
     {
     public:
+        DECLARE_CLRHANDLE;
+
         CompositionPass(CompositionTargetPass *parent);
         ~CompositionPass();
         
@@ -222,6 +224,8 @@
 		/// Inputs (for material used for rendering the quad)
 		struct InputTex
 		{
+			DECLARE_CLRHANDLE;
+
 			/// Name (local) of the input texture (empty == no input)
 			String name;
 			/// MRT surface index if applicable
diff -r -u -w OgreMain\include\OgreCompositionTargetPass.h OgreMain\include\OgreCompositionTargetPass.h
--- OgreMain\include\OgreCompositionTargetPass.h	2012-09-02 06:24:38.000000000 -0500
+++ OgreMain\include\OgreCompositionTargetPass.h	2014-02-16 17:50:46.611868600 -0600
@@ -44,6 +44,8 @@
 	class _OgreExport CompositionTargetPass : public CompositorInstAlloc
     {
     public:
+        DECLARE_CLRHANDLE;
+
         CompositionTargetPass(CompositionTechnique *parent);
         ~CompositionTargetPass();
         
diff -r -u -w OgreMain\include\OgreCompositionTechnique.h OgreMain\include\OgreCompositionTechnique.h
--- OgreMain\include\OgreCompositionTechnique.h	2012-09-02 06:24:38.000000000 -0500
+++ OgreMain\include\OgreCompositionTechnique.h	2014-02-16 17:50:46.611868600 -0600
@@ -41,9 +41,11 @@
 	*/
 	/** Base composition technique, can be subclassed in plugins.
      */
-	class _OgreExport CompositionTechnique : public CompositorInstAlloc
+	class _OgreExport CompositionTechnique : public CompositorInstAlloc, public CLRObject
     {
     public:
+        DECLARE_INIT_CLROBJECT_METHOD_OVERRIDE(CompositionTechnique);
+
         CompositionTechnique(Compositor *parent);
         virtual ~CompositionTechnique();
     
diff -r -u -w OgreMain\include\OgreCompositor.h OgreMain\include\OgreCompositor.h
--- OgreMain\include\OgreCompositor.h	2012-09-02 06:24:38.000000000 -0500
+++ OgreMain\include\OgreCompositor.h	2014-02-16 17:50:46.611868600 -0600
@@ -49,6 +49,8 @@
     class _OgreExport Compositor: public Resource
     {
     public:
+        DECLARE_INIT_CLROBJECT_METHOD_OVERRIDE(Compositor);
+
         Compositor(ResourceManager* creator, const String& name, ResourceHandle handle,
             const String& group, bool isManual = false, ManualResourceLoader* loader = 0);
         ~Compositor();
diff -r -u -w OgreMain\include\OgreCompositorChain.h OgreMain\include\OgreCompositorChain.h
--- OgreMain\include\OgreCompositorChain.h	2012-09-02 06:24:38.000000000 -0500
+++ OgreMain\include\OgreCompositorChain.h	2014-02-16 17:50:46.611868600 -0600
@@ -44,9 +44,11 @@
 	*/
 	/** Chain of compositor effects applying to one viewport.
      */
-	class _OgreExport CompositorChain : public RenderTargetListener, public Viewport::Listener, public CompositorInstAlloc
+        class _OgreExport CompositorChain : public RenderTargetListener, public Viewport::Listener, public CompositorInstAlloc, public CLRObject
 	{
 	public:
+        DECLARE_INIT_CLROBJECT_METHOD_OVERRIDE(CompositorChain);
+
         CompositorChain(Viewport *vp);
         /** Another gcc warning here, which is no problem because RenderTargetListener is never used
             to delete an object.
diff -r -u -w OgreMain\include\OgreCompositorInstance.h OgreMain\include\OgreCompositorInstance.h
--- OgreMain\include\OgreCompositorInstance.h	2012-09-02 06:24:38.000000000 -0500
+++ OgreMain\include\OgreCompositorInstance.h	2014-02-16 17:50:46.611868600 -0600
@@ -46,9 +46,11 @@
     /** An instance of a Compositor object for one Viewport. It is part of the CompositorChain
 		for a Viewport.
      */
-	class _OgreExport CompositorInstance : public CompositorInstAlloc
+	class _OgreExport CompositorInstance : public CompositorInstAlloc, public CLRObject
     {
     public:
+        DECLARE_INIT_CLROBJECT_METHOD_OVERRIDE(CompositorInstance);
+
         CompositorInstance(CompositionTechnique *technique, CompositorChain *chain);
         virtual ~CompositorInstance();
 		/** Provides an interface to "listen in" to to render system operations executed by this 
diff -r -u -w OgreMain\include\OgreConfig.h OgreMain\include\OgreConfig.h
--- OgreMain\include\OgreConfig.h	2012-09-02 06:24:38.000000000 -0500
+++ OgreMain\include\OgreConfig.h	2014-02-16 17:50:46.607868400 -0600
@@ -92,18 +92,6 @@
 #  define OGRE_MEMORY_ALLOCATOR OGRE_MEMORY_ALLOCATOR_NEDPOOLING
 #endif
 
-// Whether to use the custom memory allocator in STL containers
-#ifndef OGRE_CONTAINERS_USE_CUSTOM_MEMORY_ALLOCATOR
-#  define OGRE_CONTAINERS_USE_CUSTOM_MEMORY_ALLOCATOR 1
-#endif
-
-//if you want to make Ogre::String use the custom memory allocator then set:
-//#define OGRE_STRING_USE_CUSTOM_MEMORY_ALLOCATOR 1
-// Doing this will mean Ogre's strings will not be compatible with std::string however
-#ifndef OGRE_STRING_USE_CUSTOM_MEMORY_ALLOCATOR
-#	define OGRE_STRING_USE_CUSTOM_MEMORY_ALLOCATOR 0
-#endif
-
 // enable or disable the memory tracker, recording the memory allocations & tracking leaks
 // default is to disable since it's expensive, but you can enable if needed per build target
 
diff -r -u -w OgreMain\include\OgreCustomCompositionPass.h OgreMain\include\OgreCustomCompositionPass.h
--- OgreMain\include\OgreCustomCompositionPass.h	2012-09-02 06:24:38.000000000 -0500
+++ OgreMain\include\OgreCustomCompositionPass.h	2014-02-16 17:50:46.612868700 -0600
@@ -30,6 +30,7 @@
 
 #include "OgrePrerequisites.h"
 #include "OgreCompositionPass.h"
+#include "OgreCompositorInstance.h"
 
 namespace Ogre {
 	/** \addtogroup Core
diff -r -u -w OgreMain\include\OgreDefaultHardwareBufferManager.h OgreMain\include\OgreDefaultHardwareBufferManager.h
--- OgreMain\include\OgreDefaultHardwareBufferManager.h	2012-09-02 06:24:38.000000000 -0500
+++ OgreMain\include\OgreDefaultHardwareBufferManager.h	2014-02-16 17:50:46.612868700 -0600
@@ -103,6 +103,8 @@
 	class _OgreExport DefaultHardwareBufferManagerBase : public HardwareBufferManagerBase
 	{
     public:
+        DECLARE_INIT_CLROBJECT_METHOD_OVERRIDE(DefaultHardwareBufferManagerBase);
+
         DefaultHardwareBufferManagerBase();
         ~DefaultHardwareBufferManagerBase();
         /// Creates a vertex buffer
diff -r -u -w OgreMain\include\OgreDepthBuffer.h OgreMain\include\OgreDepthBuffer.h
--- OgreMain\include\OgreDepthBuffer.h	2012-09-02 06:24:38.000000000 -0500
+++ OgreMain\include\OgreDepthBuffer.h	2014-02-16 17:50:46.635870000 -0600
@@ -78,9 +78,12 @@
         @version
             1.0
      */
-	class _OgreExport DepthBuffer : public RenderSysAlloc
+	class _OgreExport DepthBuffer : public RenderSysAlloc, public CLRObject
 	{
 	public:
+		DECLARE_INIT_CLROBJECT_METHOD_OVERRIDE(DepthBuffer);
+
+	public:
 		enum PoolId
 		{
 			POOL_NO_DEPTH		= 0,
@@ -150,6 +153,10 @@
 
 		void detachFromAllRenderTargets();
 	};
+
+	/** @} */
+	/** @} */
+
 }
 
 #endif
diff -r -u -w OgreMain\include\OgreDistanceLodStrategy.h OgreMain\include\OgreDistanceLodStrategy.h
--- OgreMain\include\OgreDistanceLodStrategy.h	2012-09-02 06:24:38.000000000 -0500
+++ OgreMain\include\OgreDistanceLodStrategy.h	2014-02-16 17:50:46.612868700 -0600
@@ -45,6 +45,9 @@
     /** Level of detail strategy based on distance from camera. */
     class _OgreExport DistanceLodStrategy : public LodStrategy, public Singleton<DistanceLodStrategy>
     {
+    public:
+        DECLARE_INIT_CLROBJECT_METHOD_OVERRIDE(DistanceLodStrategy);
+
     protected:
         /// @copydoc LodStrategy::getValueImpl
         virtual Real getValueImpl(const MovableObject *movableObject, const Camera *camera) const;
diff -r -u -w OgreMain\include\OgreEdgeListBuilder.h OgreMain\include\OgreEdgeListBuilder.h
--- OgreMain\include\OgreEdgeListBuilder.h	2012-09-02 06:24:38.000000000 -0500
+++ OgreMain\include\OgreEdgeListBuilder.h	2014-02-16 17:50:46.612868700 -0600
@@ -51,6 +51,8 @@
 	class _OgreExport EdgeData : public EdgeDataAlloc
     {
     public:
+        DECLARE_CLRHANDLE;
+
         /** Basic triangle structure. */
         struct Triangle {
             /** The set of indexes this triangle came from (NB it is possible that the triangles on 
diff -r -u -w OgreMain\include\OgreEntity.h OgreMain\include\OgreEntity.h
--- OgreMain\include\OgreEntity.h	2012-09-02 06:24:38.000000000 -0500
+++ OgreMain\include\OgreEntity.h	2014-02-16 17:50:46.613868800 -0600
@@ -80,6 +80,9 @@
 	*/
 	class _OgreExport Entity: public MovableObject, public Resource::Listener
 	{
+	public:
+		DECLARE_INIT_CLROBJECT_METHOD_OVERRIDE(Entity);
+
 		// Allow EntityFactory full access
 		friend class EntityFactory;
 		friend class SubEntity;
@@ -846,6 +849,9 @@
 	/** Factory object for creating Entity instances */
 	class _OgreExport EntityFactory : public MovableObjectFactory
 	{
+	public:
+		DECLARE_INIT_CLROBJECT_METHOD_OVERRIDE(EntityFactory);
+
 	protected:
 		MovableObject* createInstanceImpl( const String& name, const NameValuePairList* params);
 	public:
diff -r -u -w OgreMain\include\OgreException.h OgreMain\include\OgreException.h
--- OgreMain\include\OgreException.h	2012-09-02 06:24:38.000000000 -0500
+++ OgreMain\include\OgreException.h	2014-02-16 17:50:46.613868800 -0600
@@ -151,7 +151,7 @@
 
         /** Gets the error code.
         */
-        virtual int getNumber(void) const throw();
+        virtual ExceptionCodes getNumber(void) const throw();
 
         /** Gets the source function.
         */
@@ -174,6 +174,12 @@
 		/// Override std::exception::what
 		const char* what() const throw() { return getFullDescription().c_str(); }
         
+        //Additions for Mogre
+        /** Retrieves a pointer to the last exception created.
+        */
+        static Exception* getLastException() throw();
+        static void clearLastException() throw();
+        
     };
 
 
diff -r -u -w OgreMain\include\OgreExternalTextureSource.h OgreMain\include\OgreExternalTextureSource.h
--- OgreMain\include\OgreExternalTextureSource.h	2012-09-02 06:24:38.000000000 -0500
+++ OgreMain\include\OgreExternalTextureSource.h	2014-02-16 17:50:46.613868800 -0600
@@ -70,9 +70,11 @@
 	before calling create defined texture... or it will fail, though, it 
 	is up to the plugin to report errors to the log file, or raise an 
 	exception if need be. */
-	class _OgreExport ExternalTextureSource : public StringInterface
+	class _OgreExport ExternalTextureSource : public StringInterface, public CLRObject
 	{
 	public:
+		DECLARE_INIT_CLROBJECT_METHOD_OVERRIDE(ExternalTextureSource);
+
 		/** Constructor */
 		ExternalTextureSource();
 		/** Virtual destructor */
diff -r -u -w OgreMain\include\OgreFileSystem.h OgreMain\include\OgreFileSystem.h
--- OgreMain\include\OgreFileSystem.h	2012-09-02 06:24:38.000000000 -0500
+++ OgreMain\include\OgreFileSystem.h	2014-02-16 17:50:46.613868800 -0600
@@ -46,6 +46,9 @@
     */
     class _OgreExport FileSystemArchive : public Archive 
     {
+    public:
+        DECLARE_INIT_CLROBJECT_METHOD_OVERRIDE(FileSystemArchive);
+
     protected:
         /** Utility method to retrieve all files in a directory matching pattern.
         @param pattern File pattern
diff -r -u -w OgreMain\include\OgreFont.h OgreMain\include\OgreFont.h
--- OgreMain\include\OgreFont.h	2012-09-02 06:24:38.000000000 -0500
+++ OgreMain\include\OgreFont.h	2014-02-16 17:50:46.613868800 -0600
@@ -66,6 +66,9 @@
     */
 	class _OgreExport Font : public Resource, public ManualResourceLoader
     {
+	public:
+		DECLARE_INIT_CLROBJECT_METHOD_OVERRIDE(Font);
+
     protected:
 		/// Command object for Font - see ParamCommand 
 		class _OgreExport CmdType : public ParamCommand
diff -r -u -w OgreMain\include\OgreFrustum.h OgreMain\include\OgreFrustum.h
--- OgreMain\include\OgreFrustum.h	2012-09-02 06:24:38.000000000 -0500
+++ OgreMain\include\OgreFrustum.h	2014-02-16 17:50:46.614868800 -0600
@@ -83,6 +83,9 @@
     */
     class _OgreExport Frustum : public MovableObject, public Renderable
     {
+    public:
+        DECLARE_INIT_CLROBJECT_METHOD_OVERRIDE(Frustum);
+
     protected:
         /// Orthographic or perspective?
         ProjectionType mProjType;
diff -r -u -w OgreMain\include\OgreGpuProgram.h OgreMain\include\OgreGpuProgram.h
--- OgreMain\include\OgreGpuProgram.h	2012-09-02 06:24:38.000000000 -0500
+++ OgreMain\include\OgreGpuProgram.h	2014-02-16 17:50:46.614868800 -0600
@@ -68,6 +68,9 @@
 	*/
 	class _OgreExport GpuProgram : public Resource
 	{
+	public:
+		DECLARE_INIT_CLROBJECT_METHOD_OVERRIDE(GpuProgram);
+
 	protected:
 		/// Command object - see ParamCommand 
 		class _OgreExport CmdType : public ParamCommand
diff -r -u -w OgreMain\include\OgreGpuProgramParams.h OgreMain\include\OgreGpuProgramParams.h
--- OgreMain\include\OgreGpuProgramParams.h	2012-09-02 06:24:38.000000000 -0500
+++ OgreMain\include\OgreGpuProgramParams.h	2014-02-16 17:50:46.614868800 -0600
@@ -394,6 +394,9 @@
 	*/
 	class _OgreExport GpuSharedParameters : public GpuParamsAlloc
 	{
+	public:
+		DECLARE_CLRHANDLE;
+
 	protected:
 		GpuNamedConstants mNamedConstants;
 		FloatConstantList mFloatConstants;
@@ -508,6 +511,9 @@
 	*/
 	class _OgreExport GpuSharedParametersUsage : public GpuParamsAlloc
 	{
+	public:
+		DECLARE_CLRHANDLE;
+
 	protected:
 		GpuSharedParametersPtr mSharedParams;
 		// Not a shared pointer since this is also parent
@@ -592,6 +598,8 @@
 	class _OgreExport GpuProgramParameters : public GpuParamsAlloc
 	{
 	public:
+		DECLARE_CLRHANDLE;
+
 		/** Defines the types of automatically updated values that may be bound to GpuProgram
 		parameters, or used to modify parameters on a per-object basis.
 		*/
diff -r -u -w OgreMain\include\OgreHardwareBuffer.h OgreMain\include\OgreHardwareBuffer.h
--- OgreMain\include\OgreHardwareBuffer.h	2012-09-02 06:24:38.000000000 -0500
+++ OgreMain\include\OgreHardwareBuffer.h	2014-02-16 17:50:46.614868800 -0600
@@ -71,10 +71,12 @@
 		You should look for the 'useShadowBuffer' parameter on the creation methods used to create
 		the buffer of the type you require (see HardwareBufferManager) to enable this feature.
     */
-	class _OgreExport HardwareBuffer : public BufferAlloc
+	class _OgreExport HardwareBuffer : public BufferAlloc, public CLRObject
     {
 
 	    public:
+		    DECLARE_INIT_CLROBJECT_METHOD_OVERRIDE(HardwareBuffer);
+
 		    /// Enums describing buffer usage; not mutually exclusive
 		    enum Usage 
 		    {
diff -r -u -w OgreMain\include\OgreHardwareBufferManager.h OgreMain\include\OgreHardwareBufferManager.h
--- OgreMain\include\OgreHardwareBufferManager.h	2012-09-02 06:24:38.000000000 -0500
+++ OgreMain\include\OgreHardwareBufferManager.h	2014-02-16 17:50:46.615868900 -0600
@@ -106,8 +106,12 @@
 		and passes it to the HardwareBufferManager superclass as a delegate. 
 		This subclass must also delete the implementation instance it creates.
 	*/
-	class _OgreExport HardwareBufferManagerBase : public BufferAlloc
+	class _OgreExport HardwareBufferManagerBase : public BufferAlloc, public CLRObject
 	{
+    public:
+        DECLARE_INIT_CLROBJECT_METHOD_OVERRIDE(HardwareBufferManagerBase);
+
+    private:
         friend class HardwareVertexBufferSharedPtr;
         friend class HardwareIndexBufferSharedPtr;
     protected:
@@ -383,6 +387,10 @@
     /** Singleton wrapper for hardware buffer manager. */
     class _OgreExport HardwareBufferManager : public HardwareBufferManagerBase, public Singleton<HardwareBufferManager>
     {
+    public:
+        DECLARE_INIT_CLROBJECT_METHOD_OVERRIDE(HardwareBufferManager);
+
+    private:
         friend class HardwareVertexBufferSharedPtr;
         friend class HardwareIndexBufferSharedPtr;
     protected:
diff -r -u -w OgreMain\include\OgreHardwareIndexBuffer.h OgreMain\include\OgreHardwareIndexBuffer.h
--- OgreMain\include\OgreHardwareIndexBuffer.h	2012-09-02 06:24:38.000000000 -0500
+++ OgreMain\include\OgreHardwareIndexBuffer.h	2014-02-16 17:50:46.615868900 -0600
@@ -46,6 +46,8 @@
     class _OgreExport HardwareIndexBuffer : public HardwareBuffer
     {
 	    public:
+		    DECLARE_INIT_CLROBJECT_METHOD_OVERRIDE(HardwareIndexBuffer);
+
 		    enum IndexType {
 			    IT_16BIT,
 			    IT_32BIT
diff -r -u -w OgreMain\include\OgreHardwareOcclusionQuery.h OgreMain\include\OgreHardwareOcclusionQuery.h
--- OgreMain\include\OgreHardwareOcclusionQuery.h	2012-09-02 06:24:38.000000000 -0500
+++ OgreMain\include\OgreHardwareOcclusionQuery.h	2014-02-16 17:50:46.615868900 -0600
@@ -48,12 +48,14 @@
   * @author Lee Sandberg
   * Updated on 13/8/2005 by Tuan Kuranes email: tuan.kuranes@free.fr
   */
-	class _OgreExport HardwareOcclusionQuery : public RenderSysAlloc
+	class _OgreExport HardwareOcclusionQuery : public RenderSysAlloc, public CLRObject
 {
 //----------------------------------------------------------------------
 // Public methods
 //--
 public:
+	DECLARE_INIT_CLROBJECT_METHOD_OVERRIDE(HardwareOcclusionQuery);
+
 	/**
 	  * Object public member functions
 	  */
diff -r -u -w OgreMain\include\OgreHardwarePixelBuffer.h OgreMain\include\OgreHardwarePixelBuffer.h
--- OgreMain\include\OgreHardwarePixelBuffer.h	2012-09-02 06:24:38.000000000 -0500
+++ OgreMain\include\OgreHardwarePixelBuffer.h	2014-02-16 17:50:46.615868900 -0600
@@ -51,6 +51,9 @@
     */
     class _OgreExport HardwarePixelBuffer : public HardwareBuffer
     {
+    public:
+        DECLARE_INIT_CLROBJECT_METHOD_OVERRIDE(HardwarePixelBuffer);
+
     protected: 
         // Extents
         size_t mWidth, mHeight, mDepth;
diff -r -u -w OgreMain\include\OgreHardwareVertexBuffer.h OgreMain\include\OgreHardwareVertexBuffer.h
--- OgreMain\include\OgreHardwareVertexBuffer.h	2012-09-02 06:24:38.000000000 -0500
+++ OgreMain\include\OgreHardwareVertexBuffer.h	2014-02-16 17:50:46.615868900 -0600
@@ -46,6 +46,9 @@
 	/** Specialisation of HardwareBuffer for a vertex buffer. */
     class _OgreExport HardwareVertexBuffer : public HardwareBuffer
     {
+    public:
+        DECLARE_INIT_CLROBJECT_METHOD_OVERRIDE(HardwareVertexBuffer);
+
 	    protected:
 
 		    HardwareBufferManagerBase* mMgr;
@@ -314,9 +317,11 @@
 	Like the other classes in this functional area, these declarations should be created and
 	destroyed using the HardwareBufferManager.
     */
-	class _OgreExport VertexDeclaration : public VertexDataAlloc
+	class _OgreExport VertexDeclaration : public VertexDataAlloc, public CLRObject
     {
     public:
+        DECLARE_INIT_CLROBJECT_METHOD_OVERRIDE(VertexDeclaration);
+
 		/// Defines the list of vertex elements that makes up this declaration
         typedef list<VertexElement>::type VertexElementList;
         /// Sort routine for vertex elements
@@ -498,9 +503,11 @@
 		Like the other classes in this functional area, these binding maps should be created and
 		destroyed using the HardwareBufferManager.
 	*/
-	class _OgreExport VertexBufferBinding : public VertexDataAlloc
+	class _OgreExport VertexBufferBinding : public VertexDataAlloc, public CLRObject
 	{
 	public:
+		DECLARE_INIT_CLROBJECT_METHOD_OVERRIDE(VertexBufferBinding);
+
 		/// Defines the vertex buffer bindings used as source for vertex declarations
 		typedef map<unsigned short, HardwareVertexBufferSharedPtr>::type VertexBufferBindingMap;
 	protected:
diff -r -u -w OgreMain\include\OgreHeaderSuffix.h OgreMain\include\OgreHeaderSuffix.h
--- OgreMain\include\OgreHeaderSuffix.h	2012-09-02 06:24:38.000000000 -0500
+++ OgreMain\include\OgreHeaderSuffix.h	2014-02-16 17:50:46.550865200 -0600
@@ -23,8 +23,8 @@
 OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
 THE SOFTWARE
 -------------------------------------------------------------------------*/
-#ifndef __OgreHeaderSuffix_H__
-#define __OgreHeaderSuffix_H__
+#ifndef __OgreHeaderPrefix_H__
+#define __OgreHeaderPrefix_H__
 
 #include "OgrePrerequisites.h"
 
@@ -39,6 +39,6 @@
 
 #endif
 // allow inclusion of prefix again now (this is scoped)
-#undef __OgreHeaderSuffix_H__
+#undef __OgreHeaderPrefix_H__
 
 
diff -r -u -w OgreMain\include\OgreHighLevelGpuProgram.h OgreMain\include\OgreHighLevelGpuProgram.h
--- OgreMain\include\OgreHighLevelGpuProgram.h	2012-09-02 06:24:38.000000000 -0500
+++ OgreMain\include\OgreHighLevelGpuProgram.h	2014-02-16 17:50:46.616868900 -0600
@@ -62,6 +62,9 @@
     */
     class _OgreExport HighLevelGpuProgram : public GpuProgram
     {
+    public:
+        DECLARE_INIT_CLROBJECT_METHOD_OVERRIDE(HighLevelGpuProgram);
+
     protected:
         /// Whether the high-level program (and it's parameter defs) is loaded
         bool mHighLevelLoaded;
diff -r -u -w OgreMain\include\OgreImage.h OgreMain\include\OgreImage.h
--- OgreMain\include\OgreImage.h	2012-09-02 06:24:38.000000000 -0500
+++ OgreMain\include\OgreImage.h	2014-02-16 17:50:46.616868900 -0600
@@ -61,6 +61,8 @@
 	class _OgreExport Image : public ImageAlloc
     {
     public:
+    	DECLARE_CLRHANDLE;
+
     	typedef Ogre::Box Box;
     	typedef Ogre::Rect Rect;
     public:
diff -r -u -w OgreMain\include\OgreImageCodec.h OgreMain\include\OgreImageCodec.h
--- OgreMain\include\OgreImageCodec.h	2012-09-02 06:24:38.000000000 -0500
+++ OgreMain\include\OgreImageCodec.h	2014-02-16 17:50:46.616868900 -0600
@@ -47,12 +47,16 @@
     class _OgreExport ImageCodec : public Codec
     {
     public:
+        DECLARE_INIT_CLROBJECT_METHOD_OVERRIDE(ImageCodec);
+
         virtual ~ImageCodec();
         /** Codec return class for images. Has information about the size and the
             pixel format of the image. */
         class _OgrePrivate ImageData : public Codec::CodecData
         {
         public:
+            DECLARE_INIT_CLROBJECT_METHOD_OVERRIDE(ImageCodec_ImageData);
+
 			ImageData():
 				height(0), width(0), depth(1), size(0),
 				num_mipmaps(0), flags(0), format(PF_UNKNOWN)
diff -r -u -w OgreMain\include\OgreInstanceBatch.h OgreMain\include\OgreInstanceBatch.h
--- OgreMain\include\OgreInstanceBatch.h	2012-09-02 06:24:38.000000000 -0500
+++ OgreMain\include\OgreInstanceBatch.h	2014-02-16 17:50:46.635870000 -0600
@@ -87,6 +87,8 @@
 	class _OgreExport InstanceBatch : public Renderable, public MovableObject
 	{
 	public:
+		DECLARE_INIT_CLROBJECT_METHOD_OVERRIDE(InstanceBatch);
+
 		typedef vector<InstancedEntity*>::type InstancedEntityVec;
 	protected:
 		RenderOperation		mRenderOperation;
@@ -343,6 +345,10 @@
         using Renderable::getUserAny;
         using Renderable::setUserAny;
 	};
+
+	/** @} */
+	/** @} */
+
 }
 
 #endif
diff -r -u -w OgreMain\include\OgreInstanceBatchHW.h OgreMain\include\OgreInstanceBatchHW.h
--- OgreMain\include\OgreInstanceBatchHW.h	2012-09-02 06:24:38.000000000 -0500
+++ OgreMain\include\OgreInstanceBatchHW.h	2014-02-16 17:50:46.636870100 -0600
@@ -105,6 +105,10 @@
 			per unit basis and finally updated the vertex buffer */
 		virtual void _updateRenderQueue( RenderQueue* queue );
 	};
+
+	/** @} */
+	/** @} */
+
 }
 
 #endif
diff -r -u -w OgreMain\include\OgreInstanceBatchHW_VTF.h OgreMain\include\OgreInstanceBatchHW_VTF.h
--- OgreMain\include\OgreInstanceBatchHW_VTF.h	2012-09-02 06:24:38.000000000 -0500
+++ OgreMain\include\OgreInstanceBatchHW_VTF.h	2014-02-16 17:50:46.636870100 -0600
@@ -108,6 +108,9 @@
 		virtual void _updateRenderQueue( RenderQueue* queue );
 	};
 
+	/** @} */
+	/** @} */
+
 }
 
 #endif
diff -r -u -w OgreMain\include\OgreInstanceBatchShader.h OgreMain\include\OgreInstanceBatchShader.h
--- OgreMain\include\OgreInstanceBatchShader.h	2012-09-02 06:24:38.000000000 -0500
+++ OgreMain\include\OgreInstanceBatchShader.h	2014-02-16 17:50:46.636870100 -0600
@@ -94,6 +94,10 @@
 		void getWorldTransforms( Matrix4* xform ) const;
 		unsigned short getNumWorldTransforms(void) const;
 	};
+
+	/** @} */
+	/** @} */
+
 }
 
 #endif
diff -r -u -w OgreMain\include\OgreInstanceBatchVTF.h OgreMain\include\OgreInstanceBatchVTF.h
--- OgreMain\include\OgreInstanceBatchVTF.h	2012-09-02 06:24:38.000000000 -0500
+++ OgreMain\include\OgreInstanceBatchVTF.h	2014-02-16 17:50:46.636870100 -0600
@@ -221,6 +221,10 @@
 		/** @see InstanceBatch::calculateMaxNumInstances */
 		size_t calculateMaxNumInstances( const SubMesh *baseSubMesh, uint16 flags ) const;
 	};
+
+	/** @} */
+	/** @} */
+
 }
 
 #endif
diff -r -u -w OgreMain\include\OgreInstancedEntity.h OgreMain\include\OgreInstancedEntity.h
--- OgreMain\include\OgreInstancedEntity.h	2012-09-02 06:24:38.000000000 -0500
+++ OgreMain\include\OgreInstancedEntity.h	2014-02-16 17:50:46.637870100 -0600
@@ -75,6 +75,9 @@
      */
 	class _OgreExport InstancedEntity : public Ogre::MovableObject
 	{
+	public:
+		DECLARE_INIT_CLROBJECT_METHOD_OVERRIDE(InstancedEntity);
+
 		friend class InstanceBatch;
 		friend class InstanceBatchShader;
 		friend class InstanceBatchHW;
@@ -272,6 +275,10 @@
 
 
 	};
+
+	/** @} */
+	/** @} */
+
 }
 
 #endif
diff -r -u -w OgreMain\include\OgreInstancedGeometry.h OgreMain\include\OgreInstancedGeometry.h
--- OgreMain\include\OgreInstancedGeometry.h	2012-09-02 06:24:38.000000000 -0500
+++ OgreMain\include\OgreInstancedGeometry.h	2014-02-16 17:50:46.616868900 -0600
@@ -101,9 +101,11 @@
     @note
 		Warning: this class only works with indexed triangle lists at the moment,		do not pass it triangle strips, fans or lines / points, or unindexed geometry.
 	*/
-	class _OgreExport  InstancedGeometry : public BatchedGeometryAlloc
+	class _OgreExport  InstancedGeometry : public BatchedGeometryAlloc, public CLRObject
 	{
 	public:
+		DECLARE_INIT_CLROBJECT_METHOD_OVERRIDE(InstancedGeometry);
+
 		/** Struct holding geometry optimised per SubMesh / lod level, ready
 			for copying to instances. 
 		@remarks
@@ -259,6 +261,9 @@
 		};
 		class _OgreExport  InstancedObject : public BatchedGeometryAlloc
 		{
+			public:
+				DECLARE_CLRHANDLE;
+
 			friend class GeometryBucket;
 		public:
 			 enum TransformSpace
@@ -434,7 +439,7 @@
 		{
             friend class MaterialBucket;
 			public:
-		
+				DECLARE_INIT_CLROBJECT_METHOD_OVERRIDE(InstancedGeometry_BatchInstance);
 
 			/// list of LOD Buckets in this BatchInstance
 			typedef vector<LODBucket*>::type LODBucketList;
diff -r -u -w OgreMain\include\OgreInstanceManager.h OgreMain\include\OgreInstanceManager.h
--- OgreMain\include\OgreInstanceManager.h	2012-09-02 06:24:38.000000000 -0500
+++ OgreMain\include\OgreInstanceManager.h	2014-02-16 17:50:46.637870100 -0600
@@ -59,9 +59,11 @@
         @version
             1.0
      */
-	class _OgreExport InstanceManager : public FactoryAlloc
+	class _OgreExport InstanceManager : public FactoryAlloc, public CLRObject
 	{
 	public:
+		DECLARE_INIT_CLROBJECT_METHOD_OVERRIDE(InstanceManager);
+
 		enum InstancingTechnique
 		{
 			ShaderBased,			//Any SM 2.0+ @See InstanceBatchShader
@@ -280,6 +282,10 @@
 			return InstanceBatchIterator( it->second.begin(), it->second.end() );
 		}
 	};
+
+	/** @} */
+	/** @} */
+
 }
 
 #endif
diff -r -u -w OgreMain\include\OgreKeyFrame.h OgreMain\include\OgreKeyFrame.h
--- OgreMain\include\OgreKeyFrame.h	2012-09-02 06:24:38.000000000 -0500
+++ OgreMain\include\OgreKeyFrame.h	2014-02-16 17:50:46.617869000 -0600
@@ -52,9 +52,10 @@
         animation sequence, with the exact state of the animation being an 
         interpolation between these key frames. 
     */
-	class _OgreExport KeyFrame : public AnimationAlloc
+	class _OgreExport KeyFrame : public AnimationAlloc, public CLRObject
     {
     public:
+        DECLARE_INIT_CLROBJECT_METHOD_OVERRIDE(KeyFrame);
 
         /** Default constructor, you should not call this but use AnimationTrack::createKeyFrame instead. */
         KeyFrame(const AnimationTrack* parent, Real time);
@@ -79,6 +80,8 @@
 	class _OgreExport NumericKeyFrame : public KeyFrame
 	{
 	public:
+		DECLARE_INIT_CLROBJECT_METHOD_OVERRIDE(NumericKeyFrame);
+
 		/** Default constructor, you should not call this but use AnimationTrack::createKeyFrame instead. */
 		NumericKeyFrame(const AnimationTrack* parent, Real time);
 		~NumericKeyFrame() {}
@@ -102,6 +105,8 @@
 	class _OgreExport TransformKeyFrame : public KeyFrame
 	{
 	public:
+		DECLARE_INIT_CLROBJECT_METHOD_OVERRIDE(TransformKeyFrame);
+
 		/** Default constructor, you should not call this but use AnimationTrack::createKeyFrame instead. */
 		TransformKeyFrame(const AnimationTrack* parent, Real time);
 		~TransformKeyFrame() {}
@@ -153,6 +158,8 @@
 	class _OgreExport VertexMorphKeyFrame : public KeyFrame
 	{
 	public:
+		DECLARE_INIT_CLROBJECT_METHOD_OVERRIDE(VertexMorphKeyFrame);
+
 		/** Default constructor, you should not call this but use AnimationTrack::createKeyFrame instead. */
 		VertexMorphKeyFrame(const AnimationTrack* parent, Real time);
 		~VertexMorphKeyFrame() {}
@@ -183,6 +190,8 @@
 	class _OgreExport VertexPoseKeyFrame : public KeyFrame
 	{
 	public:
+		DECLARE_INIT_CLROBJECT_METHOD_OVERRIDE(VertexPoseKeyFrame);
+
 		/** Default constructor, you should not call this but use AnimationTrack::createKeyFrame instead. */
 		VertexPoseKeyFrame(const AnimationTrack* parent, Real time);
 		~VertexPoseKeyFrame() {}
diff -r -u -w OgreMain\include\OgreLight.h OgreMain\include\OgreLight.h
--- OgreMain\include\OgreLight.h	2012-09-02 06:24:38.000000000 -0500
+++ OgreMain\include\OgreLight.h	2014-02-16 17:50:46.617869000 -0600
@@ -72,6 +72,8 @@
     class _OgreExport Light : public MovableObject
     {
     public:
+        DECLARE_INIT_CLROBJECT_METHOD_OVERRIDE(Light);
+
         /// Temp tag used for sorting
         Real tempSquareDist;
 		/// internal method for calculating current squared distance from some world position
@@ -578,6 +580,9 @@
 	/** Factory object for creating Light instances */
 	class _OgreExport LightFactory : public MovableObjectFactory
 	{
+	public:
+		DECLARE_INIT_CLROBJECT_METHOD_OVERRIDE(LightFactory);
+
 	protected:
 		MovableObject* createInstanceImpl( const String& name, const NameValuePairList* params);
 	public:
diff -r -u -w OgreMain\include\OgreLodListener.h OgreMain\include\OgreLodListener.h
--- OgreMain\include\OgreLodListener.h	2012-09-02 06:24:38.000000000 -0500
+++ OgreMain\include\OgreLodListener.h	2014-02-16 17:50:46.617869000 -0600
@@ -114,9 +114,10 @@
             also be called.  The postqueue method is invoked at an appropriate
             time after rendering and scene changes may be safely made there.
     */
-    class _OgreExport LodListener
+    class _OgreExport LodListener : public CLRObject
     {
     public:
+        DECLARE_INIT_CLROBJECT_METHOD_OVERRIDE(LodListener);
 
         virtual ~LodListener() {}
 
diff -r -u -w OgreMain\include\OgreLodStrategy.h OgreMain\include\OgreLodStrategy.h
--- OgreMain\include\OgreLodStrategy.h	2012-09-02 06:24:38.000000000 -0500
+++ OgreMain\include\OgreLodStrategy.h	2014-02-16 17:50:46.617869000 -0600
@@ -50,8 +50,11 @@
         getIndex, sort, and isSorted.
         In addition, transformUserValue may be overridden.
     */
-	class _OgreExport LodStrategy : public LodAlloc
+	class _OgreExport LodStrategy : public LodAlloc, public CLRObject
     {
+    public:
+        DECLARE_INIT_CLROBJECT_METHOD_OVERRIDE(LodStrategy);
+
     protected:
         /** Name of this strategy. */
         String mName;
diff -r -u -w OgreMain\include\OgreLog.h OgreMain\include\OgreLog.h
--- OgreMain\include\OgreLog.h	2012-09-02 06:24:38.000000000 -0500
+++ OgreMain\include\OgreLog.h	2014-02-16 17:50:46.617869000 -0600
@@ -100,6 +100,9 @@
     */
 	class _OgreExport Log : public LogAlloc
     {
+    public:
+        DECLARE_CLRHANDLE;
+
     protected:
         std::ofstream	mLog;
         LoggingLevel	mLogLevel;
@@ -198,6 +201,9 @@
 		*/
 		class _OgrePrivate Stream
 		{
+		public:
+			DECLARE_CLRHANDLE;
+
 		protected:
 			Log* mTarget;
 			LogMessageLevel mLevel;
diff -r -u -w OgreMain\include\OgreManualObject.h OgreMain\include\OgreManualObject.h
--- OgreMain\include\OgreManualObject.h	2012-09-02 06:24:38.000000000 -0500
+++ OgreMain\include\OgreManualObject.h	2014-02-16 17:50:46.618869000 -0600
@@ -106,6 +106,8 @@
 	class _OgreExport ManualObject : public MovableObject
 	{
 	public:
+		DECLARE_INIT_CLROBJECT_METHOD_OVERRIDE(ManualObject);
+
 		ManualObject(const String& name);
 		virtual ~ManualObject();
 
@@ -399,8 +401,11 @@
 
 
 		/// Built, renderable section of geometry
-		class _OgreExport ManualObjectSection : public Renderable, public MovableAlloc
+		class _OgreExport ManualObjectSection : public Renderable, public MovableAlloc, public CLRObject
 		{
+		public:
+			DECLARE_INIT_CLROBJECT_METHOD_OVERRIDE(ManualObject_ManualObjectSection);
+
 		protected:
 			ManualObject* mParent;
 			String mMaterialName;
@@ -446,6 +451,9 @@
 		/** Nested class to allow shadows. */
 		class _OgreExport ManualObjectSectionShadowRenderable : public ShadowRenderable
 		{
+		public:
+			DECLARE_INIT_CLROBJECT_METHOD_OVERRIDE(ManualObject_ManualObjectSectionShadowRenderable);
+
 		protected:
 			ManualObject* mParent;
 			// Shared link to position buffer
@@ -551,6 +559,9 @@
 	/** Factory object for creating ManualObject instances */
 	class _OgreExport ManualObjectFactory : public MovableObjectFactory
 	{
+	public:
+		DECLARE_INIT_CLROBJECT_METHOD_OVERRIDE(ManualObjectFactory);
+
 	protected:
 		MovableObject* createInstanceImpl( const String& name, const NameValuePairList* params);
 	public:
diff -r -u -w OgreMain\include\OgreMaterial.h OgreMain\include\OgreMaterial.h
--- OgreMain\include\OgreMaterial.h	2012-09-02 06:24:38.000000000 -0500
+++ OgreMain\include\OgreMaterial.h	2014-02-16 17:50:46.618869000 -0600
@@ -87,6 +87,9 @@
     */
     class _OgreExport Material : public Resource
     {
+    public:
+        DECLARE_INIT_CLROBJECT_METHOD_OVERRIDE(Material);
+
         friend class SceneManager;
         friend class MaterialManager;
 
diff -r -u -w OgreMain\include\OgreMesh.h OgreMain\include\OgreMesh.h
--- OgreMain\include\OgreMesh.h	2012-09-02 06:24:38.000000000 -0500
+++ OgreMain\include\OgreMesh.h	2014-02-16 17:50:46.618869000 -0600
@@ -90,6 +90,9 @@
 
     class _OgreExport Mesh: public Resource, public AnimationContainer
     {
+    public:
+        DECLARE_INIT_CLROBJECT_METHOD_OVERRIDE(Mesh);
+
         friend class SubMesh;
         friend class MeshSerializerImpl;
         friend class MeshSerializerImpl_v1_4;
diff -r -u -w OgreMain\include\OgreMeshSerializer.h OgreMain\include\OgreMeshSerializer.h
--- OgreMain\include\OgreMeshSerializer.h	2012-09-02 06:24:38.000000000 -0500
+++ OgreMain\include\OgreMeshSerializer.h	2014-02-16 17:50:46.618869000 -0600
@@ -89,6 +89,8 @@
     class _OgreExport MeshSerializer : public Serializer
     {
     public:
+        DECLARE_INIT_CLROBJECT_METHOD_OVERRIDE(MeshSerializer);
+
         MeshSerializer();
         virtual ~MeshSerializer();
 
diff -r -u -w OgreMain\include\OgreMovableObject.h OgreMain\include\OgreMovableObject.h
--- OgreMain\include\OgreMovableObject.h	2012-09-02 06:24:38.000000000 -0500
+++ OgreMain\include\OgreMovableObject.h	2014-02-16 17:50:46.619869100 -0600
@@ -59,6 +59,8 @@
     class _OgreExport MovableObject : public ShadowCaster, public AnimableObject, public MovableAlloc
     {
     public:
+        DECLARE_INIT_CLROBJECT_METHOD_OVERRIDE(MovableObject);
+
         /** Listener which gets called back on MovableObject events.
         */
         class _OgreExport Listener
@@ -574,8 +576,11 @@
 		to allow all clients to produce new instances of this object, integrated
 		with the standard Ogre processing.
 	*/
-	class _OgreExport MovableObjectFactory : public MovableAlloc
+	class _OgreExport MovableObjectFactory : public MovableAlloc, public CLRObject
 	{
+	public:
+		DECLARE_INIT_CLROBJECT_METHOD_OVERRIDE(MovableObjectFactory);
+
 	protected:
 		/// Type flag, allocated if requested
 		unsigned long mTypeFlag;
diff -r -u -w OgreMain\include\OgreMovablePlane.h OgreMain\include\OgreMovablePlane.h
--- OgreMain\include\OgreMovablePlane.h	2012-09-02 06:24:38.000000000 -0500
+++ OgreMain\include\OgreMovablePlane.h	2014-02-16 17:50:46.619869100 -0600
@@ -52,6 +52,9 @@
     */
     class _OgreExport MovablePlane : public Plane, public MovableObject
     {
+    public:
+        DECLARE_INIT_CLROBJECT_METHOD_OVERRIDE(MovablePlane);
+
     protected:
         mutable Plane mDerivedPlane;
         mutable Vector3 mLastTranslate;
diff -r -u -w OgreMain\include\OgreNode.h OgreMain\include\OgreNode.h
--- OgreMain\include\OgreNode.h	2012-09-02 06:24:38.000000000 -0500
+++ OgreMain\include\OgreNode.h	2014-02-16 17:50:46.619869100 -0600
@@ -59,9 +59,11 @@
             This is an abstract class - concrete classes are based on this for specific purposes,
             e.g. SceneNode, Bone
     */
-    class _OgreExport Node : public NodeAlloc
+    class _OgreExport Node : public NodeAlloc, public CLRObject
     {
     public:
+        DECLARE_INIT_CLROBJECT_METHOD_OVERRIDE(Node);
+
         /** Enumeration denoting the spaces which a transform can be relative to.
         */
         enum TransformSpace
diff -r -u -w OgreMain\include\OgreOverlay.h OgreMain\include\OgreOverlay.h
--- OgreMain\include\OgreOverlay.h	2012-09-02 06:24:38.000000000 -0500
+++ OgreMain\include\OgreOverlay.h	2014-02-16 17:50:46.619869100 -0600
@@ -67,10 +67,12 @@
         don't want the overlay displayed in the smaller viewports. You turn this off for 
         a specific viewport by calling the Viewport::setDisplayOverlays method.
     */
-	class _OgreExport Overlay : public OverlayAlloc
+	class _OgreExport Overlay : public OverlayAlloc, public CLRObject
     {
 
     public:
+        DECLARE_INIT_CLROBJECT_METHOD_OVERRIDE(Overlay);
+
               typedef list<OverlayContainer*>::type OverlayContainerList;
     protected:
         String mName;
diff -r -u -w OgreMain\include\OgreOverlayContainer.h OgreMain\include\OgreOverlayContainer.h
--- OgreMain\include\OgreOverlayContainer.h	2012-09-02 06:24:38.000000000 -0500
+++ OgreMain\include\OgreOverlayContainer.h	2014-02-16 17:50:46.619869100 -0600
@@ -56,6 +56,8 @@
     class _OgreExport OverlayContainer : public OverlayElement
     {
     public:
+        DECLARE_INIT_CLROBJECT_METHOD_OVERRIDE(OverlayContainer);
+
         typedef map<String, OverlayElement*>::type ChildMap;
         typedef MapIterator<ChildMap> ChildIterator;
         typedef map<String, OverlayContainer*>::type ChildContainerMap;
diff -r -u -w OgreMain\include\OgreOverlayElement.h OgreMain\include\OgreOverlayElement.h
--- OgreMain\include\OgreOverlayElement.h	2012-09-02 06:24:38.000000000 -0500
+++ OgreMain\include\OgreOverlayElement.h	2014-02-16 17:50:46.620869200 -0600
@@ -106,9 +106,10 @@
     Because this class is designed to be extensible, it subclasses from StringInterface
     so its parameters can be set in a generic way.
     */
-    class _OgreExport OverlayElement : public StringInterface, public Renderable, public OverlayAlloc
+    class _OgreExport OverlayElement : public StringInterface, public Renderable, public OverlayAlloc, public CLRObject
     {
     public:
+        DECLARE_INIT_CLROBJECT_METHOD_OVERRIDE(OverlayElement);
 
     protected:
         // Command object for setting / getting parameters
diff -r -u -w OgreMain\include\OgreOverlayElementFactory.h OgreMain\include\OgreOverlayElementFactory.h
--- OgreMain\include\OgreOverlayElementFactory.h	2012-09-02 06:24:38.000000000 -0500
+++ OgreMain\include\OgreOverlayElementFactory.h	2014-02-16 17:50:46.620869200 -0600
@@ -54,9 +54,11 @@
         Each OverlayElementFactory creates a single type of OverlayElement, 
         identified by a 'type name' which must be unique.
     */
-	class _OgreExport OverlayElementFactory : public OverlayAlloc
+	class _OgreExport OverlayElementFactory : public OverlayAlloc, public CLRObject
     {
     public:
+        DECLARE_INIT_CLROBJECT_METHOD_OVERRIDE(OverlayElementFactory);
+
         /** Destroy the overlay element factory */
         virtual ~OverlayElementFactory () {}
         /** Creates a new OverlayElement instance with the name supplied. */
@@ -72,6 +74,8 @@
     class _OgreExport PanelOverlayElementFactory: public OverlayElementFactory
     {
     public:
+        DECLARE_INIT_CLROBJECT_METHOD_OVERRIDE(PanelOverlayElementFactory);
+
         /** See OverlayElementFactory */
         OverlayElement* createOverlayElement(const String& instanceName)
         {
@@ -85,6 +89,8 @@
     class _OgreExport BorderPanelOverlayElementFactory: public OverlayElementFactory
     {
     public:
+        DECLARE_INIT_CLROBJECT_METHOD_OVERRIDE(BorderPanelOverlayElementFactory);
+
         /** See OverlayElementFactory */
         OverlayElement* createOverlayElement(const String& instanceName)
         {
@@ -98,6 +104,8 @@
     class _OgreExport TextAreaOverlayElementFactory: public OverlayElementFactory
     {
     public:
+        DECLARE_INIT_CLROBJECT_METHOD_OVERRIDE(TextAreaOverlayElementFactory);
+
         /** See OverlayElementFactory */
         OverlayElement* createOverlayElement(const String& instanceName)
         {
diff -r -u -w OgreMain\include\OgrePanelOverlayElement.h OgreMain\include\OgrePanelOverlayElement.h
--- OgreMain\include\OgrePanelOverlayElement.h	2012-09-02 06:24:38.000000000 -0500
+++ OgreMain\include\OgrePanelOverlayElement.h	2014-02-16 17:50:46.620869200 -0600
@@ -58,6 +58,8 @@
     class _OgreExport PanelOverlayElement : public OverlayContainer
     {
     public:
+        DECLARE_INIT_CLROBJECT_METHOD_OVERRIDE(PanelOverlayElement);
+
         /** Constructor. */
         PanelOverlayElement(const String& name);
         virtual ~PanelOverlayElement();
diff -r -u -w OgreMain\include\OgreParticle.h OgreMain\include\OgreParticle.h
--- OgreMain\include\OgreParticle.h	2012-09-02 06:24:38.000000000 -0500
+++ OgreMain\include\OgreParticle.h	2014-02-16 17:50:46.620869200 -0600
@@ -59,6 +59,9 @@
 	/** Class representing a single particle instance. */
 	class _OgreExport Particle : public FXAlloc
     {
+    public:
+        DECLARE_CLRHANDLE;
+
     protected:
         /// Parent ParticleSystem
         ParticleSystem* mParentSystem;
diff -r -u -w OgreMain\include\OgreParticleAffector.h OgreMain\include\OgreParticleAffector.h
--- OgreMain\include\OgreParticleAffector.h	2012-09-02 06:24:38.000000000 -0500
+++ OgreMain\include\OgreParticleAffector.h	2014-02-16 17:50:46.620869200 -0600
@@ -60,8 +60,11 @@
         with literally infinite combinations of affector and affector types, and parameters within those
         types.
     */
-    class _OgreExport ParticleAffector : public StringInterface, public FXAlloc
+    class _OgreExport ParticleAffector : public StringInterface, public FXAlloc, public CLRObject
     {
+    public:
+        DECLARE_INIT_CLROBJECT_METHOD_OVERRIDE(ParticleAffector);
+
     protected:
         /// Name of the type of affector, MUST be initialised by subclasses
         String mType;
diff -r -u -w OgreMain\include\OgreParticleAffectorFactory.h OgreMain\include\OgreParticleAffectorFactory.h
--- OgreMain\include\OgreParticleAffectorFactory.h	2012-09-02 06:24:38.000000000 -0500
+++ OgreMain\include\OgreParticleAffectorFactory.h	2014-02-16 17:50:46.621869200 -0600
@@ -51,8 +51,11 @@
         a name which identifies them, examples might be 'force_vector', 'attractor', or 'fader', and these can be 
         also be used from particle system scripts.
     */
-	class _OgreExport ParticleAffectorFactory : public FXAlloc
+	class _OgreExport ParticleAffectorFactory : public FXAlloc, public CLRObject
     {
+    public:
+        DECLARE_INIT_CLROBJECT_METHOD_OVERRIDE(ParticleAffectorFactory);
+
     protected:
         vector<ParticleAffector*>::type mAffectors;
     public:
diff -r -u -w OgreMain\include\OgreParticleEmitter.h OgreMain\include\OgreParticleEmitter.h
--- OgreMain\include\OgreParticleEmitter.h	2012-09-02 06:24:38.000000000 -0500
+++ OgreMain\include\OgreParticleEmitter.h	2014-02-16 17:50:46.621869200 -0600
@@ -68,8 +68,11 @@
         with literally infinite combinations of emitter and affector types, and parameters within those
         types.
     */
-    class _OgreExport ParticleEmitter : public StringInterface, public Particle
+    class _OgreExport ParticleEmitter : public StringInterface, public Particle, public CLRObject
     {
+    public:
+        DECLARE_INIT_CLROBJECT_METHOD_OVERRIDE(ParticleEmitter);
+
     protected:
 
         // Command object for setting / getting parameters
diff -r -u -w OgreMain\include\OgreParticleEmitterFactory.h OgreMain\include\OgreParticleEmitterFactory.h
--- OgreMain\include\OgreParticleEmitterFactory.h	2012-09-02 06:24:38.000000000 -0500
+++ OgreMain\include\OgreParticleEmitterFactory.h	2014-02-16 17:50:46.621869200 -0600
@@ -52,8 +52,11 @@
         a name which identifies them, examples might be 'point', 'cone', or 'box', and these can be 
         also be used from particle system scripts.
     */
-	class _OgreExport ParticleEmitterFactory : public FXAlloc
+	class _OgreExport ParticleEmitterFactory : public FXAlloc, public CLRObject
     {
+    public:
+        DECLARE_INIT_CLROBJECT_METHOD_OVERRIDE(ParticleEmitterFactory);
+
     protected:
         vector<ParticleEmitter*>::type mEmitters;
     public:
diff -r -u -w OgreMain\include\OgreParticleSystem.h OgreMain\include\OgreParticleSystem.h
--- OgreMain\include\OgreParticleSystem.h	2012-09-02 06:24:38.000000000 -0500
+++ OgreMain\include\OgreParticleSystem.h	2014-02-16 17:50:46.621869200 -0600
@@ -66,6 +66,7 @@
     class _OgreExport ParticleSystem : public StringInterface, public MovableObject
     {
     public:
+        DECLARE_INIT_CLROBJECT_METHOD_OVERRIDE(ParticleSystem);
 
         /** Command object for quota (see ParamCommand).*/
         class _OgrePrivate CmdQuota : public ParamCommand
diff -r -u -w OgreMain\include\OgreParticleSystemManager.h OgreMain\include\OgreParticleSystemManager.h
--- OgreMain\include\OgreParticleSystemManager.h	2012-09-02 06:24:38.000000000 -0500
+++ OgreMain\include\OgreParticleSystemManager.h	2014-02-16 17:50:46.622869300 -0600
@@ -385,6 +385,9 @@
 	/** Factory object for creating ParticleSystem instances */
 	class _OgreExport ParticleSystemFactory : public MovableObjectFactory
 	{
+	public:
+		DECLARE_INIT_CLROBJECT_METHOD_OVERRIDE(ParticleSystemFactory);
+
 	protected:
 		MovableObject* createInstanceImpl(const String& name, const NameValuePairList* params);
 	public:
diff -r -u -w OgreMain\include\OgreParticleSystemRenderer.h OgreMain\include\OgreParticleSystemRenderer.h
--- OgreMain\include\OgreParticleSystemRenderer.h	2012-09-02 06:24:38.000000000 -0500
+++ OgreMain\include\OgreParticleSystemRenderer.h	2014-02-16 17:50:46.622869300 -0600
@@ -46,9 +46,11 @@
 	/** Abstract class defining the interface required to be implemented
         by classes which provide rendering capability to ParticleSystem instances.
     */
-    class _OgreExport ParticleSystemRenderer : public StringInterface, public FXAlloc
+    class _OgreExport ParticleSystemRenderer : public StringInterface, public FXAlloc, public CLRObject
     {
     public:
+        DECLARE_INIT_CLROBJECT_METHOD_OVERRIDE(ParticleSystemRenderer);
+
         /// Constructor
         ParticleSystemRenderer() {}
         /// Destructor
diff -r -u -w OgreMain\include\OgrePass.h OgreMain\include\OgrePass.h
--- OgreMain\include\OgrePass.h	2012-09-02 06:24:38.000000000 -0500
+++ OgreMain\include\OgrePass.h	2014-02-16 17:50:46.622869300 -0600
@@ -80,6 +80,8 @@
 	class _OgreExport Pass : public PassAlloc
     {
 	public:
+		DECLARE_CLRHANDLE;
+
 		/** Definition of a functor for calculating the hashcode of a Pass.
 		@remarks
 			The hashcode of a Pass is used to sort Passes for rendering, in order
diff -r -u -w OgreMain\include\OgrePatchMesh.h OgreMain\include\OgrePatchMesh.h
--- OgreMain\include\OgrePatchMesh.h	2012-09-02 06:24:38.000000000 -0500
+++ OgreMain\include\OgrePatchMesh.h	2014-02-16 17:50:46.622869300 -0600
@@ -46,6 +46,9 @@
     */
     class _OgreExport PatchMesh : public Mesh
     {
+    public:
+        DECLARE_INIT_CLROBJECT_METHOD_OVERRIDE(PatchMesh);
+
     protected:
         /// Internal surface definition
         PatchSurface mSurface;
diff -r -u -w OgreMain\include\OgrePatchSurface.h OgreMain\include\OgrePatchSurface.h
--- OgreMain\include\OgrePatchSurface.h	2012-09-02 06:24:38.000000000 -0500
+++ OgreMain\include\OgrePatchSurface.h	2014-02-16 17:50:46.623869300 -0600
@@ -52,6 +52,8 @@
 	class _OgreExport PatchSurface : public PatchAlloc
     {
     public:
+        DECLARE_CLRHANDLE;
+
         PatchSurface();
         ~PatchSurface();
 
diff -r -u -w OgreMain\include\OgrePixelCountLodStrategy.h OgreMain\include\OgrePixelCountLodStrategy.h
--- OgreMain\include\OgrePixelCountLodStrategy.h	2012-09-02 06:24:38.000000000 -0500
+++ OgreMain\include\OgrePixelCountLodStrategy.h	2014-02-16 17:50:46.623869300 -0600
@@ -45,6 +45,9 @@
 	/** Level of detail strategy based on pixel count approximation from bounding sphere projection. */
     class _OgreExport PixelCountLodStrategy : public LodStrategy, public Singleton<PixelCountLodStrategy>
     {
+    public:
+        DECLARE_INIT_CLROBJECT_METHOD_OVERRIDE(PixelCountLodStrategy);
+
     protected:
         /// @copydoc LodStrategy::getValueImpl
         virtual Real getValueImpl(const MovableObject *movableObject, const Camera *camera) const;
diff -r -u -w OgreMain\include\OgrePlaneBoundedVolume.h OgreMain\include\OgrePlaneBoundedVolume.h
--- OgreMain\include\OgrePlaneBoundedVolume.h	2012-09-02 06:24:38.000000000 -0500
+++ OgreMain\include\OgrePlaneBoundedVolume.h	2014-02-16 17:50:46.623869300 -0600
@@ -48,6 +48,8 @@
     class _OgreExport PlaneBoundedVolume
     {
     public:
+        DECLARE_CLRHANDLE;
+
         typedef vector<Plane>::type PlaneList;
         /// Publicly accessible plane list, you can modify this direct
         PlaneList planes;
diff -r -u -w OgreMain\include\OgrePose.h OgreMain\include\OgrePose.h
--- OgreMain\include\OgrePose.h	2012-09-02 06:24:38.000000000 -0500
+++ OgreMain\include\OgrePose.h	2014-02-16 17:50:46.623869300 -0600
@@ -51,9 +51,11 @@
 		Pose instances can be referred to by keyframes in VertexAnimationTrack in
 		order to animate based on blending poses together.
 	*/
-	class _OgreExport Pose : public AnimationAlloc
+	class _OgreExport Pose : public AnimationAlloc, public CLRObject
 	{
 	public:
+		DECLARE_INIT_CLROBJECT_METHOD_OVERRIDE(Pose);
+
 		/** Constructor
 			@param target The target vertexdata index (0 for shared, 1+ for 
 				dedicated at the submesh index + 1)
diff -r -u -w OgreMain\include\OgrePrerequisites.h OgreMain\include\OgrePrerequisites.h
--- OgreMain\include\OgrePrerequisites.h	2012-09-02 06:24:38.000000000 -0500
+++ OgreMain\include\OgrePrerequisites.h	2014-02-16 17:50:46.623869300 -0600
@@ -334,6 +334,9 @@
 #include "OgreStdHeaders.h"
 #include "OgreMemoryAllocatorConfig.h"
 
+#include "CLRObject.h"
+#include "CLRHandle.h"
+
 
 namespace Ogre
 {
@@ -456,9 +459,9 @@
 	#endif
 
 	#if OGRE_WCHAR_T_STRINGS
-		typedef std::basic_stringstream<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > _StringStreamBase;
+		typedef std::wstringstream _StringStreamBase;
 	#else
-		typedef std::basic_stringstream<char,std::char_traits<char>,std::allocator<char> > _StringStreamBase;
+		typedef std::stringstream _StringStreamBase;
 	#endif
 
 #endif
diff -r -u -w OgreMain\include\OgreProgressiveMesh.h OgreMain\include\OgreProgressiveMesh.h
--- OgreMain\include\OgreProgressiveMesh.h	2012-09-02 06:24:38.000000000 -0500
+++ OgreMain\include\OgreProgressiveMesh.h	2014-02-16 17:50:46.624869400 -0600
@@ -105,9 +105,11 @@
         NB the interface of this class will certainly change when compiled vertex buffers are
         supported.
     */
-	class _OgreExport ProgressiveMesh : public ProgMeshAlloc
+	class _OgreExport ProgressiveMesh : public ProgMeshAlloc, public CLRObject
     {
     public:
+        DECLARE_INIT_CLROBJECT_METHOD_OVERRIDE(ProgressiveMesh);
+
 		typedef vector<Real>::type LodValueList;
 		
 		/** The way to derive the quota of vertices which are reduced at each LOD. */
diff -r -u -w OgreMain\include\OgreRectangle2D.h OgreMain\include\OgreRectangle2D.h
--- OgreMain\include\OgreRectangle2D.h	2012-09-02 06:24:38.000000000 -0500
+++ OgreMain\include\OgreRectangle2D.h	2014-02-16 17:50:46.624869400 -0600
@@ -48,6 +48,9 @@
     */
     class _OgreExport Rectangle2D : public SimpleRenderable
     {
+    public:
+        DECLARE_INIT_CLROBJECT_METHOD_OVERRIDE(Rectangle2D);
+
     protected:
         /** Override this method to prevent parent transforms (rotation,translation,scale)
         */
diff -r -u -w OgreMain\include\OgreRenderOperation.h OgreMain\include\OgreRenderOperation.h
--- OgreMain\include\OgreRenderOperation.h	2012-09-02 06:24:38.000000000 -0500
+++ OgreMain\include\OgreRenderOperation.h	2014-02-16 17:50:46.624869400 -0600
@@ -43,6 +43,8 @@
 	/** 'New' rendering operation using vertex buffers. */
 	class _OgrePrivate RenderOperation {
 	public:
+		DECLARE_CLRHANDLE;
+
 		/// The rendering operation type to perform
 		enum OperationType {
 			/// A list of points, 1 vertex per point
diff -r -u -w OgreMain\include\OgreRenderQueue.h OgreMain\include\OgreRenderQueue.h
--- OgreMain\include\OgreRenderQueue.h	2012-09-02 06:24:38.000000000 -0500
+++ OgreMain\include\OgreRenderQueue.h	2014-02-16 17:50:46.624869400 -0600
@@ -89,221 +89,15 @@
             backgrounds and overlays, and also could be used in the future for more
             complex multipass routines like stenciling.
     */
-    class _OgreExport RenderQueue : public RenderQueueAlloc
+    class _OgreExport RenderQueue : public RenderQueueAlloc, public CLRObject
     {
     public:
+        DECLARE_INIT_CLROBJECT_METHOD_OVERRIDE(RenderQueue);
 
-		class RenderQueueGroupMap
-		{
-		public:
-			class value_type
-			{
-			public:
-				value_type(uint8 _f, RenderQueueGroup* _g) : first(_f), second(_g)
-				{
-
-				}
-				value_type() : first(0), second(0)
-				{
-
-				}
-				uint8 first;
-				RenderQueueGroup* second;
-			};
-
-			typedef uint8 key_type;
-			typedef RenderQueueGroup* mapped_type;
-			typedef value_type& reference;
-			typedef value_type* pointer;
-			typedef const value_type& const_reference;
-			typedef const value_type* const_pointer;
-			typedef vector<value_type >::type GroupVector;
-
-			class iterator
-			{
-				friend class RenderQueueGroupMap;
-			public:
-
-				iterator() : mRenderQueueGroupMap(0), mIndex(RENDER_QUEUE_MAX)
-				{
-				}
-
-				iterator(const RenderQueueGroupMap* _mRenderQueueGroupMap, uint8 _index) : mRenderQueueGroupMap(_mRenderQueueGroupMap), mIndex(_index)
-				{
-				}
-
-				const_reference operator*() const
-				{	
-					assert(this->mRenderQueueGroupMap);
-
-					return mRenderQueueGroupMap->mGroupVector[mIndex];
-				}
-
-				const_pointer operator->() const
-				{
-					assert(this->mRenderQueueGroupMap);
-
-					return &(mRenderQueueGroupMap->mGroupVector[mIndex]);
-				}
-
-				iterator& operator++()
-				{
-					assert(this->mRenderQueueGroupMap);
-
-					while(mIndex < mRenderQueueGroupMap->mMaxID)
-					{
-						++mIndex;
-						if(mRenderQueueGroupMap->mGroupVector[mIndex].second != 0)
-						{
-							break;
-						}
-					}
-					return (*this);
-				}
-
-				const iterator& operator++()const
-				{
-					assert(this->mRenderQueueGroupMap);
-
-					while(mIndex < mRenderQueueGroupMap->mMaxID)
-					{
-						++mIndex;
-						if(mRenderQueueGroupMap->mGroupVector[mIndex].second != 0)
-						{
-							break;
-						}
-					}
-					return (*this);
-				}
-
-				iterator operator++(int)
-				{
-					assert(this->mRenderQueueGroupMap);
-
-					iterator temp = *this;
-					while(mIndex < mRenderQueueGroupMap->mMaxID)
-					{
-						++mIndex;
-						if(mRenderQueueGroupMap->mGroupVector[mIndex].second != 0)
-						{
-							break;
-						}
-					}
-					return (temp);
-				}
-
-				const iterator operator++(int)const
-				{
-					assert(this->mRenderQueueGroupMap);
-
-					const_iterator temp = *this;
-					while(mIndex < mRenderQueueGroupMap->mMaxID)
-					{
-						++mIndex;
-						if(mRenderQueueGroupMap->mGroupVector[mIndex].second != 0)
-						{
-							break;
-						}
-					}
-					return (temp);
-				}
-
-				bool operator !=(const iterator& o)const
-				{
-					assert(mRenderQueueGroupMap);
-					assert(o.mRenderQueueGroupMap);
-					assert(o.mRenderQueueGroupMap == this->mRenderQueueGroupMap);
-					if( o.mIndex != this->mIndex)
-						return true;
-					return false;
-				}
-
-				bool operator ==(const iterator& o)const
-				{
-					assert(this->mRenderQueueGroupMap);
-					assert(o.mRenderQueueGroupMap);
-					assert(o.mRenderQueueGroupMap == this->mRenderQueueGroupMap);
-					if(o.mIndex == this->mIndex)
-					{
-						return true;
-					}
-					return false;
-				}
-			protected:
-				const RenderQueueGroupMap* mRenderQueueGroupMap;
-				mutable uint8 mIndex;
-			};
-
-			typedef const iterator const_iterator;
-			
-			RenderQueueGroupMap() : mMinID(RENDER_QUEUE_MAX), mMaxID(RENDER_QUEUE_MAX)
-			{
-				mGroupVector.resize(RENDER_QUEUE_MAX + 2);
-			}
-
-			void insert(value_type v)
-			{
-				mGroupVector[v.first] = v;
-				if(v.first < mMinID)
-				{
-					mMinID = v.first;
-				}
-
-				if(v.first >= mMaxID || mMaxID == RENDER_QUEUE_MAX)
-				{
-					mMaxID = v.first + 1;
-				}
-			}
-
-			iterator find(uint8 key)
-			{
-				if(mGroupVector[key].second == 0)
-				{
-					return iterator(this, mMaxID);
-				}
-				else
-				{
-					return iterator(this, key);
-				}
-			}
-
-			iterator begin()
-			{
-				return iterator(this, mMinID);
-			}
-
-			iterator end()
-			{
-				return iterator(this, mMaxID);
-			}
-
-			const_iterator begin() const
-			{
-				return iterator(this, mMinID);
-			}
-
-			const_iterator end() const
-			{
-				return iterator(this, mMaxID);
-			}
-			
-			void clear()
-			{
-				mGroupVector.reserve(RENDER_QUEUE_MAX + 2);
-				mGroupVector.clear();
-				mGroupVector.resize(RENDER_QUEUE_MAX + 2);
-				mMinID = RENDER_QUEUE_MAX;
-				mMaxID = RENDER_QUEUE_MAX;
-			}
-		protected:
-			uint8 mMinID;
-			uint8 mMaxID;
-			GroupVector mGroupVector;
-		};
-
+        typedef map< uint8, RenderQueueGroup* >::type RenderQueueGroupMap;
+        /// Iterator over queue groups
 		typedef MapIterator<RenderQueueGroupMap> QueueGroupIterator;
 		typedef ConstMapIterator<RenderQueueGroupMap> ConstQueueGroupIterator;
-
 		/** Class to listen in on items being added to the render queue. 
 		@remarks
 			Use RenderQueue::setRenderableListener to get callbacks when an item
diff -r -u -w OgreMain\include\OgreRenderQueueInvocation.h OgreMain\include\OgreRenderQueueInvocation.h
--- OgreMain\include\OgreRenderQueueInvocation.h	2012-09-02 06:24:38.000000000 -0500
+++ OgreMain\include\OgreRenderQueueInvocation.h	2014-02-16 17:50:46.624869400 -0600
@@ -63,8 +63,11 @@
 		them being rendered - for example special-case render queues and
 		render queue listeners that dictate this.
 	*/
-	class _OgreExport RenderQueueInvocation : public RenderQueueAlloc
+	class _OgreExport RenderQueueInvocation : public RenderQueueAlloc, public CLRObject
 	{
+	public:
+		DECLARE_INIT_CLROBJECT_METHOD_OVERRIDE(RenderQueueInvocation);
+
 	protected:
 		/// Target queue group
 		uint8 mRenderQueueGroupID;
@@ -170,8 +173,11 @@
 		that any invocation instances you give to this class will be deleted
 		by it when it is cleared / destroyed.
 	*/
-	class _OgreExport RenderQueueInvocationSequence : public RenderQueueAlloc
+	class _OgreExport RenderQueueInvocationSequence : public RenderQueueAlloc, public CLRObject
 	{
+	public:
+		DECLARE_INIT_CLROBJECT_METHOD_OVERRIDE(RenderQueueInvocationSequence);
+
 	protected:
 		String mName;
 		RenderQueueInvocationList mInvocations;
diff -r -u -w OgreMain\include\OgreRenderQueueSortingGrouping.h OgreMain\include\OgreRenderQueueSortingGrouping.h
--- OgreMain\include\OgreRenderQueueSortingGrouping.h	2012-09-02 06:24:38.000000000 -0500
+++ OgreMain\include\OgreRenderQueueSortingGrouping.h	2014-02-16 17:50:46.625869400 -0600
@@ -322,6 +322,9 @@
     */
     class _OgreExport RenderPriorityGroup : public RenderQueueAlloc
     {
+	public:
+		DECLARE_CLRHANDLE;
+
 	protected:
 
 		/// Parent queue group
@@ -465,6 +468,8 @@
     class _OgreExport RenderQueueGroup : public RenderQueueAlloc
     {
     public:
+        DECLARE_CLRHANDLE;
+
         typedef map<ushort, RenderPriorityGroup*, std::less<ushort> >::type PriorityMap;
         typedef MapIterator<PriorityMap> PriorityMapIterator;
         typedef ConstMapIterator<PriorityMap> ConstPriorityMapIterator;
diff -r -u -w OgreMain\include\OgreRenderSystem.h OgreMain\include\OgreRenderSystem.h
--- OgreMain\include\OgreRenderSystem.h	2012-09-02 06:24:38.000000000 -0500
+++ OgreMain\include\OgreRenderSystem.h	2014-02-16 17:50:46.625869400 -0600
@@ -121,9 +121,11 @@
 	@version
 	1.0
 	*/
-	class _OgreExport RenderSystem : public RenderSysAlloc
+	class _OgreExport RenderSystem : public RenderSysAlloc, public CLRObject
 	{
 	public:
+		DECLARE_INIT_CLROBJECT_METHOD_OVERRIDE(RenderSystem);
+
 		/** Default Constructor.
 		*/
 		RenderSystem();
diff -r -u -w OgreMain\include\OgreRenderSystemCapabilities.h OgreMain\include\OgreRenderSystemCapabilities.h
--- OgreMain\include\OgreRenderSystemCapabilities.h	2012-09-02 06:24:38.000000000 -0500
+++ OgreMain\include\OgreRenderSystemCapabilities.h	2014-02-16 17:50:46.625869400 -0600
@@ -249,6 +249,7 @@
 	{
 
 	public:
+		DECLARE_CLRHANDLE;
 
 		typedef set<String>::type ShaderProfiles;
 	private:
diff -r -u -w OgreMain\include\OgreRenderTarget.h OgreMain\include\OgreRenderTarget.h
--- OgreMain\include\OgreRenderTarget.h	2012-09-02 06:24:38.000000000 -0500
+++ OgreMain\include\OgreRenderTarget.h	2014-02-16 17:50:46.625869400 -0600
@@ -61,9 +61,11 @@
         @version
             1.0
      */
-    class _OgreExport RenderTarget : public RenderSysAlloc
+    class _OgreExport RenderTarget : public RenderSysAlloc, public CLRObject
     {
     public:
+        DECLARE_INIT_CLROBJECT_METHOD_OVERRIDE(RenderTarget);
+
         enum StatFlags
         {
             SF_NONE           = 0,
diff -r -u -w OgreMain\include\OgreRenderTexture.h OgreMain\include\OgreRenderTexture.h
--- OgreMain\include\OgreRenderTexture.h	2012-09-02 06:24:38.000000000 -0500
+++ OgreMain\include\OgreRenderTexture.h	2014-02-16 17:50:46.626869500 -0600
@@ -48,6 +48,8 @@
     class _OgreExport RenderTexture: public RenderTarget
     {
     public:
+        DECLARE_INIT_CLROBJECT_METHOD_OVERRIDE(RenderTexture);
+
         RenderTexture(HardwarePixelBuffer *buffer, size_t zoffset);
         virtual ~RenderTexture();
 
@@ -69,6 +71,8 @@
 	class _OgreExport MultiRenderTarget: public RenderTarget
 	{
 	public:
+		DECLARE_INIT_CLROBJECT_METHOD_OVERRIDE(MultiRenderTarget);
+
 		MultiRenderTarget(const String &name);
 
 		/** Bind a surface to a certain attachment point.
diff -r -u -w OgreMain\include\OgreRenderToVertexBuffer.h OgreMain\include\OgreRenderToVertexBuffer.h
--- OgreMain\include\OgreRenderToVertexBuffer.h	2012-09-02 06:24:38.000000000 -0500
+++ OgreMain\include\OgreRenderToVertexBuffer.h	2014-02-16 17:50:46.626869500 -0600
@@ -48,9 +48,11 @@
         that run on previous results of those shaders, creating stateful 
         shaders.
     */
-    class _OgreExport RenderToVertexBuffer
+    class _OgreExport RenderToVertexBuffer : public CLRObject
     {    
     public:
+        DECLARE_INIT_CLROBJECT_METHOD_OVERRIDE(RenderToVertexBuffer);
+
 		/** C'tor */
 		RenderToVertexBuffer();
 		/** D'tor */
diff -r -u -w OgreMain\include\OgreRenderWindow.h OgreMain\include\OgreRenderWindow.h
--- OgreMain\include\OgreRenderWindow.h	2012-09-02 06:24:38.000000000 -0500
+++ OgreMain\include\OgreRenderWindow.h	2014-02-16 17:50:46.626869500 -0600
@@ -63,6 +63,8 @@
     {
 
     public:
+        DECLARE_INIT_CLROBJECT_METHOD_OVERRIDE(RenderWindow);
+
         /** Default constructor.
         */
         RenderWindow();
diff -r -u -w OgreMain\include\OgreResource.h OgreMain\include\OgreResource.h
--- OgreMain\include\OgreResource.h	2012-09-02 06:24:38.000000000 -0500
+++ OgreMain\include\OgreResource.h	2014-02-16 17:50:46.626869500 -0600
@@ -74,9 +74,11 @@
 				through a generic interface.</li>
 			</ol>
     */
-	class _OgreExport Resource : public StringInterface, public ResourceAlloc
+	class _OgreExport Resource : public StringInterface, public ResourceAlloc, public CLRObject
     {
 	public:
+		DECLARE_INIT_CLROBJECT_METHOD_OVERRIDE(Resource);
+
 		OGRE_AUTO_MUTEX // public to allow external locking
 		class Listener
 		{
diff -r -u -w OgreMain\include\OgreResourceBackgroundQueue.h OgreMain\include\OgreResourceBackgroundQueue.h
--- OgreMain\include\OgreResourceBackgroundQueue.h	2012-09-02 06:24:38.000000000 -0500
+++ OgreMain\include\OgreResourceBackgroundQueue.h	2014-02-16 17:50:46.627869600 -0600
@@ -49,6 +49,8 @@
 	/** Encapsulates the result of a background queue request */
 	struct BackgroundProcessResult
 	{
+		DECLARE_CLRHANDLE;
+
 		/// Whether an error occurred
 		bool error;
 		/// Any messages from the process
diff -r -u -w OgreMain\include\OgreRibbonTrail.h OgreMain\include\OgreRibbonTrail.h
--- OgreMain\include\OgreRibbonTrail.h	2012-09-02 06:24:38.000000000 -0500
+++ OgreMain\include\OgreRibbonTrail.h	2014-02-16 17:50:46.627869600 -0600
@@ -70,6 +70,8 @@
 	class _OgreExport RibbonTrail : public BillboardChain, public Node::Listener
 	{
 	public:
+		DECLARE_INIT_CLROBJECT_METHOD_OVERRIDE(RibbonTrail);
+
 		/** Constructor (don't use directly, use factory) 
 		@param name The name to give this object
 		@param maxElements The maximum number of elements per chain
@@ -225,6 +227,9 @@
 	/** Factory object for creating RibbonTrail instances */
 	class _OgreExport RibbonTrailFactory : public MovableObjectFactory
 	{
+	public:
+		DECLARE_INIT_CLROBJECT_METHOD_OVERRIDE(RibbonTrailFactory);
+
 	protected:
 		MovableObject* createInstanceImpl( const String& name, const NameValuePairList* params);
 	public:
diff -r -u -w OgreMain\include\OgreRotationalSpline.h OgreMain\include\OgreRotationalSpline.h
--- OgreMain\include\OgreRotationalSpline.h	2012-09-02 06:24:38.000000000 -0500
+++ OgreMain\include\OgreRotationalSpline.h	2014-02-16 17:50:46.627869600 -0600
@@ -57,6 +57,8 @@
 	class _OgreExport RotationalSpline
     {
     public:
+        DECLARE_CLRHANDLE;
+
         RotationalSpline();
         ~RotationalSpline();
 
diff -r -u -w OgreMain\include\OgreSceneManager.h OgreMain\include\OgreSceneManager.h
--- OgreMain\include\OgreSceneManager.h	2012-09-02 06:24:38.000000000 -0500
+++ OgreMain\include\OgreSceneManager.h	2014-02-16 17:50:46.628869600 -0600
@@ -137,9 +137,11 @@
 		dependent on the Camera, which will always call back the SceneManager
 		which created it to render the scene. 
      */
-	class _OgreExport SceneManager : public SceneMgtAlloc
+    class _OgreExport SceneManager : public SceneMgtAlloc, public CLRObject
     {
     public:
+        DECLARE_INIT_CLROBJECT_METHOD_OVERRIDE(SceneManager);
+
         /// Query type mask which will be used for world geometry @see SceneQuery
         static uint32 WORLD_GEOMETRY_TYPE_MASK;
 		/// Query type mask which will be used for entities @see SceneQuery
@@ -3629,8 +3631,11 @@
 
 
 	/** Class which will create instances of a given SceneManager. */
-	class _OgreExport SceneManagerFactory : public SceneMgtAlloc
+	class _OgreExport SceneManagerFactory : public SceneMgtAlloc, public CLRObject
 	{
+	public:
+		DECLARE_INIT_CLROBJECT_METHOD_OVERRIDE(SceneManagerFactory);
+
 	protected:
 		mutable SceneManagerMetaData mMetaData;
 		mutable bool mMetaDataInit;
diff -r -u -w OgreMain\include\OgreSceneManagerEnumerator.h OgreMain\include\OgreSceneManagerEnumerator.h
--- OgreMain\include\OgreSceneManagerEnumerator.h	2012-09-02 06:24:38.000000000 -0500
+++ OgreMain\include\OgreSceneManagerEnumerator.h	2014-02-16 17:50:46.628869600 -0600
@@ -45,6 +45,9 @@
 	/// Factory for default scene manager
 	class _OgreExport DefaultSceneManagerFactory : public SceneManagerFactory
 	{
+	public:
+		DECLARE_INIT_CLROBJECT_METHOD_OVERRIDE(DefaultSceneManagerFactory);
+
 	protected:
 		void initMetaData(void) const;
 	public:
diff -r -u -w OgreMain\include\OgreSceneNode.h OgreMain\include\OgreSceneNode.h
--- OgreMain\include\OgreSceneNode.h	2012-09-02 06:24:38.000000000 -0500
+++ OgreMain\include\OgreSceneNode.h	2014-02-16 17:50:46.628869600 -0600
@@ -57,6 +57,8 @@
     class _OgreExport SceneNode : public Node
     {
     public:
+        DECLARE_INIT_CLROBJECT_METHOD_OVERRIDE(SceneNode);
+
         typedef HashMap<String, MovableObject*> ObjectMap;
         typedef MapIterator<ObjectMap> ObjectIterator;
 		typedef ConstMapIterator<ObjectMap> ConstObjectIterator;
diff -r -u -w OgreMain\include\OgreSceneQuery.h OgreMain\include\OgreSceneQuery.h
--- OgreMain\include\OgreSceneQuery.h	2012-09-02 06:24:38.000000000 -0500
+++ OgreMain\include\OgreSceneQuery.h	2014-02-16 17:50:46.628869600 -0600
@@ -70,9 +70,11 @@
         using the SceneManager interfaces for the type of query required, e.g.
         SceneManager::createSphereSceneQuery.
     */
-	class _OgreExport SceneQuery : public SceneMgtAlloc
+	class _OgreExport SceneQuery : public SceneMgtAlloc, public CLRObject
     {
     public:
+        DECLARE_INIT_CLROBJECT_METHOD_OVERRIDE(SceneQuery);
+
         /** This type can be used by collaborating applications & SceneManagers to 
             agree on the type of world geometry to be returned from queries. Not all
             these types will be supported by all SceneManagers; once the application
@@ -222,6 +224,9 @@
     class _OgreExport RegionSceneQuery
         : public SceneQuery, public SceneQueryListener
     {
+    public:
+        DECLARE_INIT_CLROBJECT_METHOD_OVERRIDE(RegionSceneQuery);
+
     protected:
         SceneQueryResult* mLastResult;
     public:
@@ -268,6 +273,9 @@
     /** Specialises the SceneQuery class for querying within an axis aligned box. */
     class _OgreExport AxisAlignedBoxSceneQuery : public RegionSceneQuery
     {
+    public:
+        DECLARE_INIT_CLROBJECT_METHOD_OVERRIDE(AxisAlignedBoxSceneQuery);
+
     protected:
         AxisAlignedBox mAABB;
     public:
@@ -285,6 +293,9 @@
     /** Specialises the SceneQuery class for querying within a sphere. */
     class _OgreExport SphereSceneQuery : public RegionSceneQuery
     {
+    public:
+        DECLARE_INIT_CLROBJECT_METHOD_OVERRIDE(SphereSceneQuery);
+
     protected:
         Sphere mSphere;
     public:
@@ -302,6 +313,9 @@
     */
     class _OgreExport PlaneBoundedVolumeListSceneQuery : public RegionSceneQuery
     {
+    public:
+        DECLARE_INIT_CLROBJECT_METHOD_OVERRIDE(PlaneBoundedVolumeListSceneQuery);
+
     protected:
         PlaneBoundedVolumeList mVolumes;
     public:
@@ -374,6 +388,9 @@
     /** Specialises the SceneQuery class for querying along a ray. */
     class _OgreExport RaySceneQuery : public SceneQuery, public RaySceneQueryListener
     {
+    public:
+        DECLARE_INIT_CLROBJECT_METHOD_OVERRIDE(RaySceneQuery);
+
     protected:
         Ray mRay;
         bool mSortByDistance;
@@ -511,6 +528,9 @@
     class _OgreExport IntersectionSceneQuery
         : public SceneQuery, public IntersectionSceneQueryListener 
     {
+    public:
+        DECLARE_INIT_CLROBJECT_METHOD_OVERRIDE(IntersectionSceneQuery);
+
     protected:
         IntersectionSceneQueryResult* mLastResult;
     public:
diff -r -u -w OgreMain\include\OgreSerializer.h OgreMain\include\OgreSerializer.h
--- OgreMain\include\OgreSerializer.h	2012-09-02 06:24:38.000000000 -0500
+++ OgreMain\include\OgreSerializer.h	2014-02-16 17:50:46.629869700 -0600
@@ -46,9 +46,11 @@
         This class provides a number of useful methods for exporting / importing data
         from stream-oriented binary files (e.g. .mesh and .skeleton).
     */
-	class _OgreExport Serializer : public SerializerAlloc
+	class _OgreExport Serializer : public SerializerAlloc, public CLRObject
     {
     public:
+        DECLARE_INIT_CLROBJECT_METHOD_OVERRIDE(Serializer);
+
         Serializer();
         virtual ~Serializer();
 
diff -r -u -w OgreMain\include\OgreShadowCameraSetup.h OgreMain\include\OgreShadowCameraSetup.h
--- OgreMain\include\OgreShadowCameraSetup.h	2012-09-02 06:24:38.000000000 -0500
+++ OgreMain\include\OgreShadowCameraSetup.h	2014-02-16 17:50:46.629869700 -0600
@@ -65,9 +65,11 @@
 		degrees of freedom.  This class is meant to allow custom methods for 
 		handling optimization.
     */
-	class _OgreExport ShadowCameraSetup : public ShadowDataAlloc
+	class _OgreExport ShadowCameraSetup : public ShadowDataAlloc, public CLRObject
 	{
 	public:
+		DECLARE_INIT_CLROBJECT_METHOD_OVERRIDE(ShadowCameraSetup);
+
 		/// Function to implement -- must set the shadow camera properties
 		virtual void getShadowCamera (const SceneManager *sm, const Camera *cam, 
 									  const Viewport *vp, const Light *light, Camera *texCam, size_t iteration) const = 0;
@@ -86,6 +88,8 @@
 	class _OgreExport DefaultShadowCameraSetup : public ShadowCameraSetup
 	{
 	public:
+		DECLARE_INIT_CLROBJECT_METHOD_OVERRIDE(DefaultShadowCameraSetup);
+
 		/// Default constructor
 		DefaultShadowCameraSetup();
 		/// Destructor
diff -r -u -w OgreMain\include\OgreShadowCameraSetupFocused.h OgreMain\include\OgreShadowCameraSetupFocused.h
--- OgreMain\include\OgreShadowCameraSetupFocused.h	2012-09-02 06:24:38.000000000 -0500
+++ OgreMain\include\OgreShadowCameraSetupFocused.h	2014-02-16 17:50:46.629869700 -0600
@@ -56,6 +56,9 @@
 	*/
 	class _OgreExport FocusedShadowCameraSetup : public ShadowCameraSetup
 	{
+	public:
+		DECLARE_INIT_CLROBJECT_METHOD_OVERRIDE(FocusedShadowCameraSetup);
+
 	protected:
 		/** Transform to or from light space as defined by Wimmer et al.
 		@remarks
diff -r -u -w OgreMain\include\OgreShadowCameraSetupLiSPSM.h OgreMain\include\OgreShadowCameraSetupLiSPSM.h
--- OgreMain\include\OgreShadowCameraSetupLiSPSM.h	2012-09-02 06:24:38.000000000 -0500
+++ OgreMain\include\OgreShadowCameraSetupLiSPSM.h	2014-02-16 17:50:46.629869700 -0600
@@ -97,6 +97,9 @@
 	*/
 	class _OgreExport LiSPSMShadowCameraSetup : public FocusedShadowCameraSetup
 	{
+	public:
+		DECLARE_INIT_CLROBJECT_METHOD_OVERRIDE(LiSPSMShadowCameraSetup);
+
 	protected:
 		/// Warp factor adjustment
 		Real mOptAdjustFactor;
diff -r -u -w OgreMain\include\OgreShadowCameraSetupPlaneOptimal.h OgreMain\include\OgreShadowCameraSetupPlaneOptimal.h
--- OgreMain\include\OgreShadowCameraSetupPlaneOptimal.h	2012-09-02 06:24:38.000000000 -0500
+++ OgreMain\include\OgreShadowCameraSetupPlaneOptimal.h	2014-02-16 17:50:46.629869700 -0600
@@ -60,6 +60,9 @@
     */
 	class _OgreExport PlaneOptimalShadowCameraSetup : public ShadowCameraSetup
 	{
+	public:
+		DECLARE_INIT_CLROBJECT_METHOD_OVERRIDE(PlaneOptimalShadowCameraSetup);
+
 	private:
 		MovablePlane* mPlane;	///< pointer to plane of interest
 	private:
diff -r -u -w OgreMain\include\OgreShadowCaster.h OgreMain\include\OgreShadowCaster.h
--- OgreMain\include\OgreShadowCaster.h	2012-09-02 06:24:38.000000000 -0500
+++ OgreMain\include\OgreShadowCaster.h	2014-02-16 17:50:46.630869700 -0600
@@ -49,8 +49,11 @@
         vertex buffers (not necessarily one buffer, but the positions for the entire geometry 
         should come from one buffer if possible)
     */
-    class _OgreExport ShadowRenderable : public Renderable, public ShadowDataAlloc
+    class _OgreExport ShadowRenderable : public Renderable, public ShadowDataAlloc, public CLRObject
     {
+    public:
+        DECLARE_INIT_CLROBJECT_METHOD_OVERRIDE(ShadowRenderable);
+
     protected:
         MaterialPtr mMaterial;
         RenderOperation mRenderOp;
@@ -113,9 +116,11 @@
 
     /** This class defines the interface that must be implemented by shadow casters.
     */
-    class _OgreExport ShadowCaster
+    class _OgreExport ShadowCaster : public CLRObject
     {
     public:
+        DECLARE_INIT_CLROBJECT_METHOD_OVERRIDE(ShadowCaster);
+
         virtual ~ShadowCaster() { }
         /** Returns whether or not this object currently casts a shadow. */
         virtual bool getCastShadows(void) const = 0;
diff -r -u -w OgreMain\include\OgreSimpleRenderable.h OgreMain\include\OgreSimpleRenderable.h
--- OgreMain\include\OgreSimpleRenderable.h	2012-09-02 06:24:38.000000000 -0500
+++ OgreMain\include\OgreSimpleRenderable.h	2014-02-16 17:50:46.630869700 -0600
@@ -48,6 +48,9 @@
 	*/
 	class _OgreExport SimpleRenderable : public MovableObject, public Renderable
     {
+    public:
+        DECLARE_INIT_CLROBJECT_METHOD_OVERRIDE(SimpleRenderable);
+
     protected:
         RenderOperation mRenderOp;
 
diff -r -u -w OgreMain\include\OgreSimpleSpline.h OgreMain\include\OgreSimpleSpline.h
--- OgreMain\include\OgreSimpleSpline.h	2012-09-02 06:24:38.000000000 -0500
+++ OgreMain\include\OgreSimpleSpline.h	2014-02-16 17:50:46.630869700 -0600
@@ -56,6 +56,8 @@
 	class _OgreExport SimpleSpline
     {
     public:
+        DECLARE_CLRHANDLE;
+
         SimpleSpline();
         ~SimpleSpline();
 
diff -r -u -w OgreMain\include\OgreSkeleton.h OgreMain\include\OgreSkeleton.h
--- OgreMain\include\OgreSkeleton.h	2012-09-02 06:24:38.000000000 -0500
+++ OgreMain\include\OgreSkeleton.h	2014-02-16 17:50:46.630869700 -0600
@@ -85,6 +85,9 @@
     */
     class _OgreExport Skeleton : public Resource, public AnimationContainer
     {
+    public:
+        DECLARE_INIT_CLROBJECT_METHOD_OVERRIDE(Skeleton);
+
 		friend class SkeletonInstance;
 	protected:
 		/// Internal constructor for use by SkeletonInstance only
diff -r -u -w OgreMain\include\OgreSkeletonInstance.h OgreMain\include\OgreSkeletonInstance.h
--- OgreMain\include\OgreSkeletonInstance.h	2012-09-02 06:24:38.000000000 -0500
+++ OgreMain\include\OgreSkeletonInstance.h	2014-02-16 17:50:46.630869700 -0600
@@ -52,6 +52,8 @@
     class _OgreExport SkeletonInstance : public Skeleton
     {
     public:
+        DECLARE_INIT_CLROBJECT_METHOD_OVERRIDE(SkeletonInstance);
+
         /** Constructor, don't call directly, this will be created automatically
         when you create an Entity based on a skeletally animated Mesh.
         */
diff -r -u -w OgreMain\include\OgreSkeletonSerializer.h OgreMain\include\OgreSkeletonSerializer.h
--- OgreMain\include\OgreSkeletonSerializer.h	2012-09-02 06:24:38.000000000 -0500
+++ OgreMain\include\OgreSkeletonSerializer.h	2014-02-16 17:50:46.631869800 -0600
@@ -67,8 +67,9 @@
     */
     class _OgreExport SkeletonSerializer : public Serializer
     {
-		
 	public:
+        DECLARE_INIT_CLROBJECT_METHOD_OVERRIDE(SkeletonSerializer);
+
         SkeletonSerializer();
         virtual ~SkeletonSerializer();
 
diff -r -u -w OgreMain\include\OgreStaticGeometry.h OgreMain\include\OgreStaticGeometry.h
--- OgreMain\include\OgreStaticGeometry.h	2012-09-02 06:24:38.000000000 -0500
+++ OgreMain\include\OgreStaticGeometry.h	2014-02-16 17:50:46.631869800 -0600
@@ -117,9 +117,11 @@
 		Warning: this class only works with indexed triangle lists at the moment,
 		do not pass it triangle strips, fans or lines / points, or unindexed geometry.
 	*/
-	class _OgreExport StaticGeometry : public BatchedGeometryAlloc
+	class _OgreExport StaticGeometry : public BatchedGeometryAlloc, public CLRObject
 	{
 	public:
+		DECLARE_INIT_CLROBJECT_METHOD_OVERRIDE(StaticGeometry);
+
 		/** Struct holding geometry optimised per SubMesh / lod level, ready
 			for copying to instances. 
 		@remarks
@@ -254,6 +256,8 @@
 		class _OgreExport MaterialBucket : public BatchedGeometryAlloc
 		{
 		public:
+			DECLARE_CLRHANDLE;
+
 			/// list of Geometry Buckets in this region
 			typedef vector<GeometryBucket*>::type GeometryBucketList;
 		protected:
@@ -307,6 +311,8 @@
 		class _OgreExport LODBucket : public BatchedGeometryAlloc
 		{
 		public:
+			DECLARE_CLRHANDLE;
+
 			/// Lookup of Material Buckets in this region
 			typedef map<String, MaterialBucket*>::type MaterialBucketMap;
 		protected:
@@ -390,6 +396,9 @@
 		*/
 		class _OgreExport Region : public MovableObject
 		{
+		public:
+			DECLARE_INIT_CLROBJECT_METHOD_OVERRIDE(StaticGeometry_Region);
+
             friend class MaterialBucket;
             friend class GeometryBucket;
 		public:
diff -r -u -w OgreMain\include\OgreStreamSerialiser.h OgreMain\include\OgreStreamSerialiser.h
--- OgreMain\include\OgreStreamSerialiser.h	2012-09-02 06:24:38.000000000 -0500
+++ OgreMain\include\OgreStreamSerialiser.h	2014-02-16 17:50:46.631869800 -0600
@@ -63,9 +63,11 @@
 		The 'Chunk data' section will contain chunk-specific data, which may include
 		other nested chunks.
 	*/
-	class _OgreExport StreamSerialiser : public StreamAlloc
+	class _OgreExport StreamSerialiser : public StreamAlloc, public CLRObject
 	{
 	public:
+		DECLARE_INIT_CLROBJECT_METHOD_OVERRIDE(StreamSerialiser);
+
 		/// The endianness of files
 		enum Endian
 		{
diff -r -u -w OgreMain\include\OgreSubEntity.h OgreMain\include\OgreSubEntity.h
--- OgreMain\include\OgreSubEntity.h	2012-09-02 06:24:38.000000000 -0500
+++ OgreMain\include\OgreSubEntity.h	2014-02-16 17:50:46.631869800 -0600
@@ -59,8 +59,11 @@
             the same time as their parent Entity by the SceneManager method
             createEntity.
     */
-    class _OgreExport SubEntity: public Renderable, public SubEntityAlloc
+    class _OgreExport SubEntity: public Renderable, public SubEntityAlloc, public CLRObject
     {
+    public:
+        DECLARE_INIT_CLROBJECT_METHOD_OVERRIDE(SubEntity);
+
         // Note no virtual functions for efficiency
         friend class Entity;
         friend class SceneManager;
diff -r -u -w OgreMain\include\OgreSubMesh.h OgreMain\include\OgreSubMesh.h
--- OgreMain\include\OgreSubMesh.h	2012-09-02 06:24:38.000000000 -0500
+++ OgreMain\include\OgreSubMesh.h	2014-02-16 17:50:46.631869800 -0600
@@ -60,6 +60,9 @@
     */
 	class _OgreExport SubMesh : public SubMeshAlloc
     {
+    public:
+        DECLARE_CLRHANDLE;
+
         friend class Mesh;
         friend class MeshSerializerImpl;
         friend class MeshSerializerImpl_v1_2;
@@ -131,7 +134,8 @@
                 If this array is empty, submesh sorting is done like in older versions -
                 by comparing the positions of the owning entity.
          */
-        vector<Vector3>::type extremityPoints;
+        typedef vector<Vector3>::type PointList;
+        PointList extremityPoints;
 
         /// Reference to parent Mesh (not a smart pointer so child does not keep parent alive).
         Mesh* parent;
diff -r -u -w OgreMain\include\OgreTagPoint.h OgreMain\include\OgreTagPoint.h
--- OgreMain\include\OgreTagPoint.h	2012-09-02 06:24:38.000000000 -0500
+++ OgreMain\include\OgreTagPoint.h	2014-02-16 17:50:46.632869800 -0600
@@ -61,6 +61,8 @@
 	{
 
 	public:
+		DECLARE_INIT_CLROBJECT_METHOD_OVERRIDE(TagPoint);
+
 		TagPoint(unsigned short handle, Skeleton* creator);
 		virtual ~TagPoint();
 
diff -r -u -w OgreMain\include\OgreTechnique.h OgreMain\include\OgreTechnique.h
--- OgreMain\include\OgreTechnique.h	2012-09-02 06:24:38.000000000 -0500
+++ OgreMain\include\OgreTechnique.h	2014-02-16 17:50:46.632869800 -0600
@@ -52,6 +52,9 @@
     */
 	class _OgreExport Technique : public TechniqueAlloc
     {
+    public:
+        DECLARE_CLRHANDLE;
+
     protected:
         // illumination pass state type
         enum IlluminationPassesState
@@ -121,6 +124,8 @@
 		/// Rule controlling whether technique is deemed supported based on GPU vendor
 		struct GPUVendorRule
 		{
+			DECLARE_CLRHANDLE;
+
 			GPUVendor vendor;
 			IncludeOrExclude includeOrExclude;
 			GPUVendorRule()
@@ -131,6 +136,8 @@
 		/// Rule controlling whether technique is deemed supported based on GPU device name
 		struct GPUDeviceNameRule
 		{
+			DECLARE_CLRHANDLE;
+
 			String devicePattern;
 			IncludeOrExclude includeOrExclude;
 			bool caseSensitive;
diff -r -u -w OgreMain\include\OgreTextAreaOverlayElement.h OgreMain\include\OgreTextAreaOverlayElement.h
--- OgreMain\include\OgreTextAreaOverlayElement.h	2012-09-02 06:24:38.000000000 -0500
+++ OgreMain\include\OgreTextAreaOverlayElement.h	2014-02-16 17:50:46.632869800 -0600
@@ -43,6 +43,8 @@
     class _OgreExport TextAreaOverlayElement : public OverlayElement
     {
     public:
+        DECLARE_INIT_CLROBJECT_METHOD_OVERRIDE(TextAreaOverlayElement);
+
         enum Alignment
         {
             Left,
diff -r -u -w OgreMain\include\OgreTexture.h OgreMain\include\OgreTexture.h
--- OgreMain\include\OgreTexture.h	2012-09-02 06:24:38.000000000 -0500
+++ OgreMain\include\OgreTexture.h	2014-02-16 17:50:46.632869800 -0600
@@ -103,6 +103,8 @@
     class _OgreExport Texture : public Resource
     {
     public:
+        DECLARE_INIT_CLROBJECT_METHOD_OVERRIDE(Texture);
+
         Texture(ResourceManager* creator, const String& name, ResourceHandle handle,
             const String& group, bool isManual = false, ManualResourceLoader* loader = 0);
 
diff -r -u -w OgreMain\include\OgreTextureUnitState.h OgreMain\include\OgreTextureUnitState.h
--- OgreMain\include\OgreTextureUnitState.h	2012-09-02 06:24:38.000000000 -0500
+++ OgreMain\include\OgreTextureUnitState.h	2014-02-16 17:50:46.633869900 -0600
@@ -62,6 +62,9 @@
     {
         friend class RenderSystem;
     public:
+        // DECLARE_CLRHANDLE has been moved last because TextureUnitState uses memcpy to copy its members
+        // at the copy assignment operator and we don't want the CLRHandle to get copied..
+
         /** Definition of the broad types of texture effect you can apply to a texture unit.
         @note
             Note that these have no effect when using the programmable pipeline, since their
@@ -1226,6 +1229,11 @@
 		/// The data that references the compositor
 		String mCompositorRefName;
 		String mCompositorRefTexName;
+		
+		public:
+			DECLARE_CLRHANDLE;
+
+		protected:
         //-----------------------------------------------------------------------------
 
         //-----------------------------------------------------------------------------
diff -r -u -w OgreMain\include\OgreUnifiedHighLevelGpuProgram.h OgreMain\include\OgreUnifiedHighLevelGpuProgram.h
--- OgreMain\include\OgreUnifiedHighLevelGpuProgram.h	2012-09-02 06:24:38.000000000 -0500
+++ OgreMain\include\OgreUnifiedHighLevelGpuProgram.h	2014-02-16 17:50:46.633869900 -0600
@@ -60,6 +60,8 @@
 	class _OgreExport UnifiedHighLevelGpuProgram : public HighLevelGpuProgram
 	{
 	public:
+		DECLARE_INIT_CLROBJECT_METHOD_OVERRIDE(UnifiedHighLevelGpuProgram);
+
 		/// Command object for setting delegate (can set more than once)
 		class CmdDelegate : public ParamCommand
 		{
diff -r -u -w OgreMain\include\OgreUserObjectBindings.h OgreMain\include\OgreUserObjectBindings.h
--- OgreMain\include\OgreUserObjectBindings.h	2012-09-02 06:24:38.000000000 -0500
+++ OgreMain\include\OgreUserObjectBindings.h	2014-02-16 17:50:46.633869900 -0600
@@ -45,9 +45,11 @@
 	Any instance of Ogre class that will derive from this class could be associated with custom 
 	application object using this class interface.
 	*/
-	class _OgreExport UserObjectBindings : public GeneralAllocatedObject
+	class _OgreExport UserObjectBindings : public GeneralAllocatedObject, public CLRObject
 	{
 	public:	
+		DECLARE_INIT_CLROBJECT_METHOD_OVERRIDE(UserObjectBindings);
+
 		/** Class constructor. */
 		UserObjectBindings();
 
diff -r -u -w OgreMain\include\OgreVertexIndexData.h OgreMain\include\OgreVertexIndexData.h
--- OgreMain\include\OgreVertexIndexData.h	2012-09-02 06:24:38.000000000 -0500
+++ OgreMain\include\OgreVertexIndexData.h	2014-02-16 17:50:46.633869900 -0600
@@ -47,6 +47,9 @@
 	/** Summary class collecting together vertex source information. */
 	class _OgreExport VertexData : public VertexDataAlloc
 	{
+	public:
+		DECLARE_CLRHANDLE;
+
     private:
         /// Protected copy constructor, to prevent misuse
         VertexData(const VertexData& rhs); /* do nothing, should not use */
@@ -240,6 +243,9 @@
 	/** Summary class collecting together index data source information. */
 	class _OgreExport IndexData : public IndexDataAlloc
 	{
+	public:
+		DECLARE_CLRHANDLE;
+
     protected:
         /// Protected copy constructor, to prevent misuse
         IndexData(const IndexData& rhs); /* do nothing, should not use */
diff -r -u -w OgreMain\include\OgreViewport.h OgreMain\include\OgreViewport.h
--- OgreMain\include\OgreViewport.h	2012-09-02 06:24:38.000000000 -0500
+++ OgreMain\include\OgreViewport.h	2014-02-16 17:50:46.634870000 -0600
@@ -53,9 +53,11 @@
             viewport on a single render target and they overlap, one must
             obscure the other in some predetermined way.
     */
-	class _OgreExport Viewport : public ViewportAlloc
+	class _OgreExport Viewport : public ViewportAlloc, public CLRObject
     {
     public:
+        DECLARE_INIT_CLROBJECT_METHOD_OVERRIDE(Viewport);
+
 		/** Listener interface so you can be notified of Viewport changes. */
 		class _OgreExport Listener
 		{
diff -r -u -w OgreMain\include\OgreWireBoundingBox.h OgreMain\include\OgreWireBoundingBox.h
--- OgreMain\include\OgreWireBoundingBox.h	2012-09-02 06:24:38.000000000 -0500
+++ OgreMain\include\OgreWireBoundingBox.h	2014-02-16 17:50:46.634870000 -0600
@@ -47,6 +47,9 @@
     */
 	class _OgreExport WireBoundingBox : public SimpleRenderable
 	{
+	public:
+		DECLARE_INIT_CLROBJECT_METHOD_OVERRIDE(WireBoundingBox);
+
     protected:
         /** Override this method to prevent parent transforms (rotation,translation,scale)
         */
diff -r -u -w OgreMain\include\OgreWorkQueue.h OgreMain\include\OgreWorkQueue.h
--- OgreMain\include\OgreWorkQueue.h	2012-09-02 06:24:38.000000000 -0500
+++ OgreMain\include\OgreWorkQueue.h	2014-02-16 17:50:46.634870000 -0600
@@ -66,7 +66,7 @@
 		in their own subsystems. We also provide a default implementation in the
 		form of DefaultWorkQueue.
 	*/
-	class _OgreExport WorkQueue : public UtilityAlloc
+	class _OgreExport WorkQueue : public UtilityAlloc, public CLRObject
 	{
 	protected:
 		typedef std::map<String, uint16> ChannelMap;
@@ -74,6 +74,8 @@
 		uint16 mNextChannel;
 		OGRE_MUTEX(mChannelMapMutex)
 	public:
+		DECLARE_INIT_CLROBJECT_METHOD_OVERRIDE(WorkQueue);
+
 		/// Numeric identifier for a request
 		typedef unsigned long long int RequestID;
 
diff -r -u -w OgreMain\include\OgreZip.h OgreMain\include\OgreZip.h
--- OgreMain\include\OgreZip.h	2012-09-02 06:24:38.000000000 -0500
+++ OgreMain\include\OgreZip.h	2014-02-16 17:50:46.634870000 -0600
@@ -54,6 +54,9 @@
     */
     class _OgreExport ZipArchive : public Archive 
     {
+    public:
+        DECLARE_INIT_CLROBJECT_METHOD_OVERRIDE(ZipArchive);
+
     protected:
         /// Handle to root zip file
         ZZIP_DIR* mZzipDir;
diff -r -u -w OgreMain\src\OgreException.cpp OgreMain\src\OgreException.cpp
--- OgreMain\src\OgreException.cpp	2012-09-02 06:24:38.000000000 -0500
+++ OgreMain\src\OgreException.cpp	2014-02-16 17:50:46.702873800 -0600
@@ -37,12 +37,28 @@
 
 namespace Ogre {
 
+    //Additions for Mogre
+    Exception LastExceptionThrown(-1, "", "");
+
+    Exception* Exception::getLastException(void) throw()
+    {
+        if (LastExceptionThrown.getNumber() == -1)
+            return 0;
+        return &LastExceptionThrown;
+    }
+
+    void Exception::clearLastException() throw()
+    {
+        LastExceptionThrown = Exception(-1, "", "");
+    }
+
     Exception::Exception(int num, const String& desc, const String& src) :
         line( 0 ),
         number( num ),
         description( desc ),
         source( src )
     {
+        LastExceptionThrown = *this;
         // Log this error - not any more, allow catchers to do it
         //LogManager::getSingleton().logMessage(this->getFullDescription());
     }
@@ -56,6 +72,7 @@
         source( src ),
         file( fil )
     {
+        LastExceptionThrown = *this;
         // Log this error, mask it from debug though since it may be caught and ignored
         if(LogManager::getSingletonPtr())
 		{
@@ -108,9 +125,9 @@
 		return fullDesc;
     }
 
-    int Exception::getNumber(void) const throw()
+    Exception::ExceptionCodes Exception::getNumber(void) const throw()
     {
-        return number;
+        return (Exception::ExceptionCodes)number;
     }
 
 }
diff -r -u -w OgreMain\src\WIN32\OgreConfigDialog.cpp OgreMain\src\WIN32\OgreConfigDialog.cpp
--- OgreMain\src\WIN32\OgreConfigDialog.cpp	2012-09-02 06:24:38.000000000 -0500
+++ OgreMain\src\WIN32\OgreConfigDialog.cpp	2014-02-16 17:50:47.078895400 -0600
@@ -46,7 +46,7 @@
 		mHInstance = GetModuleHandle( NULL );
 #else
 #  if OGRE_DEBUG_MODE == 1
-        mHInstance = GetModuleHandle("OgreMain_d.dll");
+        mHInstance = GetModuleHandle("OgreMain.dll");
 #  else
         mHInstance = GetModuleHandle("OgreMain.dll");
 #  endif
diff -r -u -w OgreMain\src\WIN32\OgreErrorDialog.cpp OgreMain\src\WIN32\OgreErrorDialog.cpp
--- OgreMain\src\WIN32\OgreErrorDialog.cpp	2012-09-02 06:24:38.000000000 -0500
+++ OgreMain\src\WIN32\OgreErrorDialog.cpp	2014-02-16 17:50:47.078895400 -0600
@@ -41,7 +41,7 @@
 		mHInstance = GetModuleHandle( NULL );
 #else
 #  if OGRE_DEBUG_MODE == 1
-        mHInstance = GetModuleHandle("OgreMain_d.dll");
+        mHInstance = GetModuleHandle("OgreMain.dll");
 #  else
         mHInstance = GetModuleHandle("OgreMain.dll");
 #  endif
 diff -r -u -w RenderSystems\Direct3D9\src\OgreD3D9Plugin.cpp RenderSystems\Direct3D9\src\OgreD3D9Plugin.cpp
--- RenderSystems\Direct3D9\src\OgreD3D9Plugin.cpp	2012-09-02 06:24:38.000000000 -0500
+++ RenderSystems\Direct3D9\src\OgreD3D9Plugin.cpp	2014-02-16 17:50:47.161900100 -0600
@@ -68,7 +68,7 @@
 		HINSTANCE hInst = GetModuleHandle( NULL );
 #else
 #  if OGRE_DEBUG_MODE == 1
-		HINSTANCE hInst = GetModuleHandle( "RenderSystem_Direct3D9_d.dll" );
+		HINSTANCE hInst = GetModuleHandle( "RenderSystem_Direct3D9.dll" );
 #  else
 		HINSTANCE hInst = GetModuleHandle( "RenderSystem_Direct3D9.dll" );
 #  endif
diff -r -u -w RenderSystems\GL\src\OgreWin32GLSupport.cpp RenderSystems\GL\src\OgreWin32GLSupport.cpp
--- RenderSystems\GL\src\OgreWin32GLSupport.cpp	2012-09-02 06:24:38.000000000 -0500
+++ RenderSystems\GL\src\OgreWin32GLSupport.cpp	2014-02-16 17:50:47.174900800 -0600
@@ -495,7 +495,7 @@
 		HINSTANCE hinst = GetModuleHandle( NULL );
 #else
 #  if OGRE_DEBUG_MODE == 1
-		HINSTANCE hinst = GetModuleHandle("RenderSystem_GL_d.dll");
+		HINSTANCE hinst = GetModuleHandle("RenderSystem_GL.dll");
 #  else
 		HINSTANCE hinst = GetModuleHandle("RenderSystem_GL.dll");
 #  endif
diff -r -u -w RenderSystems\GL\src\OgreWin32Window.cpp RenderSystems\GL\src\OgreWin32Window.cpp
--- RenderSystems\GL\src\OgreWin32Window.cpp	2012-09-02 06:24:38.000000000 -0500
+++ RenderSystems\GL\src\OgreWin32Window.cpp	2014-02-16 17:50:47.174900800 -0600
@@ -84,7 +84,7 @@
 		HINSTANCE hInst = GetModuleHandle( NULL );
 #else
 #  if OGRE_DEBUG_MODE == 1
-		HINSTANCE hInst = GetModuleHandle("RenderSystem_GL_d.dll");
+		HINSTANCE hInst = GetModuleHandle("RenderSystem_GL.dll");
 #  else
 		HINSTANCE hInst = GetModuleHandle("RenderSystem_GL.dll");
 #  endif
diff -r -u -w RenderSystems\GLES\src\EGL\WIN32\OgreWin32EGLWindow.cpp RenderSystems\GLES\src\EGL\WIN32\OgreWin32EGLWindow.cpp
--- RenderSystems\GLES\src\EGL\WIN32\OgreWin32EGLWindow.cpp	2012-09-02 06:24:38.000000000 -0500
+++ RenderSystems\GLES\src\EGL\WIN32\OgreWin32EGLWindow.cpp	2014-02-16 17:50:47.420914900 -0600
@@ -81,7 +81,7 @@
 		HINSTANCE hInst = GetModuleHandle( NULL );
 #else
 #  if OGRE_DEBUG_MODE == 1
-		HINSTANCE hInst = GetModuleHandle("RenderSystem_GLES_d.dll");
+		HINSTANCE hInst = GetModuleHandle("RenderSystem_GLES.dll");
 #  else
 		HINSTANCE hInst = GetModuleHandle("RenderSystem_GLES.dll");
 #  endif
