# HG changeset patch
# User Manuel Zanin <zanin.manuel@gmail.com>
# Date 1271056142 -28800
# Branch v1-7-mogre-GantZ
# Node ID 8e665cc90565c56a6f845e9ad749e02ed2dbb553
# Parent  7d85744a5f3738ca50c335fa8d28548be5a83638
Added set commands to enable multicore builds

diff -r 7d85744a5f37 -r 8e665cc90565 CMakeLists.txt
--- a/CMakeLists.txt   Mon Apr 12 15:07:20 2010 +0800
+++ b/CMakeLists.txt   Mon Apr 12 15:09:02 2010 +0800
@@ -86,6 +86,9 @@
   set(CMAKE_CXX_FLAGS_DEBUG "${CMAKE_CXX_FLAGS_DEBUG} /bigobj")
   set(CMAKE_CXX_FLAGS_RELWITHDEBINFO "${CMAKE_CXX_FLAGS_RELWITHDEBINFO} /bigobj")
   endif ()
+  # Enable multicore builds
+  set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} /MP")
+  set(CMAKE_CXX_FLAGS_DEBUG "${CMAKE_CXX_FLAGS_DEBUG} /MP")
endif ()
if (MINGW)
   add_definitions(-D_WIN32_WINNT=0x0500)

# HG changeset patch
# User Manuel Zanin <zanin.manuel@gmail.com>
# Date 1271056752 -28800
# Branch v1-7-mogre-GantZ
# Node ID 3669911242c593edcc0e7f508f4f7d230e907c0a
# Parent  8e665cc90565c56a6f845e9ad749e02ed2dbb553
Added assign methods and fixed at methods in class HashedVector

diff -r 8e665cc90565 -r 3669911242c5 OgreMain/include/OgreCommon.h
--- a/OgreMain/include/OgreCommon.h   Mon Apr 12 15:09:02 2010 +0800
+++ b/OgreMain/include/OgreCommon.h   Mon Apr 12 15:19:12 2010 +0800
@@ -375,12 +375,14 @@
         return mList[n]; 
      }
      const_reference operator[](size_type n) const { return mList[n]; }
+      
      reference at(size_type n) 
      { 
         // we have to assume that hash needs recalculating on non-const
         dirtyHash();
-         return mList.const_iterator(n); 
+         return mList.at(n); 
      }
+
      const_reference at(size_type n) const { return mList.at(n); }
      HashedVector() : mListHash(0), mListHashDirty(false) {}
      HashedVector(size_type n) : mList(n), mListHash(0), mListHashDirty(n > 0) {}
@@ -491,6 +493,17 @@
            dirtyHash();
      }

+      void assign(size_type n, const T& u)
+      {
+         mList.assign(n, u);
+      }
+
+      template <class InputIterator>
+      void assign(InputIterator first, InputIterator last)
+      {
+         mList.assign(first, last);
+      }
+
      bool operator==(const HashedVector<T>& b)
      { return mListHash == b.mListHash; }
# HG changeset patch
# User Manuel Zanin <zanin.manuel@gmail.com>
# Date 1271056840 -28800
# Branch v1-7-mogre-GantZ
# Node ID 525f0d0f234412918000273f116f052a7e1cb71d
# Parent  3669911242c593edcc0e7f508f4f7d230e907c0a
Added typedef for extremityPoints vector<Vector3>::type to make autowrapping possible

diff -r 3669911242c5 -r 525f0d0f2344 OgreMain/include/OgreSubMesh.h
--- a/OgreMain/include/OgreSubMesh.h   Mon Apr 12 15:19:12 2010 +0800
+++ b/OgreMain/include/OgreSubMesh.h   Mon Apr 12 15:20:40 2010 +0800
@@ -134,7 +134,9 @@
                 If this array is empty, submesh sorting is done like in older versions -
                 by comparing the positions of the owning entity.
          */
-        vector<Vector3>::type extremityPoints;
+
+      typedef vector<Vector3>::type PointList;
+        PointList extremityPoints;

         /// Reference to parent Mesh (not a smart pointer so child does not keep parent alive).
         Mesh* parent;

# HG changeset patch
# User Manuel Zanin <zanin.manuel@gmail.com>
# Date 1271057139 -28800
# Branch v1-7-mogre-GantZ
# Node ID 31bde27698038df521791a3125a34632626f7257
# Parent  1b8637c68f12b3c4879ed967e623c45674844766
Added CLRObject specific code

diff -r 1b8637c68f12 -r 31bde2769803 OgreMain/include/OgreDefaultHardwareBufferManager.h
--- a/OgreMain/include/OgreDefaultHardwareBufferManager.h   Mon Apr 12 15:21:06 2010 +0800
+++ b/OgreMain/include/OgreDefaultHardwareBufferManager.h   Mon Apr 12 15:25:39 2010 +0800
@@ -101,6 +101,8 @@
   */
   class _OgreExport DefaultHardwareBufferManagerBase : public HardwareBufferManagerBase
   {
+   public:
+      DECLARE_INIT_CLROBJECT_METHOD_OVERRIDE(DefaultHardwareBufferManagerBase);
     public:
         DefaultHardwareBufferManagerBase();
         ~DefaultHardwareBufferManagerBase();
diff -r 1b8637c68f12 -r 31bde2769803 OgreMain/include/OgreDistanceLodStrategy.h
--- a/OgreMain/include/OgreDistanceLodStrategy.h   Mon Apr 12 15:21:06 2010 +0800
+++ b/OgreMain/include/OgreDistanceLodStrategy.h   Mon Apr 12 15:25:39 2010 +0800
@@ -45,6 +45,9 @@
     /** Level of detail strategy based on distance from camera. */
     class _OgreExport DistanceLodStrategy : public LodStrategy, public Singleton<DistanceLodStrategy>
     {
+   public:
+      DECLARE_INIT_CLROBJECT_METHOD_OVERRIDE(DistanceLodStrategy);
+   
     protected:
         /// @copydoc LodStrategy::getValueImpl
         virtual Real getValueImpl(const MovableObject *movableObject, const Camera *camera) const;
diff -r 1b8637c68f12 -r 31bde2769803 OgreMain/include/OgreHardwareBufferManager.h
--- a/OgreMain/include/OgreHardwareBufferManager.h   Mon Apr 12 15:21:06 2010 +0800
+++ b/OgreMain/include/OgreHardwareBufferManager.h   Mon Apr 12 15:25:39 2010 +0800
@@ -106,8 +106,11 @@
      and passes it to the HardwareBufferManager superclass as a delegate. 
      This subclass must also delete the implementation instance it creates.
   */
-   class _OgreExport HardwareBufferManagerBase : public BufferAlloc
+   class _OgreExport HardwareBufferManagerBase : public BufferAlloc, public CLRObject
   {
+    public:
+      DECLARE_INIT_CLROBJECT_METHOD_OVERRIDE(HardwareBufferManagerBase);
+   private:
         friend class HardwareVertexBufferSharedPtr;
         friend class HardwareIndexBufferSharedPtr;
     protected:
@@ -383,7 +386,10 @@
     /** Singleton wrapper for hardware buffer manager. */
     class _OgreExport HardwareBufferManager : public HardwareBufferManagerBase, public Singleton<HardwareBufferManager>
     {
-        friend class HardwareVertexBufferSharedPtr;
+    public:
+      DECLARE_INIT_CLROBJECT_METHOD_OVERRIDE(HardwareBufferManager);
+   private:
+      friend class HardwareVertexBufferSharedPtr;
         friend class HardwareIndexBufferSharedPtr;
     protected:
      HardwareBufferManagerBase* mImpl;
diff -r 1b8637c68f12 -r 31bde2769803 OgreMain/include/OgreLodListener.h
--- a/OgreMain/include/OgreLodListener.h   Mon Apr 12 15:21:06 2010 +0800
+++ b/OgreMain/include/OgreLodListener.h   Mon Apr 12 15:25:39 2010 +0800
@@ -114,9 +114,12 @@
             also be called.  The postqueue method is invoked at an appropriate
             time after rendering and scene changes may be safely made there.
     */
-    class _OgreExport LodListener
+   class _OgreExport LodListener : public CLRObject
     {
     public:
+      DECLARE_INIT_CLROBJECT_METHOD_OVERRIDE(LodListener);
+
+   public:

         virtual ~LodListener() {}

diff -r 1b8637c68f12 -r 31bde2769803 OgreMain/include/OgreLodStrategy.h
--- a/OgreMain/include/OgreLodStrategy.h   Mon Apr 12 15:21:06 2010 +0800
+++ b/OgreMain/include/OgreLodStrategy.h   Mon Apr 12 15:25:39 2010 +0800
@@ -50,9 +50,12 @@
         getIndex, sort, and isSorted.
         In addition, transformUserValue may be overridden.
     */
-   class _OgreExport LodStrategy : public LodAlloc
+   class _OgreExport LodStrategy : public LodAlloc, public CLRObject
     {
-    protected:
+    public:
+      DECLARE_INIT_CLROBJECT_METHOD_OVERRIDE(LodStrategy);
+
+   protected:
         /** Name of this strategy. */
         String mName;

diff -r 1b8637c68f12 -r 31bde2769803 OgreMain/include/OgrePixelCountLodStrategy.h
--- a/OgreMain/include/OgrePixelCountLodStrategy.h   Mon Apr 12 15:21:06 2010 +0800
+++ b/OgreMain/include/OgrePixelCountLodStrategy.h   Mon Apr 12 15:25:39 2010 +0800
@@ -45,6 +45,9 @@
   /** Level of detail strategy based on pixel count approximation from bounding sphere projection. */
     class _OgreExport PixelCountLodStrategy : public LodStrategy, public Singleton<PixelCountLodStrategy>
     {
+   public:
+      DECLARE_INIT_CLROBJECT_METHOD_OVERRIDE(PixelCountLodStrategy);
+   
     protected:
         /// @copydoc LodStrategy::getValueImpl
         virtual Real getValueImpl(const MovableObject *movableObject, const Camera *camera) const;
diff -r 1b8637c68f12 -r 31bde2769803 OgreMain/include/OgreRenderObjectListener.h
--- a/OgreMain/include/OgreRenderObjectListener.h   Mon Apr 12 15:21:06 2010 +0800
+++ b/OgreMain/include/OgreRenderObjectListener.h   Mon Apr 12 15:25:39 2010 +0800
@@ -40,8 +40,11 @@
     /** Abstract interface which classes must implement if they wish to receive
         events from the scene manager when single object is about to be rendered. 
     */
-   class _OgreExport RenderObjectListener
+   class _OgreExport RenderObjectListener : public CLRObject
   {
+    public:
+      DECLARE_INIT_CLROBJECT_METHOD_OVERRIDE(RenderObjectListener);
+
   public:
      virtual ~RenderObjectListener() {}
      /** Event raised when render single object started.
diff -r 1b8637c68f12 -r 31bde2769803 OgreMain/include/OgreUserObjectBindings.h
--- a/OgreMain/include/OgreUserObjectBindings.h   Mon Apr 12 15:21:06 2010 +0800
+++ b/OgreMain/include/OgreUserObjectBindings.h   Mon Apr 12 15:25:39 2010 +0800
@@ -45,9 +45,11 @@
   Any instance of Ogre class that will derive from this class could be associated with custom 
   application object using this class interface.
   */
-   class _OgreExport UserObjectBindings : public GeneralAllocatedObject
+   class _OgreExport UserObjectBindings : public GeneralAllocatedObject, public CLRObject
   {
   public:   
+      DECLARE_INIT_CLROBJECT_METHOD_OVERRIDE(UserObjectBindings);
+
      /** Class constructor. */
      UserObjectBindings();

# HG changeset patch
# User Manuel Zanin <zanin.manuel@gmail.com>
# Date 1271057248 -28800
# Branch v1-7-mogre-GantZ
# Node ID 5ce404a51094ed5ef9cee1747361d9e5c00578b4
# Parent  31bde27698038df521791a3125a34632626f7257
Replaced longer std::basic_stringstream<...> with equivalent std::wstringstream/std::stringstream for autowrapper

diff -r 31bde2769803 -r 5ce404a51094 OgreMain/include/OgrePrerequisites.h
--- a/OgreMain/include/OgrePrerequisites.h   Mon Apr 12 15:25:39 2010 +0800
+++ b/OgreMain/include/OgrePrerequisites.h   Mon Apr 12 15:27:28 2010 +0800
@@ -440,9 +440,9 @@
   #endif

   #if OGRE_WCHAR_T_STRINGS
-      typedef std::basic_stringstream<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > _StringStreamBase;
+      typedef std::wstringstream _StringStreamBase;
   #else
-      typedef std::basic_stringstream<char,std::char_traits<char>,std::allocator<char> > _StringStreamBase;
+      typedef std::stringstream _StringStreamBase;
   #endif

#endif

