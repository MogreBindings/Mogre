Index: CMakeLists.txt
===================================================================
--- CMakeLists.txt	(revision 9952)
+++ CMakeLists.txt	(working copy)
@@ -103,6 +103,9 @@
 	set(CMAKE_CXX_FLAGS_DEBUG "${CMAKE_CXX_FLAGS_DEBUG} /bigobj")
 	set(CMAKE_CXX_FLAGS_RELWITHDEBINFO "${CMAKE_CXX_FLAGS_RELWITHDEBINFO} /bigobj")
   endif ()
+   # Enable multicore builds
+   set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} /MP")
+   set(CMAKE_CXX_FLAGS_DEBUG "${CMAKE_CXX_FLAGS_DEBUG} /MP")
 endif ()
 if (MINGW)
   add_definitions(-D_WIN32_WINNT=0x0500)
Index: OgreMain/include/OgreAnimable.h
===================================================================
--- OgreMain/include/OgreAnimable.h	(revision 9952)
+++ OgreMain/include/OgreAnimable.h	(working copy)
@@ -68,9 +68,11 @@
 		are often comprised of multiple properties it helps to be able to deal
 		with all values through a single class.
 	*/
-	class _OgreExport AnimableValue : public AnimableAlloc
+	class _OgreExport AnimableValue : public AnimableAlloc, public CLRObject
 	{
 	public:
+		 DECLARE_INIT_CLROBJECT_METHOD_OVERRIDE(AnimableValue);
+		 
 		/// The type of the value being animated
 		enum ValueType
 		{
Index: OgreMain/include/OgreAnimation.h
===================================================================
--- OgreMain/include/OgreAnimation.h	(revision 9952)
+++ OgreMain/include/OgreAnimation.h	(working copy)
@@ -55,10 +55,12 @@
         You should not create these animations directly. They will be created via a parent
         object which owns the animation, e.g. Skeleton.
     */
-	class _OgreExport Animation : public AnimationAlloc
+	class _OgreExport Animation : public AnimationAlloc, public CLRObject
     {
 
     public:
+		DECLARE_INIT_CLROBJECT_METHOD_OVERRIDE(Animation);
+	 
         /** The types of animation interpolation available. */
         enum InterpolationMode
         {
Index: OgreMain/include/OgreAnimationState.h
===================================================================
--- OgreMain/include/OgreAnimationState.h	(revision 9952)
+++ OgreMain/include/OgreAnimationState.h	(working copy)
@@ -49,13 +49,13 @@
         Other classes can hold instances of this class to store the state of any animations
         they are using.
     */
-	class _OgreExport AnimationState : public AnimationAlloc
+	class _OgreExport AnimationState : public AnimationAlloc, public CLRObject
     {
     public:
-
+	   DECLARE_INIT_CLROBJECT_METHOD_OVERRIDE(AnimationState);
+		
       /// typedef for an array of float values used as a bone blend mask
       typedef vector<float>::type BoneBlendMask;
-
         /// Normal constructor with all params supplied
         AnimationState(const String& animName, AnimationStateSet *parent, 
 			Real timePos, Real length, Real weight = 1.0, bool enabled = false);
@@ -183,6 +183,7 @@
 	class _OgreExport AnimationStateSet : public AnimationAlloc
 	{
 	public:
+	     DECLARE_CLRHANDLE;
 		/// Mutex, public for external locking if needed
 		OGRE_AUTO_MUTEX
 		/// Create a blank animation state set
Index: OgreMain/include/OgreAnimationTrack.h
===================================================================
--- OgreMain/include/OgreAnimationTrack.h	(revision 9952)
+++ OgreMain/include/OgreAnimationTrack.h	(working copy)
@@ -48,6 +48,9 @@
     */
     class _OgreExport TimeIndex
     {
+	public:
+	   DECLARE_CLRHANDLE;
+	   
     protected:
         /** The time position (in relation to the whole animation sequence)
         */
@@ -118,10 +121,11 @@
 		It is possible to change this behaviour using
 		setUseShortestRotationPath() method.
     */
-	class _OgreExport AnimationTrack : public AnimationAlloc
+	class _OgreExport AnimationTrack : public AnimationAlloc, public CLRObject
     {
     public:
-
+		DECLARE_INIT_CLROBJECT_METHOD_OVERRIDE(AnimationTrack);
+		
 		/** Listener allowing you to override certain behaviour of a track, 
 			for example to drive animation procedurally.
 		*/
@@ -261,6 +265,7 @@
 	class _OgreExport NumericAnimationTrack : public AnimationTrack
 	{
 	public:
+		DECLARE_INIT_CLROBJECT_METHOD_OVERRIDE(NumericAnimationTrack);
 		/// Constructor
 		NumericAnimationTrack(Animation* parent, unsigned short handle);
 		/// Constructor, associates with an AnimableValue
@@ -322,6 +327,8 @@
 	class _OgreExport NodeAnimationTrack : public AnimationTrack
 	{
 	public:
+		DECLARE_INIT_CLROBJECT_METHOD_OVERRIDE(NodeAnimationTrack);
+		
 		/// Constructor
 		NodeAnimationTrack(Animation* parent, unsigned short handle);
 		/// Constructor, associates with a Node
@@ -474,6 +481,7 @@
 	class _OgreExport VertexAnimationTrack : public AnimationTrack
 	{
 	public:
+		DECLARE_INIT_CLROBJECT_METHOD_OVERRIDE(VertexAnimationTrack);
 		/** The target animation mode */
 		enum TargetMode
 		{
Index: OgreMain/include/OgreArchive.h
===================================================================
--- OgreMain/include/OgreArchive.h	(revision 9952)
+++ OgreMain/include/OgreArchive.h	(working copy)
@@ -84,8 +84,11 @@
         to benefit from OGRE's automatic searching of multiple file locations 
         for the resources you are looking for.
     */
-	class _OgreExport Archive : public ArchiveAlloc
+	class _OgreExport Archive : public ArchiveAlloc, public CLRObject
     {
+	public:
+		DECLARE_INIT_CLROBJECT_METHOD_OVERRIDE(Archive);
+		
     protected:
         /// Archive name
         String mName; 
@@ -94,8 +97,6 @@
 		/// Read-only flag
 		bool mReadOnly;
     public:
-
-
         /** Constructor - don't call direct, used by ArchiveFactory.
         */
         Archive( const String& name, const String& archType )
Index: OgreMain/include/OgreBillboard.h
===================================================================
--- OgreMain/include/OgreBillboard.h	(revision 9952)
+++ OgreMain/include/OgreBillboard.h	(working copy)
@@ -65,6 +65,9 @@
 
 	class _OgreExport Billboard : public FXAlloc
     {
+	public:
+		DECLARE_CLRHANDLE;
+		
         friend class BillboardSet;
         friend class BillboardParticleRenderer;
     protected:
Index: OgreMain/include/OgreBillboardChain.h
===================================================================
--- OgreMain/include/OgreBillboardChain.h	(revision 9952)
+++ OgreMain/include/OgreBillboardChain.h	(working copy)
@@ -77,7 +77,8 @@
 	{
 
 	public:
-
+		DECLARE_INIT_CLROBJECT_METHOD_OVERRIDE(BillboardChain);
+		
 		/** Contains the data of an element of the BillboardChain.
 		*/
 		class _OgreExport Element
@@ -333,6 +334,9 @@
 	/** Factory object for creating BillboardChain instances */
 	class _OgreExport BillboardChainFactory : public MovableObjectFactory
 	{
+	public:
+		DECLARE_INIT_CLROBJECT_METHOD_OVERRIDE(BillboardChainFactory);
+		
 	protected:
 		MovableObject* createInstanceImpl( const String& name, const NameValuePairList* params);
 	public:
Index: OgreMain/include/OgreBillboardParticleRenderer.h
===================================================================
--- OgreMain/include/OgreBillboardParticleRenderer.h	(revision 9952)
+++ OgreMain/include/OgreBillboardParticleRenderer.h	(working copy)
@@ -50,6 +50,9 @@
     */
     class _OgreExport BillboardParticleRenderer : public ParticleSystemRenderer
     {
+	public:
+		DECLARE_INIT_CLROBJECT_METHOD_OVERRIDE(BillboardParticleRenderer);
+		
     protected:
         /// The billboard set that's doing the rendering
         BillboardSet* mBillboardSet;
Index: OgreMain/include/OgreBillboardSet.h
===================================================================
--- OgreMain/include/OgreBillboardSet.h	(revision 9952)
+++ OgreMain/include/OgreBillboardSet.h	(working copy)
@@ -108,6 +108,9 @@
     */
     class _OgreExport BillboardSet : public MovableObject, public Renderable
     {
+	public:
+		DECLARE_INIT_CLROBJECT_METHOD_OVERRIDE(BillboardSet);
+		
     protected:
         /** Private constructor (instances cannot be created directly).
         */
@@ -851,6 +854,9 @@
 	/** Factory object for creating BillboardSet instances */
 	class _OgreExport BillboardSetFactory : public MovableObjectFactory
 	{
+	public:
+		DECLARE_INIT_CLROBJECT_METHOD_OVERRIDE(BillboardSetFactory);
+	
 	protected:
 		MovableObject* createInstanceImpl( const String& name, const NameValuePairList* params);
 	public:
Index: OgreMain/include/OgreBone.h
===================================================================
--- OgreMain/include/OgreBone.h	(revision 9952)
+++ OgreMain/include/OgreBone.h	(working copy)
@@ -51,6 +51,8 @@
     class _OgreExport Bone : public Node
     {
     public:
+		DECLARE_INIT_CLROBJECT_METHOD_OVERRIDE(Bone);
+		
         /** Constructor, not to be used directly (use Bone::createChild or Skeleton::createBone) */
         Bone(unsigned short handle, Skeleton* creator);
         /** Constructor, not to be used directly (use Bone::createChild or Skeleton::createBone) */
Index: OgreMain/include/OgreBorderPanelOverlayElement.h
===================================================================
--- OgreMain/include/OgreBorderPanelOverlayElement.h	(revision 9952)
+++ OgreMain/include/OgreBorderPanelOverlayElement.h	(working copy)
@@ -56,6 +56,9 @@
     */
     class _OgreExport BorderPanelOverlayElement : public PanelOverlayElement
     {
+	public:
+		DECLARE_INIT_CLROBJECT_METHOD_OVERRIDE(BorderPanelOverlayElement);
+		
         friend class BorderRenderable;
     public:
         /** Constructor */
@@ -317,8 +320,10 @@
         We need this because we have to render twice, once with the inner panel's repeating
         material (handled by superclass) and once for the border's separate material. 
     */
-    class _OgreExport BorderRenderable : public Renderable, public OverlayAlloc
+    class _OgreExport BorderRenderable : public Renderable, public OverlayAlloc, public CLRObject
     {
+	public:
+		DECLARE_INIT_CLROBJECT_METHOD_OVERRIDE(BorderRenderable);
     protected:
         BorderPanelOverlayElement* mParent;
     public:
Index: OgreMain/include/OgreCamera.h
===================================================================
--- OgreMain/include/OgreCamera.h	(revision 9952)
+++ OgreMain/include/OgreCamera.h	(working copy)
@@ -85,6 +85,8 @@
     class _OgreExport Camera : public Frustum
     {
 	public:
+		DECLARE_INIT_CLROBJECT_METHOD_OVERRIDE(Camera);
+		
 		/** Listener interface so you can be notified of Camera events. 
 		*/
 		class _OgreExport Listener 
Index: OgreMain/include/OgreCodec.h
===================================================================
--- OgreMain/include/OgreCodec.h	(revision 9952)
+++ OgreMain/include/OgreCodec.h	(working copy)
@@ -52,8 +52,10 @@
             The codec concept is a pretty generic one - you can easily understand
             how it can be used for images, sounds, archives, even compressed data.
     */
-	class _OgreExport Codec : public CodecAlloc
+	class _OgreExport Codec : public CodecAlloc, public CLRObject
     {
+	public:
+		 DECLARE_INIT_CLROBJECT_METHOD_OVERRIDE(Codec);
     protected:
         typedef map< String, Codec* >::type CodecList; 
         /** A map that contains all the registered codecs.
@@ -61,9 +63,11 @@
         static CodecList ms_mapCodecs;
 
     public:
-        class _OgrePrivate CodecData : public CodecAlloc
+        class _OgrePrivate CodecData : public CodecAlloc, public CLRObject
         {
         public:
+			DECLARE_INIT_CLROBJECT_METHOD_OVERRIDE(Codec_CodecData);
+			
             virtual ~CodecData() {};
 
             /** Returns the type of the data.
Index: OgreMain/include/OgreCommon.h
===================================================================
--- OgreMain/include/OgreCommon.h	(revision 9952)
+++ OgreMain/include/OgreCommon.h	(working copy)
@@ -379,7 +379,7 @@
 		{ 
 			// we have to assume that hash needs recalculating on non-const
 			dirtyHash();
-			return mList.const_iterator(n); 
+			return mList.at(n);
 		}
 		const_reference at(size_type n) const { return mList.at(n); }
 		HashedVector() : mListHash(0), mListHashDirty(false) {}
@@ -490,7 +490,19 @@
 			if (recalc)
 				dirtyHash();
 		}
+		
+		void assign(size_type n, const T& u)
+        {
+			mList.assign(n, u);
+        }
 
+       template <class InputIterator>
+       void assign(InputIterator first, InputIterator last)
+       {
+          mList.assign(first, last);
+       }
+
+
 		bool operator==(const HashedVector<T>& b)
 		{ return mListHash == b.mListHash; }
 
Index: OgreMain/include/OgreCompositionPass.h
===================================================================
--- OgreMain/include/OgreCompositionPass.h	(revision 9952)
+++ OgreMain/include/OgreCompositionPass.h	(working copy)
@@ -46,6 +46,8 @@
 	class _OgreExport CompositionPass : public CompositorInstAlloc
     {
     public:
+		DECLARE_CLRHANDLE;
+		
         CompositionPass(CompositionTargetPass *parent);
         ~CompositionPass();
         
@@ -222,6 +224,8 @@
 		/// Inputs (for material used for rendering the quad)
 		struct InputTex
 		{
+			DECLARE_CLRHANDLE;
+			
 			/// Name (local) of the input texture (empty == no input)
 			String name;
 			/// MRT surface index if applicable
Index: OgreMain/include/OgreCompositionTargetPass.h
===================================================================
--- OgreMain/include/OgreCompositionTargetPass.h	(revision 9952)
+++ OgreMain/include/OgreCompositionTargetPass.h	(working copy)
@@ -44,6 +44,8 @@
 	class _OgreExport CompositionTargetPass : public CompositorInstAlloc
     {
     public:
+		DECLARE_CLRHANDLE;
+		
         CompositionTargetPass(CompositionTechnique *parent);
         ~CompositionTargetPass();
         
Index: OgreMain/include/OgreCompositionTechnique.h
===================================================================
--- OgreMain/include/OgreCompositionTechnique.h	(revision 9952)
+++ OgreMain/include/OgreCompositionTechnique.h	(working copy)
@@ -41,9 +41,11 @@
 	*/
 	/** Base composition technique, can be subclassed in plugins.
      */
-	class _OgreExport CompositionTechnique : public CompositorInstAlloc
+	class _OgreExport CompositionTechnique : public CompositorInstAlloc, public CLRObject
     {
     public:
+		DECLARE_INIT_CLROBJECT_METHOD_OVERRIDE(CompositionTechnique);
+	
         CompositionTechnique(Compositor *parent);
         virtual ~CompositionTechnique();
     
Index: OgreMain/include/OgreCompositor.h
===================================================================
--- OgreMain/include/OgreCompositor.h	(revision 9952)
+++ OgreMain/include/OgreCompositor.h	(working copy)
@@ -49,6 +49,8 @@
     class _OgreExport Compositor: public Resource
     {
     public:
+		DECLARE_INIT_CLROBJECT_METHOD_OVERRIDE(Compositor);
+	
         Compositor(ResourceManager* creator, const String& name, ResourceHandle handle,
             const String& group, bool isManual = false, ManualResourceLoader* loader = 0);
         ~Compositor();
Index: OgreMain/include/OgreCompositorChain.h
===================================================================
--- OgreMain/include/OgreCompositorChain.h	(revision 9952)
+++ OgreMain/include/OgreCompositorChain.h	(working copy)
@@ -43,9 +43,11 @@
 	*/
 	/** Chain of compositor effects applying to one viewport.
      */
-    class _OgreExport CompositorChain: public RenderTargetListener, public CompositorInstAlloc
+    class _OgreExport CompositorChain: public RenderTargetListener, public CompositorInstAlloc, public CLRObject
     {
     public:
+		DECLARE_INIT_CLROBJECT_METHOD_OVERRIDE(CompositorChain);
+	
         CompositorChain(Viewport *vp);
         /** Another gcc warning here, which is no problem because RenderTargetListener is never used
             to delete an object.
Index: OgreMain/include/OgreCompositorInstance.h
===================================================================
--- OgreMain/include/OgreCompositorInstance.h	(revision 9952)
+++ OgreMain/include/OgreCompositorInstance.h	(working copy)
@@ -46,9 +46,11 @@
     /** An instance of a Compositor object for one Viewport. It is part of the CompositorChain
 		for a Viewport.
      */
-	class _OgreExport CompositorInstance : public CompositorInstAlloc
+	class _OgreExport CompositorInstance : public CompositorInstAlloc, public CLRObject
     {
     public:
+		DECLARE_INIT_CLROBJECT_METHOD_OVERRIDE(CompositorInstance);
+	
         CompositorInstance(CompositionTechnique *technique, CompositorChain *chain);
         virtual ~CompositorInstance();
 		/** Provides an interface to "listen in" to to render system operations executed by this 
Index: OgreMain/include/OgreConfig.h
===================================================================
--- OgreMain/include/OgreConfig.h	(revision 9952)
+++ OgreMain/include/OgreConfig.h	(working copy)
@@ -92,18 +92,6 @@
 #  define OGRE_MEMORY_ALLOCATOR OGRE_MEMORY_ALLOCATOR_NEDPOOLING
 #endif
 
-// Whether to use the custom memory allocator in STL containers
-#ifndef OGRE_CONTAINERS_USE_CUSTOM_MEMORY_ALLOCATOR
-#  define OGRE_CONTAINERS_USE_CUSTOM_MEMORY_ALLOCATOR 1
-#endif
-
-//if you want to make Ogre::String use the custom memory allocator then set:
-//#define OGRE_STRING_USE_CUSTOM_MEMORY_ALLOCATOR 1
-// Doing this will mean Ogre's strings will not be compatible with std::string however
-#ifndef OGRE_STRING_USE_CUSTOM_MEMORY_ALLOCATOR
-#	define OGRE_STRING_USE_CUSTOM_MEMORY_ALLOCATOR 0
-#endif
-
 // enable or disable the memory tracker, recording the memory allocations & tracking leaks
 // default is to disable since it's expensive, but you can enable if needed per build target
 
Index: OgreMain/include/OgreDefaultHardwareBufferManager.h
===================================================================
--- OgreMain/include/OgreDefaultHardwareBufferManager.h	(revision 9952)
+++ OgreMain/include/OgreDefaultHardwareBufferManager.h	(working copy)
@@ -101,6 +101,8 @@
 	*/
 	class _OgreExport DefaultHardwareBufferManagerBase : public HardwareBufferManagerBase
 	{
+	public:
+       DECLARE_INIT_CLROBJECT_METHOD_OVERRIDE(DefaultHardwareBufferManagerBase);
     public:
         DefaultHardwareBufferManagerBase();
         ~DefaultHardwareBufferManagerBase();
Index: OgreMain/include/OgreDistanceLodStrategy.h
===================================================================
--- OgreMain/include/OgreDistanceLodStrategy.h	(revision 9952)
+++ OgreMain/include/OgreDistanceLodStrategy.h	(working copy)
@@ -45,6 +45,8 @@
     /** Level of detail strategy based on distance from camera. */
     class _OgreExport DistanceLodStrategy : public LodStrategy, public Singleton<DistanceLodStrategy>
     {
+	public:
+      DECLARE_INIT_CLROBJECT_METHOD_OVERRIDE(DistanceLodStrategy);
     protected:
         /// @copydoc LodStrategy::getValueImpl
         virtual Real getValueImpl(const MovableObject *movableObject, const Camera *camera) const;
Index: OgreMain/include/OgreEdgeListBuilder.h
===================================================================
--- OgreMain/include/OgreEdgeListBuilder.h	(revision 9952)
+++ OgreMain/include/OgreEdgeListBuilder.h	(working copy)
@@ -51,6 +51,8 @@
 	class _OgreExport EdgeData : public EdgeDataAlloc
     {
     public:
+		DECLARE_CLRHANDLE;
+		
         /** Basic triangle structure. */
         struct Triangle {
             /** The set of indexes this triangle came from (NB it is possible that the triangles on 
Index: OgreMain/include/OgreEntity.h
===================================================================
--- OgreMain/include/OgreEntity.h	(revision 9952)
+++ OgreMain/include/OgreEntity.h	(working copy)
@@ -80,6 +80,9 @@
 	*/
 	class _OgreExport Entity: public MovableObject, public Resource::Listener
 	{
+	public:
+        DECLARE_INIT_CLROBJECT_METHOD_OVERRIDE(Entity);
+	
 		// Allow EntityFactory full access
 		friend class EntityFactory;
 		friend class SubEntity;
@@ -785,6 +788,9 @@
 	/** Factory object for creating Entity instances */
 	class _OgreExport EntityFactory : public MovableObjectFactory
 	{
+	public:
+		DECLARE_INIT_CLROBJECT_METHOD_OVERRIDE(EntityFactory);
+		
 	protected:
 		MovableObject* createInstanceImpl( const String& name, const NameValuePairList* params);
 	public:
Index: OgreMain/include/OgreException.h
===================================================================
--- OgreMain/include/OgreException.h	(revision 9952)
+++ OgreMain/include/OgreException.h	(working copy)
@@ -151,7 +151,7 @@
 
         /** Gets the error code.
         */
-        virtual int getNumber(void) const throw();
+        virtual ExceptionCodes getNumber(void) const throw();
 
         /** Gets the source function.
         */
@@ -173,6 +173,12 @@
 
 		/// Override std::exception::what
 		const char* what() const throw() { return getFullDescription().c_str(); }
+		
+				//Additions for Mogre
+		/** Retrieves a pointer to the last exception created.
+        */
+        static Exception* getLastException() throw();
+        static void clearLastException() throw();
         
     };
 
Index: OgreMain/include/OgreExternalTextureSource.h
===================================================================
--- OgreMain/include/OgreExternalTextureSource.h	(revision 9952)
+++ OgreMain/include/OgreExternalTextureSource.h	(working copy)
@@ -70,9 +70,11 @@
 	before calling create defined texture... or it will fail, though, it 
 	is up to the plugin to report errors to the log file, or raise an 
 	exception if need be. */
-	class _OgreExport ExternalTextureSource : public StringInterface
+	class _OgreExport ExternalTextureSource : public StringInterface, public CLRObject
 	{
 	public:
+		DECLARE_INIT_CLROBJECT_METHOD_OVERRIDE(ExternalTextureSource);
+	
 		/** Constructor */
 		ExternalTextureSource();
 		/** Virtual destructor */
Index: OgreMain/include/OgreFileSystem.h
===================================================================
--- OgreMain/include/OgreFileSystem.h	(revision 9952)
+++ OgreMain/include/OgreFileSystem.h	(working copy)
@@ -46,6 +46,9 @@
     */
     class _OgreExport FileSystemArchive : public Archive 
     {
+	public:
+		DECLARE_INIT_CLROBJECT_METHOD_OVERRIDE(FileSystemArchive);
+		
     protected:
         /** Utility method to retrieve all files in a directory matching pattern.
         @param pattern File pattern
Index: OgreMain/include/OgreFont.h
===================================================================
--- OgreMain/include/OgreFont.h	(revision 9952)
+++ OgreMain/include/OgreFont.h	(working copy)
@@ -66,6 +66,9 @@
     */
 	class _OgreExport Font : public Resource, public ManualResourceLoader
     {
+	public:
+		DECLARE_INIT_CLROBJECT_METHOD_OVERRIDE(Font);
+		
     protected:
 		/// Command object for Font - see ParamCommand 
 		class _OgreExport CmdType : public ParamCommand
Index: OgreMain/include/OgreFrustum.h
===================================================================
--- OgreMain/include/OgreFrustum.h	(revision 9952)
+++ OgreMain/include/OgreFrustum.h	(working copy)
@@ -83,6 +83,9 @@
     */
     class _OgreExport Frustum : public MovableObject, public Renderable
     {
+	public:
+		DECLARE_INIT_CLROBJECT_METHOD_OVERRIDE(Frustum);
+		
     protected:
         /// Orthographic or perspective?
         ProjectionType mProjType;
Index: OgreMain/include/OgreGpuProgram.h
===================================================================
--- OgreMain/include/OgreGpuProgram.h	(revision 9952)
+++ OgreMain/include/OgreGpuProgram.h	(working copy)
@@ -68,6 +68,9 @@
 	*/
 	class _OgreExport GpuProgram : public Resource
 	{
+	public:
+		 DECLARE_INIT_CLROBJECT_METHOD_OVERRIDE(GpuProgram);
+		
 	protected:
 		/// Command object - see ParamCommand 
 		class _OgreExport CmdType : public ParamCommand
Index: OgreMain/include/OgreGpuProgramParams.h
===================================================================
--- OgreMain/include/OgreGpuProgramParams.h	(revision 9952)
+++ OgreMain/include/OgreGpuProgramParams.h	(working copy)
@@ -386,6 +386,9 @@
 	*/
 	class _OgreExport GpuSharedParameters : public GpuParamsAlloc
 	{
+	public:
+		DECLARE_CLRHANDLE;
+	
 	protected:
 		GpuNamedConstants mNamedConstants;
 		FloatConstantList mFloatConstants;
@@ -500,6 +503,9 @@
 	*/
 	class _OgreExport GpuSharedParametersUsage : public GpuParamsAlloc
 	{
+	public:
+		DECLARE_CLRHANDLE;
+		
 	protected:
 		GpuSharedParametersPtr mSharedParams;
 		// Not a shared pointer since this is also parent
@@ -584,6 +590,8 @@
 	class _OgreExport GpuProgramParameters : public GpuParamsAlloc
 	{
 	public:
+		DECLARE_CLRHANDLE;
+	
 		/** Defines the types of automatically updated values that may be bound to GpuProgram
 		parameters, or used to modify parameters on a per-object basis.
 		*/
Index: OgreMain/include/OgreHardwareBuffer.h
===================================================================
--- OgreMain/include/OgreHardwareBuffer.h	(revision 9952)
+++ OgreMain/include/OgreHardwareBuffer.h	(working copy)
@@ -70,10 +70,12 @@
 		You should look for the 'useShadowBuffer' parameter on the creation methods used to create
 		the buffer of the type you require (see HardwareBufferManager) to enable this feature.
     */
-	class _OgreExport HardwareBuffer : public BufferAlloc
+	class _OgreExport HardwareBuffer : public BufferAlloc, public CLRObject
     {
 
 	    public:
+			 DECLARE_INIT_CLROBJECT_METHOD_OVERRIDE(HardwareBuffer);
+		
 		    /// Enums describing buffer usage; not mutually exclusive
 		    enum Usage 
 		    {
Index: OgreMain/include/OgreHardwareBufferManager.h
===================================================================
--- OgreMain/include/OgreHardwareBufferManager.h	(revision 9952)
+++ OgreMain/include/OgreHardwareBufferManager.h	(working copy)
@@ -106,8 +106,11 @@
 		and passes it to the HardwareBufferManager superclass as a delegate. 
 		This subclass must also delete the implementation instance it creates.
 	*/
-	class _OgreExport HardwareBufferManagerBase : public BufferAlloc
+	class _OgreExport HardwareBufferManagerBase : public BufferAlloc, public CLRObject
 	{
+	public:
+       DECLARE_INIT_CLROBJECT_METHOD_OVERRIDE(HardwareBufferManagerBase);
+    private:
         friend class HardwareVertexBufferSharedPtr;
         friend class HardwareIndexBufferSharedPtr;
     protected:
@@ -383,6 +386,9 @@
     /** Singleton wrapper for hardware buffer manager. */
     class _OgreExport HardwareBufferManager : public HardwareBufferManagerBase, public Singleton<HardwareBufferManager>
     {
+	public:
+      DECLARE_INIT_CLROBJECT_METHOD_OVERRIDE(HardwareBufferManager);
+    private:
         friend class HardwareVertexBufferSharedPtr;
         friend class HardwareIndexBufferSharedPtr;
     protected:
Index: OgreMain/include/OgreHardwareIndexBuffer.h
===================================================================
--- OgreMain/include/OgreHardwareIndexBuffer.h	(revision 9952)
+++ OgreMain/include/OgreHardwareIndexBuffer.h	(working copy)
@@ -46,6 +46,8 @@
     class _OgreExport HardwareIndexBuffer : public HardwareBuffer
     {
 	    public:
+			DECLARE_INIT_CLROBJECT_METHOD_OVERRIDE(HardwareIndexBuffer);
+			
 		    enum IndexType {
 			    IT_16BIT,
 			    IT_32BIT
Index: OgreMain/include/OgreHardwareOcclusionQuery.h
===================================================================
--- OgreMain/include/OgreHardwareOcclusionQuery.h	(revision 9952)
+++ OgreMain/include/OgreHardwareOcclusionQuery.h	(working copy)
@@ -48,12 +48,13 @@
   * @author Lee Sandberg
   * Updated on 13/8/2005 by Tuan Kuranes email: tuan.kuranes@free.fr
   */
-	class _OgreExport HardwareOcclusionQuery : public RenderSysAlloc
+	class _OgreExport HardwareOcclusionQuery : public RenderSysAlloc, public CLRObject
 {
 //----------------------------------------------------------------------
 // Public methods
 //--
 public:
+	DECLARE_INIT_CLROBJECT_METHOD_OVERRIDE(HardwareOcclusionQuery);
 	/**
 	  * Object public member functions
 	  */
Index: OgreMain/include/OgreHardwarePixelBuffer.h
===================================================================
--- OgreMain/include/OgreHardwarePixelBuffer.h	(revision 9952)
+++ OgreMain/include/OgreHardwarePixelBuffer.h	(working copy)
@@ -51,6 +51,9 @@
     */
     class _OgreExport HardwarePixelBuffer : public HardwareBuffer
     {
+	public:
+		DECLARE_INIT_CLROBJECT_METHOD_OVERRIDE(HardwarePixelBuffer);
+		
     protected: 
         // Extents
         size_t mWidth, mHeight, mDepth;
Index: OgreMain/include/OgreHardwareVertexBuffer.h
===================================================================
--- OgreMain/include/OgreHardwareVertexBuffer.h	(revision 9952)
+++ OgreMain/include/OgreHardwareVertexBuffer.h	(working copy)
@@ -46,6 +46,9 @@
 	/** Specialisation of HardwareBuffer for a vertex buffer. */
     class _OgreExport HardwareVertexBuffer : public HardwareBuffer
     {
+		public:
+			DECLARE_INIT_CLROBJECT_METHOD_OVERRIDE(HardwareVertexBuffer);
+			
 	    protected:
 
 			HardwareBufferManagerBase* mMgr;
@@ -302,9 +305,11 @@
 	Like the other classes in this functional area, these declarations should be created and
 	destroyed using the HardwareBufferManager.
     */
-	class _OgreExport VertexDeclaration : public VertexDataAlloc
+	class _OgreExport VertexDeclaration : public VertexDataAlloc, public CLRObject
     {
     public:
+		DECLARE_INIT_CLROBJECT_METHOD_OVERRIDE(VertexDeclaration);
+		
 		/// Defines the list of vertex elements that makes up this declaration
         typedef list<VertexElement>::type VertexElementList;
         /// Sort routine for vertex elements
@@ -480,9 +485,11 @@
 		Like the other classes in this functional area, these binding maps should be created and
 		destroyed using the HardwareBufferManager.
 	*/
-	class _OgreExport VertexBufferBinding : public VertexDataAlloc
+	class _OgreExport VertexBufferBinding : public VertexDataAlloc, public CLRObject
 	{
 	public:
+		DECLARE_INIT_CLROBJECT_METHOD_OVERRIDE(VertexBufferBinding);
+		
 		/// Defines the vertex buffer bindings used as source for vertex declarations
 		typedef map<unsigned short, HardwareVertexBufferSharedPtr>::type VertexBufferBindingMap;
 	protected:
Index: OgreMain/include/OgreHighLevelGpuProgram.h
===================================================================
--- OgreMain/include/OgreHighLevelGpuProgram.h	(revision 9952)
+++ OgreMain/include/OgreHighLevelGpuProgram.h	(working copy)
@@ -62,6 +62,9 @@
     */
     class _OgreExport HighLevelGpuProgram : public GpuProgram
     {
+	public:
+		 DECLARE_INIT_CLROBJECT_METHOD_OVERRIDE(HighLevelGpuProgram);
+		 
     protected:
         /// Whether the high-level program (and it's parameter defs) is loaded
         bool mHighLevelLoaded;
Index: OgreMain/include/OgreImage.h
===================================================================
--- OgreMain/include/OgreImage.h	(revision 9952)
+++ OgreMain/include/OgreImage.h	(working copy)
@@ -61,6 +61,8 @@
 	class _OgreExport Image : public ImageAlloc
     {
     public:
+		DECLARE_CLRHANDLE;
+		 
     	typedef Ogre::Box Box;
     	typedef Ogre::Rect Rect;
     public:
Index: OgreMain/include/OgreImageCodec.h
===================================================================
--- OgreMain/include/OgreImageCodec.h	(revision 9952)
+++ OgreMain/include/OgreImageCodec.h	(working copy)
@@ -47,12 +47,16 @@
     class _OgreExport ImageCodec : public Codec
     {
     public:
+		DECLARE_INIT_CLROBJECT_METHOD_OVERRIDE(ImageCodec);
+		 
         virtual ~ImageCodec();
         /** Codec return class for images. Has information about the size and the
             pixel format of the image. */
         class _OgrePrivate ImageData : public Codec::CodecData
         {
         public:
+			 DECLARE_INIT_CLROBJECT_METHOD_OVERRIDE(ImageCodec_ImageData);
+		
 			ImageData():
 				height(0), width(0), depth(1), size(0),
 				num_mipmaps(0), flags(0), format(PF_UNKNOWN)
Index: OgreMain/include/OgreInstancedGeometry.h
===================================================================
--- OgreMain/include/OgreInstancedGeometry.h	(revision 9952)
+++ OgreMain/include/OgreInstancedGeometry.h	(working copy)
@@ -101,9 +101,11 @@
     @note
 		Warning: this class only works with indexed triangle lists at the moment,		do not pass it triangle strips, fans or lines / points, or unindexed geometry.
 	*/
-	class _OgreExport  InstancedGeometry : public BatchedGeometryAlloc
+	class _OgreExport  InstancedGeometry : public BatchedGeometryAlloc, public CLRObject
 	{
 	public:
+		DECLARE_INIT_CLROBJECT_METHOD_OVERRIDE(InstancedGeometry);
+		
 		/** Struct holding geometry optimised per SubMesh / lod level, ready
 			for copying to instances. 
 		@remarks
@@ -252,6 +254,9 @@
 		};
 		class _OgreExport  InstancedObject : public BatchedGeometryAlloc
 		{
+			public:
+				 DECLARE_CLRHANDLE;
+				 
 			friend class GeometryBucket;
 		public:
 			 enum TransformSpace
Index: OgreMain/include/OgreKeyFrame.h
===================================================================
--- OgreMain/include/OgreKeyFrame.h	(revision 9952)
+++ OgreMain/include/OgreKeyFrame.h	(working copy)
@@ -52,9 +52,10 @@
         animation sequence, with the exact state of the animation being an 
         interpolation between these key frames. 
     */
-	class _OgreExport KeyFrame : public AnimationAlloc
+	class _OgreExport KeyFrame : public AnimationAlloc, public CLRObject
     {
     public:
+		DECLARE_INIT_CLROBJECT_METHOD_OVERRIDE(KeyFrame);
 
         /** Default constructor, you should not call this but use AnimationTrack::createKeyFrame instead. */
         KeyFrame(const AnimationTrack* parent, Real time);
@@ -79,6 +80,8 @@
 	class _OgreExport NumericKeyFrame : public KeyFrame
 	{
 	public:
+		DECLARE_INIT_CLROBJECT_METHOD_OVERRIDE(NumericKeyFrame);
+		
 		/** Default constructor, you should not call this but use AnimationTrack::createKeyFrame instead. */
 		NumericKeyFrame(const AnimationTrack* parent, Real time);
 		~NumericKeyFrame() {}
@@ -102,6 +105,8 @@
 	class _OgreExport TransformKeyFrame : public KeyFrame
 	{
 	public:
+		DECLARE_INIT_CLROBJECT_METHOD_OVERRIDE(TransformKeyFrame);
+		
 		/** Default constructor, you should not call this but use AnimationTrack::createKeyFrame instead. */
 		TransformKeyFrame(const AnimationTrack* parent, Real time);
 		~TransformKeyFrame() {}
@@ -153,6 +158,8 @@
 	class _OgreExport VertexMorphKeyFrame : public KeyFrame
 	{
 	public:
+		 DECLARE_INIT_CLROBJECT_METHOD_OVERRIDE(VertexMorphKeyFrame);
+		 
 		/** Default constructor, you should not call this but use AnimationTrack::createKeyFrame instead. */
 		VertexMorphKeyFrame(const AnimationTrack* parent, Real time);
 		~VertexMorphKeyFrame() {}
@@ -183,6 +190,8 @@
 	class _OgreExport VertexPoseKeyFrame : public KeyFrame
 	{
 	public:
+		 DECLARE_INIT_CLROBJECT_METHOD_OVERRIDE(VertexPoseKeyFrame);
+		 
 		/** Default constructor, you should not call this but use AnimationTrack::createKeyFrame instead. */
 		VertexPoseKeyFrame(const AnimationTrack* parent, Real time);
 		~VertexPoseKeyFrame() {}
Index: OgreMain/include/OgreLight.h
===================================================================
--- OgreMain/include/OgreLight.h	(revision 9952)
+++ OgreMain/include/OgreLight.h	(working copy)
@@ -72,6 +72,8 @@
     class _OgreExport Light : public MovableObject
     {
     public:
+		DECLARE_INIT_CLROBJECT_METHOD_OVERRIDE(Light);
+		
         /// Temp tag used for sorting
         Real tempSquareDist;
 		/// internal method for calculating current squared distance from some world position
@@ -565,6 +567,9 @@
 	/** Factory object for creating Light instances */
 	class _OgreExport LightFactory : public MovableObjectFactory
 	{
+	public:
+		DECLARE_INIT_CLROBJECT_METHOD_OVERRIDE(LightFactory);
+		
 	protected:
 		MovableObject* createInstanceImpl( const String& name, const NameValuePairList* params);
 	public:
Index: OgreMain/include/OgreLodListener.h
===================================================================
--- OgreMain/include/OgreLodListener.h	(revision 9952)
+++ OgreMain/include/OgreLodListener.h	(working copy)
@@ -114,10 +114,12 @@
             also be called.  The postqueue method is invoked at an appropriate
             time after rendering and scene changes may be safely made there.
     */
-    class _OgreExport LodListener
+    class _OgreExport LodListener : public CLRObject
     {
     public:
-
+		DECLARE_INIT_CLROBJECT_METHOD_OVERRIDE(LodListener);
+	
+	public:
         virtual ~LodListener() {}
 
         /**
Index: OgreMain/include/OgreLodStrategy.h
===================================================================
--- OgreMain/include/OgreLodStrategy.h	(revision 9952)
+++ OgreMain/include/OgreLodStrategy.h	(working copy)
@@ -50,8 +50,10 @@
         getIndex, sort, and isSorted.
         In addition, transformUserValue may be overridden.
     */
-	class _OgreExport LodStrategy : public LodAlloc
+	class _OgreExport LodStrategy : public LodAlloc, public CLRObject
     {
+	public:
+		DECLARE_INIT_CLROBJECT_METHOD_OVERRIDE(LodStrategy);
     protected:
         /** Name of this strategy. */
         String mName;
Index: OgreMain/include/OgreLog.h
===================================================================
--- OgreMain/include/OgreLog.h	(revision 9952)
+++ OgreMain/include/OgreLog.h	(working copy)
@@ -91,6 +91,9 @@
     */
 	class _OgreExport Log : public LogAlloc
     {
+	public:
+		 DECLARE_CLRHANDLE;
+		 
     protected:
         std::ofstream	mfpLog;
         LoggingLevel	mLogLevel;
@@ -190,6 +193,9 @@
 		*/
 		class Stream
 		{
+		public:
+			 DECLARE_CLRHANDLE;
+			 
 		protected:
 			Log* mTarget;
 			LogMessageLevel mLevel;
Index: OgreMain/include/OgreManualObject.h
===================================================================
--- OgreMain/include/OgreManualObject.h	(revision 9952)
+++ OgreMain/include/OgreManualObject.h	(working copy)
@@ -106,6 +106,8 @@
 	class _OgreExport ManualObject : public MovableObject
 	{
 	public:
+		DECLARE_INIT_CLROBJECT_METHOD_OVERRIDE(ManualObject);
+		
 		ManualObject(const String& name);
 		virtual ~ManualObject();
 
@@ -393,8 +395,11 @@
 
 
 		/// Built, renderable section of geometry
-		class _OgreExport ManualObjectSection : public Renderable, public MovableAlloc
+		class _OgreExport ManualObjectSection : public Renderable, public MovableAlloc, public CLRObject
 		{
+		public:
+			DECLARE_INIT_CLROBJECT_METHOD_OVERRIDE(ManualObject_ManualObjectSection);
+			
 		protected:
 			ManualObject* mParent;
 			String mMaterialName;
@@ -440,6 +445,9 @@
 		/** Nested class to allow shadows. */
 		class _OgreExport ManualObjectSectionShadowRenderable : public ShadowRenderable
 		{
+		public:
+			DECLARE_INIT_CLROBJECT_METHOD_OVERRIDE(ManualObject_ManualObjectSectionShadowRenderable);
+			
 		protected:
 			ManualObject* mParent;
 			// Shared link to position buffer
@@ -541,6 +549,9 @@
 	/** Factory object for creating ManualObject instances */
 	class _OgreExport ManualObjectFactory : public MovableObjectFactory
 	{
+	public:
+		 DECLARE_INIT_CLROBJECT_METHOD_OVERRIDE(ManualObjectFactory);
+		 
 	protected:
 		MovableObject* createInstanceImpl( const String& name, const NameValuePairList* params);
 	public:
Index: OgreMain/include/OgreMaterial.h
===================================================================
--- OgreMain/include/OgreMaterial.h	(revision 9952)
+++ OgreMain/include/OgreMaterial.h	(working copy)
@@ -87,6 +87,9 @@
     */
     class _OgreExport Material : public Resource
     {
+	public:
+		DECLARE_INIT_CLROBJECT_METHOD_OVERRIDE(Material);
+		
         friend class SceneManager;
         friend class MaterialManager;
 
Index: OgreMain/include/OgreMesh.h
===================================================================
--- OgreMain/include/OgreMesh.h	(revision 9952)
+++ OgreMain/include/OgreMesh.h	(working copy)
@@ -90,6 +90,9 @@
 
     class _OgreExport Mesh: public Resource
     {
+	public:
+		DECLARE_INIT_CLROBJECT_METHOD_OVERRIDE(Mesh);
+		
         friend class SubMesh;
         friend class MeshSerializerImpl;
         friend class MeshSerializerImpl_v1_4;
Index: OgreMain/include/OgreMeshSerializer.h
===================================================================
--- OgreMain/include/OgreMeshSerializer.h	(revision 9952)
+++ OgreMain/include/OgreMeshSerializer.h	(working copy)
@@ -69,6 +69,8 @@
     class _OgreExport MeshSerializer : public Serializer
     {
     public:
+		DECLARE_INIT_CLROBJECT_METHOD_OVERRIDE(MeshSerializer);
+		
         MeshSerializer();
         virtual ~MeshSerializer();
 
Index: OgreMain/include/OgreMovableObject.h
===================================================================
--- OgreMain/include/OgreMovableObject.h	(revision 9952)
+++ OgreMain/include/OgreMovableObject.h	(working copy)
@@ -59,6 +59,8 @@
     class _OgreExport MovableObject : public ShadowCaster, public AnimableObject, public MovableAlloc
     {
     public:
+		DECLARE_INIT_CLROBJECT_METHOD_OVERRIDE(MovableObject);
+		
         /** Listener which gets called back on MovableObject events.
         */
         class _OgreExport Listener
@@ -556,8 +558,11 @@
 		to allow all clients to produce new instances of this object, integrated
 		with the standard Ogre processing.
 	*/
-	class _OgreExport MovableObjectFactory : public MovableAlloc
+	class _OgreExport MovableObjectFactory : public MovableAlloc, public CLRObject
 	{
+	public:
+		DECLARE_INIT_CLROBJECT_METHOD_OVERRIDE(MovableObjectFactory);
+		
 	protected:
 		/// Type flag, allocated if requested
 		unsigned long mTypeFlag;
Index: OgreMain/include/OgreMovablePlane.h
===================================================================
--- OgreMain/include/OgreMovablePlane.h	(revision 9952)
+++ OgreMain/include/OgreMovablePlane.h	(working copy)
@@ -52,6 +52,9 @@
     */
     class _OgreExport MovablePlane : public Plane, public MovableObject
     {
+	public:
+		DECLARE_INIT_CLROBJECT_METHOD_OVERRIDE(MovablePlane);
+		
     protected:
         mutable Plane mDerivedPlane;
         mutable Vector3 mLastTranslate;
Index: OgreMain/include/OgreNode.h
===================================================================
--- OgreMain/include/OgreNode.h	(revision 9952)
+++ OgreMain/include/OgreNode.h	(working copy)
@@ -59,9 +59,11 @@
             This is an abstract class - concrete classes are based on this for specific purposes,
             e.g. SceneNode, Bone
     */
-    class _OgreExport Node : public NodeAlloc
+    class _OgreExport Node : public NodeAlloc, public CLRObject
     {
     public:
+		DECLARE_INIT_CLROBJECT_METHOD_OVERRIDE(Node);
+		
         /** Enumeration denoting the spaces which a transform can be relative to.
         */
         enum TransformSpace
Index: OgreMain/include/OgreOverlay.h
===================================================================
--- OgreMain/include/OgreOverlay.h	(revision 9952)
+++ OgreMain/include/OgreOverlay.h	(working copy)
@@ -67,10 +67,12 @@
         don't want the overlay displayed in the smaller viewports. You turn this off for 
         a specific viewport by calling the Viewport::setDisplayOverlays method.
     */
-	class _OgreExport Overlay : public OverlayAlloc
+	class _OgreExport Overlay : public OverlayAlloc, public CLRObject
     {
 
     public:
+		DECLARE_INIT_CLROBJECT_METHOD_OVERRIDE(Overlay);
+		
               typedef list<OverlayContainer*>::type OverlayContainerList;
     protected:
         String mName;
Index: OgreMain/include/OgreOverlayContainer.h
===================================================================
--- OgreMain/include/OgreOverlayContainer.h	(revision 9952)
+++ OgreMain/include/OgreOverlayContainer.h	(working copy)
@@ -56,6 +56,8 @@
     class _OgreExport OverlayContainer : public OverlayElement
     {
     public:
+		DECLARE_INIT_CLROBJECT_METHOD_OVERRIDE(OverlayContainer);
+		
         typedef map<String, OverlayElement*>::type ChildMap;
         typedef MapIterator<ChildMap> ChildIterator;
         typedef map<String, OverlayContainer*>::type ChildContainerMap;
Index: OgreMain/include/OgreOverlayElement.h
===================================================================
--- OgreMain/include/OgreOverlayElement.h	(revision 9952)
+++ OgreMain/include/OgreOverlayElement.h	(working copy)
@@ -106,9 +106,10 @@
     Because this class is designed to be extensible, it subclasses from StringInterface
     so its parameters can be set in a generic way.
     */
-    class _OgreExport OverlayElement : public StringInterface, public Renderable, public OverlayAlloc
+    class _OgreExport OverlayElement : public StringInterface, public Renderable, public OverlayAlloc, public CLRObject
     {
     public:
+		DECLARE_INIT_CLROBJECT_METHOD_OVERRIDE(OverlayElement);
 
     protected:
         // Command object for setting / getting parameters
Index: OgreMain/include/OgreOverlayElementFactory.h
===================================================================
--- OgreMain/include/OgreOverlayElementFactory.h	(revision 9952)
+++ OgreMain/include/OgreOverlayElementFactory.h	(working copy)
@@ -54,9 +54,11 @@
         Each OverlayElementFactory creates a single type of OverlayElement, 
         identified by a 'type name' which must be unique.
     */
-	class _OgreExport OverlayElementFactory : public OverlayAlloc
+	class _OgreExport OverlayElementFactory : public OverlayAlloc, public CLRObject
     {
     public:
+		DECLARE_INIT_CLROBJECT_METHOD_OVERRIDE(OverlayElementFactory);
+		
         /** Destroy the overlay element factory */
         virtual ~OverlayElementFactory () {}
         /** Creates a new OverlayElement instance with the name supplied. */
@@ -72,6 +74,8 @@
     class _OgreExport PanelOverlayElementFactory: public OverlayElementFactory
     {
     public:
+		DECLARE_INIT_CLROBJECT_METHOD_OVERRIDE(PanelOverlayElementFactory);
+		
         /** See OverlayElementFactory */
         OverlayElement* createOverlayElement(const String& instanceName)
         {
@@ -89,6 +93,8 @@
     class _OgreExport BorderPanelOverlayElementFactory: public OverlayElementFactory
     {
     public:
+		 DECLARE_INIT_CLROBJECT_METHOD_OVERRIDE(BorderPanelOverlayElementFactory);
+		 
         /** See OverlayElementFactory */
         OverlayElement* createOverlayElement(const String& instanceName)
         {
@@ -106,6 +112,8 @@
     class _OgreExport TextAreaOverlayElementFactory: public OverlayElementFactory
     {
     public:
+		DECLARE_INIT_CLROBJECT_METHOD_OVERRIDE(TextAreaOverlayElementFactory);
+		
         /** See OverlayElementFactory */
         OverlayElement* createOverlayElement(const String& instanceName)
         {
Index: OgreMain/include/OgrePanelOverlayElement.h
===================================================================
--- OgreMain/include/OgrePanelOverlayElement.h	(revision 9952)
+++ OgreMain/include/OgrePanelOverlayElement.h	(working copy)
@@ -58,6 +58,8 @@
     class _OgreExport PanelOverlayElement : public OverlayContainer
     {
     public:
+		 DECLARE_INIT_CLROBJECT_METHOD_OVERRIDE(PanelOverlayElement);
+		 
         /** Constructor. */
         PanelOverlayElement(const String& name);
         virtual ~PanelOverlayElement();
Index: OgreMain/include/OgreParticle.h
===================================================================
--- OgreMain/include/OgreParticle.h	(revision 9952)
+++ OgreMain/include/OgreParticle.h	(working copy)
@@ -59,6 +59,9 @@
 	/** Class representing a single particle instance. */
 	class _OgreExport Particle : public FXAlloc
     {
+	public:
+		DECLARE_CLRHANDLE;
+		
     protected:
         /// Parent ParticleSystem
         ParticleSystem* mParentSystem;
Index: OgreMain/include/OgreParticleAffector.h
===================================================================
--- OgreMain/include/OgreParticleAffector.h	(revision 9952)
+++ OgreMain/include/OgreParticleAffector.h	(working copy)
@@ -60,8 +60,11 @@
         with literally infinite combinations of affector and affector types, and parameters within those
         types.
     */
-    class _OgreExport ParticleAffector : public StringInterface, public FXAlloc
+    class _OgreExport ParticleAffector : public StringInterface, public FXAlloc, public CLRObject
     {
+	public:
+		DECLARE_INIT_CLROBJECT_METHOD_OVERRIDE(ParticleAffector);
+		
     protected:
         /// Name of the type of affector, MUST be initialised by subclasses
         String mType;
Index: OgreMain/include/OgreParticleAffectorFactory.h
===================================================================
--- OgreMain/include/OgreParticleAffectorFactory.h	(revision 9952)
+++ OgreMain/include/OgreParticleAffectorFactory.h	(working copy)
@@ -51,8 +51,11 @@
         a name which identifies them, examples might be 'force_vector', 'attractor', or 'fader', and these can be 
         also be used from particle system scripts.
     */
-	class _OgreExport ParticleAffectorFactory : public FXAlloc
+	class _OgreExport ParticleAffectorFactory : public FXAlloc, public CLRObject
     {
+	public:
+		DECLARE_INIT_CLROBJECT_METHOD_OVERRIDE(ParticleAffectorFactory);
+		
     protected:
         vector<ParticleAffector*>::type mAffectors;
     public:
Index: OgreMain/include/OgreParticleEmitter.h
===================================================================
--- OgreMain/include/OgreParticleEmitter.h	(revision 9952)
+++ OgreMain/include/OgreParticleEmitter.h	(working copy)
@@ -68,8 +68,11 @@
         with literally infinite combinations of emitter and affector types, and paramters within those
         types.
     */
-    class _OgreExport ParticleEmitter : public StringInterface, public Particle
+    class _OgreExport ParticleEmitter : public StringInterface, public Particle, public CLRObject
     {
+	public:
+		DECLARE_INIT_CLROBJECT_METHOD_OVERRIDE(ParticleEmitter);
+		
     protected:
 
         // Command object for setting / getting parameters
Index: OgreMain/include/OgreParticleEmitterFactory.h
===================================================================
--- OgreMain/include/OgreParticleEmitterFactory.h	(revision 9952)
+++ OgreMain/include/OgreParticleEmitterFactory.h	(working copy)
@@ -52,8 +52,11 @@
         a name which identifies them, examples might be 'point', 'cone', or 'box', and these can be 
         also be used from particle system scripts.
     */
-	class _OgreExport ParticleEmitterFactory : public FXAlloc
+	class _OgreExport ParticleEmitterFactory : public FXAlloc, public CLRObject
     {
+	public:
+		DECLARE_INIT_CLROBJECT_METHOD_OVERRIDE(ParticleEmitterFactory);
+		
     protected:
         vector<ParticleEmitter*>::type mEmitters;
     public:
Index: OgreMain/include/OgreParticleSystem.h
===================================================================
--- OgreMain/include/OgreParticleSystem.h	(revision 9952)
+++ OgreMain/include/OgreParticleSystem.h	(working copy)
@@ -66,7 +66,8 @@
     class _OgreExport ParticleSystem : public StringInterface, public MovableObject
     {
     public:
-
+		DECLARE_INIT_CLROBJECT_METHOD_OVERRIDE(ParticleSystem);
+		
         /** Command object for quota (see ParamCommand).*/
         class _OgrePrivate CmdQuota : public ParamCommand
         {
Index: OgreMain/include/OgreParticleSystemManager.h
===================================================================
--- OgreMain/include/OgreParticleSystemManager.h	(revision 9952)
+++ OgreMain/include/OgreParticleSystemManager.h	(working copy)
@@ -385,6 +385,9 @@
 	/** Factory object for creating ParticleSystem instances */
 	class _OgreExport ParticleSystemFactory : public MovableObjectFactory
 	{
+	public:
+		DECLARE_INIT_CLROBJECT_METHOD_OVERRIDE(ParticleSystemFactory);
+		
 	protected:
 		MovableObject* createInstanceImpl(const String& name, const NameValuePairList* params);
 	public:
Index: OgreMain/include/OgreParticleSystemRenderer.h
===================================================================
--- OgreMain/include/OgreParticleSystemRenderer.h	(revision 9952)
+++ OgreMain/include/OgreParticleSystemRenderer.h	(working copy)
@@ -46,9 +46,11 @@
 	/** Abstract class defining the interface required to be implemented
         by classes which provide rendering capability to ParticleSystem instances.
     */
-    class _OgreExport ParticleSystemRenderer : public StringInterface, public FXAlloc
+    class _OgreExport ParticleSystemRenderer : public StringInterface, public FXAlloc, public CLRObject
     {
     public:
+		 DECLARE_INIT_CLROBJECT_METHOD_OVERRIDE(ParticleSystemRenderer);
+		 
         /// Constructor
         ParticleSystemRenderer() {}
         /// Destructor
Index: OgreMain/include/OgrePass.h
===================================================================
--- OgreMain/include/OgrePass.h	(revision 9952)
+++ OgreMain/include/OgrePass.h	(working copy)
@@ -80,6 +80,8 @@
 	class _OgreExport Pass : public PassAlloc
     {
 	public:
+		DECLARE_CLRHANDLE;
+		
 		/** Definition of a functor for calculating the hashcode of a Pass.
 		@remarks
 			The hashcode of a Pass is used to sort Passes for rendering, in order
Index: OgreMain/include/OgrePatchMesh.h
===================================================================
--- OgreMain/include/OgrePatchMesh.h	(revision 9952)
+++ OgreMain/include/OgrePatchMesh.h	(working copy)
@@ -46,6 +46,9 @@
     */
     class _OgreExport PatchMesh : public Mesh
     {
+	public:
+		DECLARE_INIT_CLROBJECT_METHOD_OVERRIDE(PatchMesh);
+		
     protected:
         /// Internal surface definition
         PatchSurface mSurface;
Index: OgreMain/include/OgrePatchSurface.h
===================================================================
--- OgreMain/include/OgrePatchSurface.h	(revision 9952)
+++ OgreMain/include/OgrePatchSurface.h	(working copy)
@@ -52,6 +52,8 @@
 	class _OgreExport PatchSurface : public PatchAlloc
     {
     public:
+		DECLARE_CLRHANDLE;
+		
         PatchSurface();
         ~PatchSurface();
 
Index: OgreMain/include/OgrePixelCountLodStrategy.h
===================================================================
--- OgreMain/include/OgrePixelCountLodStrategy.h	(revision 9952)
+++ OgreMain/include/OgrePixelCountLodStrategy.h	(working copy)
@@ -45,6 +45,8 @@
 	/** Level of detail strategy based on pixel count approximation from bounding sphere projection. */
     class _OgreExport PixelCountLodStrategy : public LodStrategy, public Singleton<PixelCountLodStrategy>
     {
+	public:
+		DECLARE_INIT_CLROBJECT_METHOD_OVERRIDE(PixelCountLodStrategy);
     protected:
         /// @copydoc LodStrategy::getValueImpl
         virtual Real getValueImpl(const MovableObject *movableObject, const Camera *camera) const;
Index: OgreMain/include/OgrePlaneBoundedVolume.h
===================================================================
--- OgreMain/include/OgrePlaneBoundedVolume.h	(revision 9952)
+++ OgreMain/include/OgrePlaneBoundedVolume.h	(working copy)
@@ -48,6 +48,8 @@
     class _OgreExport PlaneBoundedVolume
     {
     public:
+		DECLARE_CLRHANDLE;
+		
         typedef vector<Plane>::type PlaneList;
         /// Publicly accessible plane list, you can modify this direct
         PlaneList planes;
Index: OgreMain/include/OgrePose.h
===================================================================
--- OgreMain/include/OgrePose.h	(revision 9952)
+++ OgreMain/include/OgrePose.h	(working copy)
@@ -51,9 +51,11 @@
 		Pose instances can be referred to by keyframes in VertexAnimationTrack in
 		order to animate based on blending poses together.
 	*/
-	class _OgreExport Pose : public AnimationAlloc
+	class _OgreExport Pose : public AnimationAlloc, public CLRObject
 	{
 	public:
+		DECLARE_INIT_CLROBJECT_METHOD_OVERRIDE(Pose);
+		
 		/** Constructor
 			@param target The target vertexdata index (0 for shared, 1+ for 
 				dedicated at the submesh index + 1)
Index: OgreMain/include/OgrePrerequisites.h
===================================================================
--- OgreMain/include/OgrePrerequisites.h	(revision 9952)
+++ OgreMain/include/OgrePrerequisites.h	(working copy)
@@ -315,7 +315,10 @@
 #include "OgreStdHeaders.h"
 #include "OgreMemoryAllocatorConfig.h"
 
+#include "CLRObject.h"
+#include "CLRHandle.h"
 
+
 namespace Ogre
 {
 #if OGRE_STRING_USE_CUSTOM_MEMORY_ALLOCATOR
@@ -437,9 +440,9 @@
 	#endif
 
 	#if OGRE_WCHAR_T_STRINGS
-		typedef std::basic_stringstream<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > _StringStreamBase;
+		typedef std::wstringstream _StringStreamBase;
 	#else
-		typedef std::basic_stringstream<char,std::char_traits<char>,std::allocator<char> > _StringStreamBase;
+		typedef std::stringstream _StringStreamBase;
 	#endif
 
 #endif
Index: OgreMain/include/OgreProgressiveMesh.h
===================================================================
--- OgreMain/include/OgreProgressiveMesh.h	(revision 9952)
+++ OgreMain/include/OgreProgressiveMesh.h	(working copy)
@@ -61,10 +61,11 @@
         NB the interface of this class will certainly change when compiled vertex buffers are
         supported.
     */
-	class _OgreExport ProgressiveMesh : public ProgMeshAlloc
+	class _OgreExport ProgressiveMesh : public ProgMeshAlloc, public CLRObject
     {
     public:
-
+		DECLARE_INIT_CLROBJECT_METHOD_OVERRIDE(ProgressiveMesh);
+		
 		/** The way to derive the quota of vertices which are reduced at each LOD. */
         enum VertexReductionQuota
 		{
Index: OgreMain/include/OgreRectangle2D.h
===================================================================
--- OgreMain/include/OgreRectangle2D.h	(revision 9952)
+++ OgreMain/include/OgreRectangle2D.h	(working copy)
@@ -48,6 +48,9 @@
     */
     class _OgreExport Rectangle2D : public SimpleRenderable
     {
+	public:
+		 DECLARE_INIT_CLROBJECT_METHOD_OVERRIDE(Rectangle2D);
+		 
     protected:
         /** Override this method to prevent parent transforms (rotation,translation,scale)
         */
Index: OgreMain/include/OgreRenderObjectListener.h
===================================================================
--- OgreMain/include/OgreRenderObjectListener.h	(revision 9952)
+++ OgreMain/include/OgreRenderObjectListener.h	(working copy)
@@ -40,9 +40,11 @@
     /** Abstract interface which classes must implement if they wish to receive
         events from the scene manager when single object is about to be rendered. 
     */
-	class _OgreExport RenderObjectListener
+	class _OgreExport RenderObjectListener : public CLRObject
 	{
 	public:
+       DECLARE_INIT_CLROBJECT_METHOD_OVERRIDE(RenderObjectListener);
+	public:
 		virtual ~RenderObjectListener() {}
 		/** Event raised when render single object started.
 		@remarks
Index: OgreMain/include/OgreRenderOperation.h
===================================================================
--- OgreMain/include/OgreRenderOperation.h	(revision 9952)
+++ OgreMain/include/OgreRenderOperation.h	(working copy)
@@ -43,6 +43,8 @@
 	/** 'New' rendering operation using vertex buffers. */
 	class _OgrePrivate RenderOperation {
 	public:
+		DECLARE_CLRHANDLE;
+		 
 		/// The rendering operation type to perform
 		enum OperationType {
 			/// A list of points, 1 vertex per point
Index: OgreMain/include/OgreRenderQueue.h
===================================================================
--- OgreMain/include/OgreRenderQueue.h	(revision 9952)
+++ OgreMain/include/OgreRenderQueue.h	(working copy)
@@ -89,9 +89,11 @@
             backgrounds and overlays, and also could be used in the future for more
             complex multipass routines like stenciling.
     */
-    class _OgreExport RenderQueue : public RenderQueueAlloc
+    class _OgreExport RenderQueue : public RenderQueueAlloc, public CLRObject
     {
     public:
+		DECLARE_INIT_CLROBJECT_METHOD_OVERRIDE(RenderQueue);
+		
         typedef map< uint8, RenderQueueGroup* >::type RenderQueueGroupMap;
         /// Iterator over queue groups
         typedef MapIterator<RenderQueueGroupMap> QueueGroupIterator;
Index: OgreMain/include/OgreRenderQueueInvocation.h
===================================================================
--- OgreMain/include/OgreRenderQueueInvocation.h	(revision 9952)
+++ OgreMain/include/OgreRenderQueueInvocation.h	(working copy)
@@ -63,8 +63,11 @@
 		them being rendered - for example special-case render queues and
 		render queue listeners that dictate this.
 	*/
-	class _OgreExport RenderQueueInvocation : public RenderQueueAlloc
+	class _OgreExport RenderQueueInvocation : public RenderQueueAlloc, public CLRObject
 	{
+	public:
+		 DECLARE_INIT_CLROBJECT_METHOD_OVERRIDE(RenderQueueInvocation);
+		 
 	protected:
 		/// Target queue group
 		uint8 mRenderQueueGroupID;
@@ -170,8 +173,11 @@
 		that any invocation instances you give to this class will be deleted
 		by it when it is cleared / destroyed.
 	*/
-	class _OgreExport RenderQueueInvocationSequence : public RenderQueueAlloc
+	class _OgreExport RenderQueueInvocationSequence : public RenderQueueAlloc, public CLRObject
 	{
+	public:
+		DECLARE_INIT_CLROBJECT_METHOD_OVERRIDE(RenderQueueInvocationSequence);
+		
 	protected:
 		String mName;
 		RenderQueueInvocationList mInvocations;
Index: OgreMain/include/OgreRenderQueueSortingGrouping.h
===================================================================
--- OgreMain/include/OgreRenderQueueSortingGrouping.h	(revision 9952)
+++ OgreMain/include/OgreRenderQueueSortingGrouping.h	(working copy)
@@ -322,6 +322,9 @@
     */
     class _OgreExport RenderPriorityGroup : public RenderQueueAlloc
     {
+	public:
+		DECLARE_CLRHANDLE;
+		
 	protected:
 
 		/// Parent queue group
@@ -465,6 +468,8 @@
     class _OgreExport RenderQueueGroup : public RenderQueueAlloc
     {
     public:
+		DECLARE_CLRHANDLE;
+		
         typedef map<ushort, RenderPriorityGroup*, std::less<ushort> >::type PriorityMap;
         typedef MapIterator<PriorityMap> PriorityMapIterator;
         typedef ConstMapIterator<PriorityMap> ConstPriorityMapIterator;
Index: OgreMain/include/OgreRenderSystem.h
===================================================================
--- OgreMain/include/OgreRenderSystem.h	(revision 9952)
+++ OgreMain/include/OgreRenderSystem.h	(working copy)
@@ -118,9 +118,11 @@
 	@version
 	1.0
 	*/
-	class _OgreExport RenderSystem : public RenderSysAlloc
+	class _OgreExport RenderSystem : public RenderSysAlloc, public CLRObject
 	{
 	public:
+		 DECLARE_INIT_CLROBJECT_METHOD_OVERRIDE(RenderSystem);
+		 
 		/** Default Constructor.
 		*/
 		RenderSystem();
Index: OgreMain/include/OgreRenderSystemCapabilities.h
===================================================================
--- OgreMain/include/OgreRenderSystemCapabilities.h	(revision 9952)
+++ OgreMain/include/OgreRenderSystemCapabilities.h	(working copy)
@@ -235,7 +235,8 @@
 	{
 
 	public:
-
+		DECLARE_CLRHANDLE;
+		
 		typedef set<String>::type ShaderProfiles;
 	private:
 		/// This is used to build a database of RSC's
Index: OgreMain/include/OgreRenderTarget.h
===================================================================
--- OgreMain/include/OgreRenderTarget.h	(revision 9952)
+++ OgreMain/include/OgreRenderTarget.h	(working copy)
@@ -61,9 +61,11 @@
         @version
             1.0
      */
-    class _OgreExport RenderTarget : public RenderSysAlloc
+    class _OgreExport RenderTarget : public RenderSysAlloc, public CLRObject
     {
     public:
+		DECLARE_INIT_CLROBJECT_METHOD_OVERRIDE(RenderTarget);
+		
         enum StatFlags
         {
             SF_NONE           = 0,
Index: OgreMain/include/OgreRenderTexture.h
===================================================================
--- OgreMain/include/OgreRenderTexture.h	(revision 9952)
+++ OgreMain/include/OgreRenderTexture.h	(working copy)
@@ -48,6 +48,8 @@
     class _OgreExport RenderTexture: public RenderTarget
     {
     public:
+		DECLARE_INIT_CLROBJECT_METHOD_OVERRIDE(RenderTexture);
+		
         RenderTexture(HardwarePixelBuffer *buffer, size_t zoffset);
         virtual ~RenderTexture();
 
@@ -69,6 +71,8 @@
 	class _OgreExport MultiRenderTarget: public RenderTarget
 	{
 	public:
+		DECLARE_INIT_CLROBJECT_METHOD_OVERRIDE(MultiRenderTarget);
+		
 		MultiRenderTarget(const String &name);
 
 		/** Bind a surface to a certain attachment point.
Index: OgreMain/include/OgreRenderToVertexBuffer.h
===================================================================
--- OgreMain/include/OgreRenderToVertexBuffer.h	(revision 9952)
+++ OgreMain/include/OgreRenderToVertexBuffer.h	(working copy)
@@ -48,9 +48,11 @@
         that run on previous results of those shaders, creating stateful 
         shaders.
     */
-    class _OgreExport RenderToVertexBuffer
+    class _OgreExport RenderToVertexBuffer : public CLRObject
     {    
     public:
+		 DECLARE_INIT_CLROBJECT_METHOD_OVERRIDE(RenderToVertexBuffer);
+		 
 		/** C'tor */
 		RenderToVertexBuffer();
 		/** D'tor */
Index: OgreMain/include/OgreRenderWindow.h
===================================================================
--- OgreMain/include/OgreRenderWindow.h	(revision 9952)
+++ OgreMain/include/OgreRenderWindow.h	(working copy)
@@ -63,6 +63,8 @@
     {
 
     public:
+		DECLARE_INIT_CLROBJECT_METHOD_OVERRIDE(RenderWindow);
+		
         /** Default constructor.
         */
         RenderWindow();
Index: OgreMain/include/OgreResource.h
===================================================================
--- OgreMain/include/OgreResource.h	(revision 9952)
+++ OgreMain/include/OgreResource.h	(working copy)
@@ -74,9 +74,11 @@
 				through a generic interface.</li>
 			</ol>
     */
-	class _OgreExport Resource : public StringInterface, public ResourceAlloc
+	class _OgreExport Resource : public StringInterface, public ResourceAlloc, public CLRObject
     {
 	public:
+		DECLARE_INIT_CLROBJECT_METHOD_OVERRIDE(Resource);
+		 
 		OGRE_AUTO_MUTEX // public to allow external locking
 		class Listener
 		{
Index: OgreMain/include/OgreResourceBackgroundQueue.h
===================================================================
--- OgreMain/include/OgreResourceBackgroundQueue.h	(revision 9952)
+++ OgreMain/include/OgreResourceBackgroundQueue.h	(working copy)
@@ -49,6 +49,8 @@
 	/** Encapsulates the result of a background queue request */
 	struct BackgroundProcessResult
 	{
+		DECLARE_CLRHANDLE;
+		
 		/// Whether an error occurred
 		bool error;
 		/// Any messages from the process
Index: OgreMain/include/OgreRibbonTrail.h
===================================================================
--- OgreMain/include/OgreRibbonTrail.h	(revision 9952)
+++ OgreMain/include/OgreRibbonTrail.h	(working copy)
@@ -70,6 +70,8 @@
 	class _OgreExport RibbonTrail : public BillboardChain, public Node::Listener
 	{
 	public:
+		DECLARE_INIT_CLROBJECT_METHOD_OVERRIDE(RibbonTrail);
+		
 		/** Constructor (don't use directly, use factory) 
 		@param name The name to give this object
 		@param maxElements The maximum number of elements per chain
@@ -225,6 +227,9 @@
 	/** Factory object for creating RibbonTrail instances */
 	class _OgreExport RibbonTrailFactory : public MovableObjectFactory
 	{
+	public:
+		DECLARE_INIT_CLROBJECT_METHOD_OVERRIDE(RibbonTrailFactory);
+		
 	protected:
 		MovableObject* createInstanceImpl( const String& name, const NameValuePairList* params);
 	public:
Index: OgreMain/include/OgreRotationalSpline.h
===================================================================
--- OgreMain/include/OgreRotationalSpline.h	(revision 9952)
+++ OgreMain/include/OgreRotationalSpline.h	(working copy)
@@ -57,6 +57,8 @@
 	class _OgreExport RotationalSpline
     {
     public:
+		DECLARE_CLRHANDLE;
+		
         RotationalSpline();
         ~RotationalSpline();
 
Index: OgreMain/include/OgreSceneManager.h
===================================================================
--- OgreMain/include/OgreSceneManager.h	(revision 9952)
+++ OgreMain/include/OgreSceneManager.h	(working copy)
@@ -136,9 +136,11 @@
 		dependent on the Camera, which will always call back the SceneManager
 		which created it to render the scene. 
      */
-	class _OgreExport SceneManager : public SceneMgtAlloc
+	class _OgreExport SceneManager : public SceneMgtAlloc, public CLRObject
     {
     public:
+		 DECLARE_INIT_CLROBJECT_METHOD_OVERRIDE(SceneManager);
+		 
         /// Query type mask which will be used for world geometry @see SceneQuery
         static uint32 WORLD_GEOMETRY_TYPE_MASK;
 		/// Query type mask which will be used for entities @see SceneQuery
@@ -3465,8 +3467,11 @@
 
 
 	/** Class which will create instances of a given SceneManager. */
-	class _OgreExport SceneManagerFactory : public SceneMgtAlloc
+	class _OgreExport SceneManagerFactory : public SceneMgtAlloc, public CLRObject
 	{
+	public:
+		DECLARE_INIT_CLROBJECT_METHOD_OVERRIDE(SceneManagerFactory);
+		
 	protected:
 		mutable SceneManagerMetaData mMetaData;
 		mutable bool mMetaDataInit;
Index: OgreMain/include/OgreSceneManagerEnumerator.h
===================================================================
--- OgreMain/include/OgreSceneManagerEnumerator.h	(revision 9952)
+++ OgreMain/include/OgreSceneManagerEnumerator.h	(working copy)
@@ -45,6 +45,9 @@
 	/// Factory for default scene manager
 	class _OgreExport DefaultSceneManagerFactory : public SceneManagerFactory
 	{
+	public:
+		DECLARE_INIT_CLROBJECT_METHOD_OVERRIDE(DefaultSceneManagerFactory);
+		
 	protected:
 		void initMetaData(void) const;
 	public:
Index: OgreMain/include/OgreSceneNode.h
===================================================================
--- OgreMain/include/OgreSceneNode.h	(revision 9952)
+++ OgreMain/include/OgreSceneNode.h	(working copy)
@@ -57,6 +57,8 @@
     class _OgreExport SceneNode : public Node
     {
     public:
+		DECLARE_INIT_CLROBJECT_METHOD_OVERRIDE(SceneNode);
+		
         typedef HashMap<String, MovableObject*> ObjectMap;
         typedef MapIterator<ObjectMap> ObjectIterator;
 		typedef ConstMapIterator<ObjectMap> ConstObjectIterator;
Index: OgreMain/include/OgreSceneQuery.h
===================================================================
--- OgreMain/include/OgreSceneQuery.h	(revision 9952)
+++ OgreMain/include/OgreSceneQuery.h	(working copy)
@@ -70,9 +70,11 @@
         using the SceneManager interfaces for the type of query required, e.g.
         SceneManager::createSphereSceneQuery.
     */
-	class _OgreExport SceneQuery : public SceneMgtAlloc
+	class _OgreExport SceneQuery : public SceneMgtAlloc, public CLRObject
     {
     public:
+		DECLARE_INIT_CLROBJECT_METHOD_OVERRIDE(SceneQuery);
+		
         /** This type can be used by collaborating applications & SceneManagers to 
             agree on the type of world geometry to be returned from queries. Not all
             these types will be supported by all SceneManagers; once the application
@@ -222,6 +224,9 @@
     class _OgreExport RegionSceneQuery
         : public SceneQuery, public SceneQueryListener
     {
+	public:
+		 DECLARE_INIT_CLROBJECT_METHOD_OVERRIDE(RegionSceneQuery);
+		 
     protected:
         SceneQueryResult* mLastResult;
     public:
@@ -268,6 +273,9 @@
     /** Specialises the SceneQuery class for querying within an axis aligned box. */
     class _OgreExport AxisAlignedBoxSceneQuery : public RegionSceneQuery
     {
+	public:
+		DECLARE_INIT_CLROBJECT_METHOD_OVERRIDE(AxisAlignedBoxSceneQuery);
+		
     protected:
         AxisAlignedBox mAABB;
     public:
@@ -285,6 +293,9 @@
     /** Specialises the SceneQuery class for querying within a sphere. */
     class _OgreExport SphereSceneQuery : public RegionSceneQuery
     {
+	public:
+		DECLARE_INIT_CLROBJECT_METHOD_OVERRIDE(SphereSceneQuery);
+		
     protected:
         Sphere mSphere;
     public:
@@ -302,6 +313,9 @@
     */
     class _OgreExport PlaneBoundedVolumeListSceneQuery : public RegionSceneQuery
     {
+	public:
+		DECLARE_INIT_CLROBJECT_METHOD_OVERRIDE(PlaneBoundedVolumeListSceneQuery);
+		
     protected:
         PlaneBoundedVolumeList mVolumes;
     public:
@@ -374,6 +388,9 @@
     /** Specialises the SceneQuery class for querying along a ray. */
     class _OgreExport RaySceneQuery : public SceneQuery, public RaySceneQueryListener
     {
+	public:
+		DECLARE_INIT_CLROBJECT_METHOD_OVERRIDE(RaySceneQuery);
+		
     protected:
         Ray mRay;
         bool mSortByDistance;
@@ -511,6 +528,9 @@
     class _OgreExport IntersectionSceneQuery
         : public SceneQuery, public IntersectionSceneQueryListener 
     {
+	public:
+		 DECLARE_INIT_CLROBJECT_METHOD_OVERRIDE(IntersectionSceneQuery);
+		 
     protected:
         IntersectionSceneQueryResult* mLastResult;
     public:
Index: OgreMain/include/OgreSerializer.h
===================================================================
--- OgreMain/include/OgreSerializer.h	(revision 9952)
+++ OgreMain/include/OgreSerializer.h	(working copy)
@@ -46,9 +46,11 @@
         This class provides a number of useful methods for exporting / importing data
         from stream-oriented binary files (e.g. .mesh and .skeleton).
     */
-	class _OgreExport Serializer : public SerializerAlloc
+	class _OgreExport Serializer : public SerializerAlloc, public CLRObject
     {
     public:
+		DECLARE_INIT_CLROBJECT_METHOD_OVERRIDE(Serializer);
+		
         Serializer();
         virtual ~Serializer();
 
Index: OgreMain/include/OgreShadowCameraSetup.h
===================================================================
--- OgreMain/include/OgreShadowCameraSetup.h	(revision 9952)
+++ OgreMain/include/OgreShadowCameraSetup.h	(working copy)
@@ -65,9 +65,11 @@
 		degrees of freedom.  This class is meant to allow custom methods for 
 		handling optimization.
     */
-	class _OgreExport ShadowCameraSetup : public ShadowDataAlloc
+	class _OgreExport ShadowCameraSetup : public ShadowDataAlloc, public CLRObject
 	{
 	public:
+		DECLARE_INIT_CLROBJECT_METHOD_OVERRIDE(ShadowCameraSetup);
+		
 		/// Function to implement -- must set the shadow camera properties
 		virtual void getShadowCamera (const SceneManager *sm, const Camera *cam, 
 									  const Viewport *vp, const Light *light, Camera *texCam, size_t iteration) const = 0;
@@ -86,6 +88,8 @@
 	class _OgreExport DefaultShadowCameraSetup : public ShadowCameraSetup
 	{
 	public:
+		DECLARE_INIT_CLROBJECT_METHOD_OVERRIDE(DefaultShadowCameraSetup);
+		
 		/// Default constructor
 		DefaultShadowCameraSetup();
 		/// Destructor
Index: OgreMain/include/OgreShadowCameraSetupFocused.h
===================================================================
--- OgreMain/include/OgreShadowCameraSetupFocused.h	(revision 9952)
+++ OgreMain/include/OgreShadowCameraSetupFocused.h	(working copy)
@@ -56,6 +56,9 @@
 	*/
 	class _OgreExport FocusedShadowCameraSetup : public ShadowCameraSetup
 	{
+	public:
+		DECLARE_INIT_CLROBJECT_METHOD_OVERRIDE(FocusedShadowCameraSetup);
+		
 	protected:
 		/** Transform to or from light space as defined by Wimmer et al.
 		@remarks
Index: OgreMain/include/OgreShadowCameraSetupLiSPSM.h
===================================================================
--- OgreMain/include/OgreShadowCameraSetupLiSPSM.h	(revision 9952)
+++ OgreMain/include/OgreShadowCameraSetupLiSPSM.h	(working copy)
@@ -97,6 +97,9 @@
 	*/
 	class _OgreExport LiSPSMShadowCameraSetup : public FocusedShadowCameraSetup
 	{
+	public:
+		DECLARE_INIT_CLROBJECT_METHOD_OVERRIDE(LiSPSMShadowCameraSetup);
+		
 	protected:
 		/// Warp factor adjustment
 		Real mOptAdjustFactor;
Index: OgreMain/include/OgreShadowCameraSetupPlaneOptimal.h
===================================================================
--- OgreMain/include/OgreShadowCameraSetupPlaneOptimal.h	(revision 9952)
+++ OgreMain/include/OgreShadowCameraSetupPlaneOptimal.h	(working copy)
@@ -60,6 +60,9 @@
     */
 	class _OgreExport PlaneOptimalShadowCameraSetup : public ShadowCameraSetup
 	{
+	public:
+		DECLARE_INIT_CLROBJECT_METHOD_OVERRIDE(PlaneOptimalShadowCameraSetup);
+		
 	private:
 		MovablePlane* m_plane;	///< pointer to plane of interest
 	private:
Index: OgreMain/include/OgreShadowCaster.h
===================================================================
--- OgreMain/include/OgreShadowCaster.h	(revision 9952)
+++ OgreMain/include/OgreShadowCaster.h	(working copy)
@@ -49,8 +49,11 @@
         vertex buffers (not necessarily one buffer, but the positions for the entire geometry 
         should come from one buffer if possible)
     */
-    class _OgreExport ShadowRenderable : public Renderable, public ShadowDataAlloc
+    class _OgreExport ShadowRenderable : public Renderable, public ShadowDataAlloc, public CLRObject
     {
+	public:
+		DECLARE_INIT_CLROBJECT_METHOD_OVERRIDE(ShadowRenderable);
+		
     protected:
         MaterialPtr mMaterial;
         RenderOperation mRenderOp;
@@ -106,9 +109,11 @@
 
     /** This class defines the interface that must be implemented by shadow casters.
     */
-    class _OgreExport ShadowCaster
+    class _OgreExport ShadowCaster : public CLRObject
     {
     public:
+		 DECLARE_INIT_CLROBJECT_METHOD_OVERRIDE(ShadowCaster);
+		 
         virtual ~ShadowCaster() { }
         /** Returns whether or not this object currently casts a shadow. */
         virtual bool getCastShadows(void) const = 0;
Index: OgreMain/include/OgreSimpleRenderable.h
===================================================================
--- OgreMain/include/OgreSimpleRenderable.h	(revision 9952)
+++ OgreMain/include/OgreSimpleRenderable.h	(working copy)
@@ -48,6 +48,9 @@
 	*/
 	class _OgreExport SimpleRenderable : public MovableObject, public Renderable
     {
+	public:
+		DECLARE_INIT_CLROBJECT_METHOD_OVERRIDE(SimpleRenderable);
+		
     protected:
         RenderOperation mRenderOp;
 
Index: OgreMain/include/OgreSimpleSpline.h
===================================================================
--- OgreMain/include/OgreSimpleSpline.h	(revision 9952)
+++ OgreMain/include/OgreSimpleSpline.h	(working copy)
@@ -56,6 +56,8 @@
 	class _OgreExport SimpleSpline
     {
     public:
+		DECLARE_CLRHANDLE;
+		
         SimpleSpline();
         ~SimpleSpline();
 
Index: OgreMain/include/OgreSkeleton.h
===================================================================
--- OgreMain/include/OgreSkeleton.h	(revision 9952)
+++ OgreMain/include/OgreSkeleton.h	(working copy)
@@ -84,6 +84,9 @@
     */
     class _OgreExport Skeleton : public Resource
     {
+	public:
+		DECLARE_INIT_CLROBJECT_METHOD_OVERRIDE(Skeleton);
+		
 		friend class SkeletonInstance;
 	protected:
 		/// Internal constructor for use by SkeletonInstance only
Index: OgreMain/include/OgreSkeletonInstance.h
===================================================================
--- OgreMain/include/OgreSkeletonInstance.h	(revision 9952)
+++ OgreMain/include/OgreSkeletonInstance.h	(working copy)
@@ -52,6 +52,8 @@
     class _OgreExport SkeletonInstance : public Skeleton
     {
     public:
+		DECLARE_INIT_CLROBJECT_METHOD_OVERRIDE(SkeletonInstance);
+		
         /** Constructor, don't call directly, this will be created automatically
         when you create an Entity based on a skeletally animated Mesh.
         */
Index: OgreMain/include/OgreSkeletonSerializer.h
===================================================================
--- OgreMain/include/OgreSkeletonSerializer.h	(revision 9952)
+++ OgreMain/include/OgreSkeletonSerializer.h	(working copy)
@@ -56,6 +56,8 @@
     class _OgreExport SkeletonSerializer : public Serializer
     {
     public:
+		DECLARE_INIT_CLROBJECT_METHOD_OVERRIDE(SkeletonSerializer);
+		
         SkeletonSerializer();
         virtual ~SkeletonSerializer();
 
Index: OgreMain/include/OgreStaticGeometry.h
===================================================================
--- OgreMain/include/OgreStaticGeometry.h	(revision 9952)
+++ OgreMain/include/OgreStaticGeometry.h	(working copy)
@@ -117,9 +117,11 @@
 		Warning: this class only works with indexed triangle lists at the moment,
 		do not pass it triangle strips, fans or lines / points, or unindexed geometry.
 	*/
-	class _OgreExport StaticGeometry : public BatchedGeometryAlloc
+	class _OgreExport StaticGeometry : public BatchedGeometryAlloc, public CLRObject
 	{
 	public:
+		DECLARE_INIT_CLROBJECT_METHOD_OVERRIDE(StaticGeometry);
+		
 		/** Struct holding geometry optimised per SubMesh / lod level, ready
 			for copying to instances. 
 		@remarks
@@ -254,6 +256,8 @@
 		class _OgreExport MaterialBucket : public BatchedGeometryAlloc
 		{
 		public:
+			DECLARE_CLRHANDLE;
+			
 			/// list of Geometry Buckets in this region
 			typedef vector<GeometryBucket*>::type GeometryBucketList;
 		protected:
@@ -307,6 +311,8 @@
 		class _OgreExport LODBucket : public BatchedGeometryAlloc
 		{
 		public:
+			DECLARE_CLRHANDLE;
+			
 			/// Lookup of Material Buckets in this region
 			typedef map<String, MaterialBucket*>::type MaterialBucketMap;
 		protected:
@@ -388,9 +394,11 @@
 		*/
 		class _OgreExport Region : public MovableObject
 		{
+		public:
+			DECLARE_INIT_CLROBJECT_METHOD_OVERRIDE(StaticGeometry_Region);
+			
             friend class MaterialBucket;
             friend class GeometryBucket;
-		public:
 			/// list of LOD Buckets in this region
 			typedef vector<LODBucket*>::type LODBucketList;
 		protected:
Index: OgreMain/include/OgreSubEntity.h
===================================================================
--- OgreMain/include/OgreSubEntity.h	(revision 9952)
+++ OgreMain/include/OgreSubEntity.h	(working copy)
@@ -59,8 +59,11 @@
             the same time as their parent Entity by the SceneManager method
             createEntity.
     */
-    class _OgreExport SubEntity: public Renderable, public SubEntityAlloc
+    class _OgreExport SubEntity: public Renderable, public SubEntityAlloc, public CLRObject
     {
+	public:
+		DECLARE_INIT_CLROBJECT_METHOD_OVERRIDE(SubEntity);
+		 
         // Note no virtual functions for efficiency
         friend class Entity;
         friend class SceneManager;
Index: OgreMain/include/OgreSubMesh.h
===================================================================
--- OgreMain/include/OgreSubMesh.h	(revision 9952)
+++ OgreMain/include/OgreSubMesh.h	(working copy)
@@ -61,6 +61,9 @@
     */
 	class _OgreExport SubMesh : public SubMeshAlloc
     {
+	public:
+		DECLARE_CLRHANDLE;
+		
         friend class Mesh;
         friend class MeshSerializerImpl;
         friend class MeshSerializerImpl_v1_2;
@@ -131,7 +134,8 @@
                 If this array is empty, submesh sorting is done like in older versions -
                 by comparing the positions of the owning entity.
          */
-        vector<Vector3>::type extremityPoints;
+        typedef vector<Vector3>::type PointList;
+        PointList extremityPoints;
 
         /// Reference to parent Mesh (not a smart pointer so child does not keep parent alive).
         Mesh* parent;
Index: OgreMain/include/OgreTagPoint.h
===================================================================
--- OgreMain/include/OgreTagPoint.h	(revision 9952)
+++ OgreMain/include/OgreTagPoint.h	(working copy)
@@ -61,6 +61,8 @@
 	{
 
 	public:
+		DECLARE_INIT_CLROBJECT_METHOD_OVERRIDE(TagPoint);
+		
 		TagPoint(unsigned short handle, Skeleton* creator);
 		virtual ~TagPoint();
 
Index: OgreMain/include/OgreTechnique.h
===================================================================
--- OgreMain/include/OgreTechnique.h	(revision 9952)
+++ OgreMain/include/OgreTechnique.h	(working copy)
@@ -52,6 +52,9 @@
     */
 	class _OgreExport Technique : public TechniqueAlloc
     {
+	public:
+		DECLARE_CLRHANDLE;
+		
     protected:
         // illumination pass state type
         enum IlluminationPassesState
@@ -121,6 +124,8 @@
 		/// Rule controlling whether technique is deemed supported based on GPU vendor
 		struct GPUVendorRule
 		{
+			DECLARE_CLRHANDLE;
+			
 			GPUVendor vendor;
 			IncludeOrExclude includeOrExclude;
 			GPUVendorRule()
@@ -131,6 +136,8 @@
 		/// Rule controlling whether technique is deemed supported based on GPU device name
 		struct GPUDeviceNameRule
 		{
+			DECLARE_CLRHANDLE;
+			
 			String devicePattern;
 			IncludeOrExclude includeOrExclude;
 			bool caseSensitive;
Index: OgreMain/include/OgreTextAreaOverlayElement.h
===================================================================
--- OgreMain/include/OgreTextAreaOverlayElement.h	(revision 9952)
+++ OgreMain/include/OgreTextAreaOverlayElement.h	(working copy)
@@ -43,6 +43,8 @@
     class _OgreExport TextAreaOverlayElement : public OverlayElement
     {
     public:
+		DECLARE_INIT_CLROBJECT_METHOD_OVERRIDE(TextAreaOverlayElement);
+		
         enum Alignment
         {
             Left,
Index: OgreMain/include/OgreTexture.h
===================================================================
--- OgreMain/include/OgreTexture.h	(revision 9952)
+++ OgreMain/include/OgreTexture.h	(working copy)
@@ -101,6 +101,8 @@
     class _OgreExport Texture : public Resource
     {
     public:
+		DECLARE_INIT_CLROBJECT_METHOD_OVERRIDE(Texture);
+		
         Texture(ResourceManager* creator, const String& name, ResourceHandle handle,
             const String& group, bool isManual = false, ManualResourceLoader* loader = 0);
 
Index: OgreMain/include/OgreTextureUnitState.h
===================================================================
--- OgreMain/include/OgreTextureUnitState.h	(revision 9952)
+++ OgreMain/include/OgreTextureUnitState.h	(working copy)
@@ -62,6 +62,9 @@
     {
         friend class RenderSystem;
     public:
+		// DECLARE_CLRHANDLE has been moved last because TextureUnitState uses memcpy to copy its members
+      	// at the copy assignment operator and we don't want the CLRHandle to get copied..
+
         /** Definition of the broad types of texture effect you can apply to a texture unit.
         @note
             Note that these have no effect when using the programmable pipeline, since their
@@ -1175,6 +1178,11 @@
 		///The data that references the compositor
 		String mCompositorRefName;
 		String mCompositorRefTexName;
+		
+		public:
+			DECLARE_CLRHANDLE;
+			
+		protected:
         //-----------------------------------------------------------------------------
 
         //-----------------------------------------------------------------------------
Index: OgreMain/include/OgreUnifiedHighLevelGpuProgram.h
===================================================================
--- OgreMain/include/OgreUnifiedHighLevelGpuProgram.h	(revision 9952)
+++ OgreMain/include/OgreUnifiedHighLevelGpuProgram.h	(working copy)
@@ -60,6 +60,8 @@
 	class _OgreExport UnifiedHighLevelGpuProgram : public HighLevelGpuProgram
 	{
 	public:
+		DECLARE_INIT_CLROBJECT_METHOD_OVERRIDE(UnifiedHighLevelGpuProgram);
+		
 		/// Command object for setting delegate (can set more than once)
 		class CmdDelegate : public ParamCommand
 		{
Index: OgreMain/include/OgreUserObjectBindings.h
===================================================================
--- OgreMain/include/OgreUserObjectBindings.h	(revision 9952)
+++ OgreMain/include/OgreUserObjectBindings.h	(working copy)
@@ -45,9 +45,11 @@
 	Any instance of Ogre class that will derive from this class could be associated with custom 
 	application object using this class interface.
 	*/
-	class _OgreExport UserObjectBindings : public GeneralAllocatedObject
+	class _OgreExport UserObjectBindings : public GeneralAllocatedObject, public CLRObject
 	{
 	public:	
+		DECLARE_INIT_CLROBJECT_METHOD_OVERRIDE(UserObjectBindings);
+		
 		/** Class constructor. */
 		UserObjectBindings();
 
Index: OgreMain/include/OgreVertexIndexData.h
===================================================================
--- OgreMain/include/OgreVertexIndexData.h	(revision 9952)
+++ OgreMain/include/OgreVertexIndexData.h	(working copy)
@@ -47,6 +47,9 @@
 	/** Summary class collecting together vertex source information. */
 	class _OgreExport VertexData : public VertexDataAlloc
 	{
+	public:
+		 DECLARE_CLRHANDLE;
+		 
     private:
         /// Protected copy constructor, to prevent misuse
         VertexData(const VertexData& rhs); /* do nothing, should not use */
@@ -238,6 +241,9 @@
 	/** Summary class collecting together index data source information. */
 	class _OgreExport IndexData : public IndexDataAlloc
 	{
+	public:
+		DECLARE_CLRHANDLE;
+		
     protected:
         /// Protected copy constructor, to prevent misuse
         IndexData(const IndexData& rhs); /* do nothing, should not use */
Index: OgreMain/include/OgreViewport.h
===================================================================
--- OgreMain/include/OgreViewport.h	(revision 9952)
+++ OgreMain/include/OgreViewport.h	(working copy)
@@ -53,9 +53,11 @@
             viewport on a single render target and they overlap, one must
             obscure the other in some predetermined way.
     */
-	class _OgreExport Viewport : public ViewportAlloc
+	class _OgreExport Viewport : public ViewportAlloc, public CLRObject
     {
-    public:       
+    public:  
+		DECLARE_INIT_CLROBJECT_METHOD_OVERRIDE(Viewport);
+		
         /** The usual constructor.
             @param
                 cam Pointer to a camera to be the source for the image.
Index: OgreMain/include/OgreWireBoundingBox.h
===================================================================
--- OgreMain/include/OgreWireBoundingBox.h	(revision 9952)
+++ OgreMain/include/OgreWireBoundingBox.h	(working copy)
@@ -47,6 +47,9 @@
     */
 	class _OgreExport WireBoundingBox : public SimpleRenderable
 	{
+	public:
+		DECLARE_INIT_CLROBJECT_METHOD_OVERRIDE(WireBoundingBox);
+		
     protected:
         /** Override this method to prevent parent transforms (rotation,translation,scale)
         */
Index: OgreMain/include/OgreZip.h
===================================================================
--- OgreMain/include/OgreZip.h	(revision 9952)
+++ OgreMain/include/OgreZip.h	(working copy)
@@ -53,6 +53,9 @@
     */
     class _OgreExport ZipArchive : public Archive 
     {
+	public:
+		DECLARE_INIT_CLROBJECT_METHOD_OVERRIDE(ZipArchive);
+		
     protected:
         /// Handle to root zip file
         ZZIP_DIR* mZzipDir;
