C++/CLI Cheat Sheet
===================
This file's purpose is a quick comparison between C++/CLI and C#. It's meant
for those who know C# (and possibly C++) and will explain which C++/CLI language 
construct correspond with which in C#. (I don't know Visual Basic so I can't add
infos about this here.)

NOTE: This is not a complete reference but rather quick reference for those features
  that are (in my opinion) the most unclear.

NOTE 2: C++/CLI is currently only available on Windows. At the time of writing (mid 2010)
  there are no plans in the Mono project to support C++/CLI. Such support would be
  necessary as a C++/CLI compiler creates mixed code that contains native and managed
  code. While the managed code could be executed by the Mono runtime the native can't.
  Therefore a C++/CLI library can't be used on Linux or MacOSX (or any other Mono 
  supported OS).

See also:
* http://www.codeproject.com/KB/mcpp/cppcliintro01.aspx
* http://www.codeproject.com/KB/books/CppCliInActionCh1Ex1.aspx
* http://www.codeproject.com/KB/mcpp/cppcliarrays.aspx


Introduction
------------
C++/CLI is - as the name suggest - an extension of C++ to allow it to use Microsoft's
.NET framework including the CLR (common language runtime; i.e. garbage collection and
such things).

C++/CLI is the successor of "Managed C++", which felt unnatural to many programmers.
However, both "languages" have the same goal: combine native code with managed code.


Handles
-------
C++/CLI allows for two reference/pointer types:

 * native pointers (*, &): Pointers as they're known from C/C++. They are not garbage collected
     and must be managed manually in the code. Created with "malloc()" or "new".
	 Example: char*
 * handles (^): Are the references as they're used in C# (or all other .NET languages). Handles
     are garbage collected (meaning you don't need to free them manually) and are created by
	 "gcnew" (instead of "new" with pointers).
     Example: String^

The members of a handle are accessed with the "->" operator (and not with the "." operator).


Casting handles
---------------
There are several ways to cast a handle to another type:

  * safe cast: Casts the handle to the other type, if possible, and throws an exception
      if the cast isn't possible due to incompatible types. This is identical to a C#
	  type cast. Examples:
	  * (NewType^)myHandle
	  * safe_cast<NewType^>(myHandle)
  * dynamic cast: Casts the handle to the other type, if possible, and returns "nullptr"
      if the cast isn't possible due to incompatible types. This is identical to the
	  C# keyword "as" (or "is", if used in a condition). Examples:
	  * dynamic_cast<NewType^>(myHandle)
      * if (dynamic_cast<NewType^>(myHandle) != nullptr) { ... }
  * static cast: This is the equivalent of a C++ type cast; i.e. not type checking is
      done. Doing an invalid cast on a handle this way will result in undefined
	  behaviour. Can't be used when the compiler option "/clr:safe" is enabled. Example:
	  * static_cast<NewType^>(myHandle)


Passing handles
---------------
Passing a handle to or from a method works in C++/CLI as expected. The handle inside the
method identifies the same instance that it identified outside of the method (i.e. the 
object is passed as reference and not as copy).

  void ChangeString(MyClass^ str)
  {
    str.myInnerString = "New string";
  }

  // In main()
  MyClass^ str = gcnew MyClass("Old string");
  ChangeString(str);
  Console::WriteLine(str.myInnerString);

This code changes "myInnerString" as expected.

To pass the reference to the handle itself (C# keyword "ref"), the "%" operator must be
used (like the "&" operator in C++):

  void ChangeString(String^% str)
  {
    str = "New string";
  }

  // In main()
  String^ str = "Old string";
  ChangeString(str);
  Console::WriteLine(str);

This again changes the string. Note the "%" in "ChangeString()".

Notes:
 * For the C# keyword "out", the parameter must also be prefixed with the [Out] attribute
   (from "System::Runtime::InteropServices") like: "void ChangeString([Out] String^% str)"
 * Unlike C# "out" and "ref" don't need to be specified when calling methods using the "%"
   operator.
 * Handles are type-safe, i.e. you can't cast them to anything aren't.
 * Handles can't be cast to or from "void^".


CLR types
--------
A type (class, struct) becomes a CLR type when it's being prefixed with a specific keyword.

 * Native types: "class", "struct"
 * Managed types:
   * C# class: "ref class", "ref struct"
   * C# struct: "value class", "value struct"
   * C# interface: "interface class", "interface struct"
   * C# enum: "enum class", "enum struct"

Notes: 
  * In C++ "struct" and "class" can be used interchangeably with the difference that
    all C++ "struct" members are public by default while all C++ "class" members are private
    by default. To avoid confusion "ref struct", "value class", and "interface struct" should
    not be used. For an "interface class", however, all members are public automatically.
  * Don't forget to terminate a type declaration (even classes and structs) with a semicolon;
    i.e. use "ref class MyClass { };". Otherwise you will get compiler errors. (Just added this
    here as this is not necessary in C#.)
  * In C++/CLI a CLR type can be used as a handle or not directly on the stack, i.e.:
    "MyCLRType^ myHandleVar" <=> "MyCLRType myStackVar"


Modifiers: visibility
---------------------
Visibility modifiers for class/struct members are used as in C++:

  public:
    int my_public_var;
	String^ my_public_string;

Visibility modifiers for classes/structs themself are prefixed before the CLR type keyword
(i.e. like used as in C#):

  public ref class MyClass { };
  protected value struct MyStruct { };

Classes/structs without visibility modifier will be interpreted as "internal".

Beside using a single visibility modifier, C++/CLI allows the programmer to
specify two modifiers. The rule here is: The higher visibility is used inside the
assembly and the lower visibility outside the assembly.

Here's a list of supported modifiers:

  C++/CLI           | C#
  ------------------+-----------------------
  public            | public
  protected         | protected
  private           | private
  internal          | internal
  public protected  | internal protected
  protected private | not possible (i.e. you can't define this in C# although
                    |               it's a valid CLR visibility)


Modifiers: abstract, sealed, static
-----------------------------------
If the modifiers "abstract" and "sealed" needs to be specified after the class
name but before the inheritance operator:

  public ref class MyTestClass2 abstract : MyTestClass { };

The meaning of these keywords translates directly into C#. Combining both
keywords results in a "static" C# class/struct.

For members (methods and fields) the keywords "abstract" and "sealed" must
be specified after the parameter list:

  virtual void Func() abstract;

"static", on the other hand, must be specified before the return type:

  static int MyFunc();


Inheritance
-----------
Inheritance for CLR types is like you know it from C#. Therefore just some notes:

 * Only public inheritance is allowed for CLR types. This doesn't work:
   ref class Derived1 : private Base {};
   If no visibility is specified, "public" will be assumed automatically.
 * Multiple inheritance isn't supported by the CLR (although it is by C++).
 * "value" types can only inherit interfaces.
 * "value" types are automatically sealed.


Arrays
------
Arrays are defined like this in C++/CLI:

 * array<int>^ myArr1
 * array<String^>^ myArr2
 * array<String^> myArr3

Arrays (if they're a handle) are created using "gcnew":

 * Regular array: 
     array<int>^ strarray = gcnew array<int>(5); // 5 elements
 * Multi-dimensional array: 
     array<String^,2>^ names = gcnew array<String^,2>(4,3); // 4x3 elements
 * Jagged array (array of arrays): 
     array<array<int>^>^ arr = gcnew array<array<int>^> (5); 

Accessing an element works like in C# or C++:

   myArray[5]  // retrieves or sets the 6th array element


Destructors and Finalizers
--------------------------
The terms and syntax for destructors and finalizer may be somewhat confusing between
C++, C++/CLI and C#. Therefore here is an example:

  ref class MyClass // : IDisposable (this is added by the compiler)
  {
  public:
    MyClass();  // constructor
    ~MyClass(); // (deterministic) destructor (turned into IDisposable.Dispose() by the compiler)
  protected:
    !MyClass(); // finalizer (non-deterministic destructor) (turned into "virtual void Finalize()" by the compiler)
  };

NOTE: The destructor ("Dispose()") will NOT be called automatically from the finalizer. Therefore,
  if cleaning up resources is done in the destructor, the finalizer must explicitly call the
  destructor (using "this->~MyClass();").


Glossary
--------
* Garbage Collector (GC): reclaims garbage, or memory used by objects that will never 
    be accessed or mutated again by the application.
* Common Language Infrastructure (CLI): It is an open specification that defines a 
    runtime environment that allows multiple high-level languages to be used on different
	computer platforms without being rewritten for specific architectures.
* Common Type System (CTS): a standard that specifies how Type definitions and specific 
    values of Types are represented in computer memory, so programs in different programming 
	languages can easily share information.
* Base Class Library (BCL): a standard library available to all languages using the .NET Framework, 
    comparable in scope to the standard libraries of Java.
* Framework Class Library (FCL): a collection of thousands of reusable classes, interfaces and value 
    types, within hundreds of namespaces. BCL is a part of FCL and provide the most fundamental 
	functionality.
* Mono: Free .NET (CLI) alternative available on Linux, MacOSX and Windows. The development is usually
    behind the development of Microsoft's .NET implementation (e.g. while Microsoft supports .NET 4.0,
	Mono only supports .NET 2.0).
