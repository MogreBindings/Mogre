
======== Foreword ========

This file contains alternative build instructions. 
They were created by user Cygon, who created his own custom 
Visual Studio files and figured out his own way how to 
compile Ogre, its depencies and Mogre (including wrapping). 

User Cygon created his builds from the scratch in August 2011 
with the target to build Mogre 1.7 for .NET 4.0. 
Some of his improvements we still included to the official Mogre 
repository. Others we currently didn't add yet. It's difficult, 
because the official Ogre setup (by CMake) autogenerates 
Visual Studio files, including settings. 
The VS files of Cygon are made by hand. Currently it seems not 
to be possible to merge the costom settings to the autogenerated 
ones.




So you have to decide:


1)
Do it the "official way" (using Ogres CMake setup). 
This can be done very easy by help of the tool MogreBuilder:
http://www.ogre3d.org/tikiwiki/MogreBuilder


2)
Do it the Cygon way:
Follow the build instructions below.
Additional look into these files:
  http://www.nuclex.org/MogreTutorial-1.7.3-VC2010-x86-x64.7z
  http://www.nuclex.org/MogrePatchesAndSolutions-1.7.3.7z 
Further details are in the forum topic:
  http://www.ogre3d.org/addonforums/viewtopic.php?p=81869#p81869
Perhaps it's very easy to update and compile it with the custom 
VS files of Cygon. (There are 32 and 64 bit configurations.)




So, this was my "foreword". (Written by Beauty in April 2012.)




======== Instructions for the "Cygon Builds" ========


0. Start out with the Mogre 1.7.1 source tree and place it into a
   directory called Mogre-1.7.3 (we'll update it to that version in a minute)

1. Download the Ogre 1.7.3 source distribution and extract it into
   
   ...\Mogre-1.7.3\MAIN\OgreSrc\ogre
   
   Parity check: Your OgreException file should have ended up in this path:
   
   ...\Mogre-1.7.3\MAIN\OgreSrc\ogre\OgreMain\src\OgreException.cpp
   
2. Apply the CLRObject patch. This adds some fields into public Ogre classes
   that will be used by Mogre to look up the managed wrappers (so when the Ogre
   API returns some object, like a texture, for which a managed wrapper already
   exists, Mogre can just look it up and return the existing wrapper).

   In ...\ (one level above the Mogre-1.7.3 directory) run 
   patch -p0 < mogre-1.7.3-clrobject.patch

3. Run cpp2java (just double-click Codegen\cpp2java\build.bat)
   It's a script that runs DoxyGen, configured to output the structure of
   the Ogre classes and structs in an XML format. The XML is then massaged
   into a format understood by AutoWrap.

4. Run AutoWrap (open Codegen\AutoWrap\AutoWrap_vs2010.sln)
   It's a C# application, just open the solution and run it. It should start
   up without any errors and complete successfully when you click on
   the "produce" button.
   
   AutoWrap will generate C++/CLI wrappers for all of the classes in the public
   Ogre headers. This will end up in Main\include\auto and Main\src\auto.

5. Copy Main\Ogre\*.h to Main\OgreSrc\ogre\OgreMain\include\
   Copy Main\Ogre\*.cpp to Main\OgreSrc\ogre\OgreMain\src\
   Copy Main\include\auto\CLRObjects.inc to Main\OgreSrc\ogre\OgreMain\include\

6. (Optional) Apply the cygon patch.

   This patch adds some #pragma managed(push, off) sections around unmanaged
   headers, preventing the compiler from generating MSIL representations of
   countless C++ standard library types that aren't used on the C# side anyway.

   The results were:
   Mogre.dll (x86) from 12.3 MiB to 8.1 MiB
   Mogre.dll (x64) from 20.8 MiB to 9.0 MiB

   If also moves the shutdown code from the finalizer of Mogre.Root into its
   destructor (IDisposable.Dispose()). This is done because Ogre's OpenGL driver
   couldn't cope with the shutdown happening from the GC thread. Maybe future
   versions of Ogre won't need this change.

7. Edit Main\OgreSrc\ogre\OgreMain\include\CLRConfig.h
   Set LINK_TO_MOGRE to 0

8. Compile Ogre. You can use CMake and the standard Mogre solution, but for my
   builds, I used my own solutions. You can get them by extracting
   mogre-1.7.3-solutions.7z one level above your Mogre-1.7.3 directory 

   Main\OgreSrc\ogre\Build\msvc-2010\OgreMain (x86).sln
   Main\OgreSrc\ogre\Build\msvc-2010\OgreMain (x64).sln
   
   You can compile both simultaneously, they won't collide. The only projects
   that have to be compiled at this stage are OgreMain, OgrePaging and OgreTerrain.

   The way these projects are configured, they expect some dependencies to sit
   parallel to the Mogre-1.7.3 directory, eg.
     
     Devel\
       Mogre-1.7.3\
       FreeImage-3.15.1\
       Boost-1.47.0\
       ZLib-1.2.5\
       ZZipLib-0.13.60\
   
   If that's not your directory layout, either prepare a directory with this layout or
   update the paths in the project files ;)

9. Compile Mogre via one of the provided solutions (that is, if you extracted
   the .7z archive above. Otherwise, use the official Mogre solution).

   Main\Mogre (x86).sln
   Main\Mogre (x64).sln
   
   As before, you can compile both simultaneously without running into trouble.
   
   Notice that you need to change the 'Key File' property under
   Project Settings -> Linker -> Advanced. Either remove it (to generate
   an assembly without a strong name) or point it to your own strong name
   (generated via sn -k keyfile.snk).
   
   Another notice for users of Visual Studio 2010 SP1 (affects Express and Full):
   SP1 has broken assembly signing for C++/CLI projects in the x86 architecture.
   http://blogs.msdn.com/b/vcblog/archive/2011/03/11/10140139.aspx
   http://msdn.microsoft.com/en-us/visualc/gg701941

10. Edit Main\OgreSrc\ogre\OgreMain\include\CLRConfig.h
    Set LINK_TO_MOGRE to 1

11. Compile Ogre via one of the provided solutions:

    Main\OgreSrc\ogre\Build\msvc-2010\OgreMain (x86).sln
    Main\OgreSrc\ogre\Build\msvc-2010\OgreMain (x64).sln
   
    This time, compile everything.

12. You can now pick up your binaries from (again assuming you used the custom
    solutions from the .7z archive)

    Main\OgreSrc\ogre\Build\msvc-2010\bin\{x86|x64}\<project>\Release
    Main\bin\{x86|x64}\<project>\Release
